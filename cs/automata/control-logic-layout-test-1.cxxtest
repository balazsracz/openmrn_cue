#include <unistd.h>

#include <string>
#include "gtest/gtest.h"
#include "gmock/gmock.h"

#include "control_logic_test_helper.hxx"
#include "../automata/control-logic.hxx"

using ::testing::HasSubstr;

extern int debug_variables;

namespace automata {

TEST_F(LogicTrainTest, ScheduleStraight) {
  TestDetectorBlock before(this, "before");
  static StraightTrackLong mid(alloc()->Allocate("mid", 80));
  DefAut(autmid, brd, { mid.RunAll(this); });
  static TestBlock first(this, "first");
  static TestBlock second(this, "second");
  static StraightTrackLong after(alloc()->Allocate("after", 80));

  BindSequence({&before.b, first.b(), &mid, second.b(), &after});

  ASSERT_EQ(first.b()->signal_.side_b(), mid.side_a()->binding());

  static FakeBit mcont(this);

  class MyTrain : public TrainSchedule {
   public:
    MyTrain(Board* b, const AllocatorPtr& alloc)
        : TrainSchedule("mytrain", b,
                        openlcb::TractionDefs::NODE_ID_DCC | 0x1384,
                        alloc->Allocate("mytrain.pbits", 8),
                        alloc->Allocate("mytrain", 16)) {}

    void RunTransition(Automata* aut) OVERRIDE {
      auto* cv = aut->ImportVariable(&mcont);
      Def()
          .IfState(StWaiting)
          .IfReg1(*cv)
          .ActState(StReadyToGo)
          .ActReg0(cv);
      Def()
          .ActImportVariable(*first.b()->request_green(),
                             routing_block_request_green_)
          .ActImportVariable(first.b()->route_out(),
                             routing_block_route_out_)
          .ActImportVariable(second.b()->detector(),
                             next_block_detector_);
      MapCurrentBlockPermaloc(*first.b());
      Def()
          .ActImportVariable(second.b()->detector(), current_block_detector_)
          .ActImportVariable(
              *AllocateOrGetLocationByBlock(*second.b())->permaloc(),
               next_block_permaloc_);

      Def().IfState(StRequestTransition).ActState(StTransitionDone);
    }

   private:
    FRIEND_TEST(automata::LogicTrainTest, ScheduleStraight);
  } train_aut(&brd, block_.allocator());

  SetupRunner(&brd);
  
  // No trains initially.
  first.inverted_detector()->Set(true);
  second.inverted_detector()->Set(true);
  Run(1);

  // No trains initially.
  first.inverted_detector()->Set(true);
  second.inverted_detector()->Set(true);
  Run(20);
  EXPECT_FALSE(QueryVar(*first.b()->body_det_.simulated_occupancy_));
  EXPECT_FALSE(QueryVar(*second.b()->body_det_.simulated_occupancy_));

  // Train is at first. No green yet.
  mcont.Set(false);
  first.inverted_detector()->Set(false);
  second.inverted_detector()->Set(true);
  Run(30);
  LOG(INFO, "Sending off train.");
  EXPECT_EQ(0, trainImpl_.get_speed().speed());
  mcont.Set(true);
  Run(30);
  EXPECT_TRUE(QueryVar(*train_aut.is_moving_));
  //EXPECT_EQ(StMoving.state, runner_->GetAllAutomatas().back()->GetState());
  EXPECT_TRUE(first.signal_green()->Get());
  EXPECT_FALSE(mcont.Get());
  wait();
  EXPECT_EQ(40, (int)(trainImpl_.get_speed().mph() + 0.5));

  LOG(INFO, "Train arriving at destination.");
  first.inverted_detector()->Set(true);
  second.inverted_detector()->Set(false);
  Run(20);

  wait();
  EXPECT_EQ(0, trainImpl_.get_speed().mph());
}

// This is the test layout. It's a dogbone (a loop) with 6 standard blocks.
// There is a stub track in the turnaround loop. It has a moveableturnout as
// entry, then a fixedturnout to exit.
//
// There is a crossover of fixed turnouts to get back from TopB to BotB when
// going wrong-way.
//
//   >Rleft
//  /--\  TopA>TopB  /---------\   x
//  |   \------/----/--/--x    |   x
//  |   /-----/-----\-/  RStub |   x
//  \--/  BotB<BotA  \---------/   x
//                   <RRight
//
//

TEST_F(SampleLayoutLogicTrainTest, ScheduleStraight) {
  debug_variables = 0;
  class MyTrain : public TrainSchedule {
   public:
    MyTrain(SampleLayoutLogicTrainTest* t, Board* b,
            const AllocatorPtr& alloc)
        : TrainSchedule("mytrain", b,
                        openlcb::TractionDefs::NODE_ID_DCC | 0x1384,
                        alloc->Allocate("mytrain.pbits", 8),
                        alloc->Allocate("mytrain", 16)),
          t_(t) {}

    void RunTransition(Automata* aut) OVERRIDE {
      AddEagerBlockTransition(*t_->TopA.b(), *t_->TopB.b());
      //AddDirectBlockTransition(t_->TopA.b(), t_->TopB.b(), nullptr, false);
      StopTrainAt(*t_->TopB.b());
    }
   private:
    SampleLayoutLogicTrainTest* t_;
  } my_train(this, &brd, alloc());

  SetupRunner(&brd);

  Run(20);
  EXPECT_TRUE(TopA.inverted_detector()->Get());
  EXPECT_TRUE(TopB.inverted_detector()->Get());
  EXPECT_FALSE(QueryVar(*TopA.b()->body_det_.simulated_occupancy_));
  EXPECT_FALSE(QueryVar(*TopB.b()->body_det_.simulated_occupancy_));
  EXPECT_EQ(0, trainImpl_.get_speed().speed());
  
  LOG(INFO, "Flipping detector at source location.");
  TopA.inverted_detector()->Set(false);
  Run(20);

  LOG(INFO, "Setting train to the source location.");
  SetVar(*my_train.TEST_GetPermalocBit(*TopA.b()), true);
  wait();
  Run(20);
  wait();
  EXPECT_EQ(40, (int)(trainImpl_.get_speed().mph() + 0.5));
  EXPECT_TRUE(TopA.signal_green()->Get());
  
  Run(20);
  LOG(INFO, "Train arriving at dest location.");
  TopB.inverted_detector()->Set(false);
  TopA.inverted_detector()->Set(true);
  Run(20);
  wait();
  EXPECT_EQ(0, trainImpl_.get_speed().mph());

  // Some expectations on where the train actually is (block TopB).
  EXPECT_FALSE(QueryVar(*my_train.TEST_GetPermalocBit(*TopA.b())));
  EXPECT_TRUE(QueryVar(*my_train.TEST_GetPermalocBit(*TopB.b())));
  EXPECT_FALSE(QueryVar(TopA.b()->route_out()));
  EXPECT_FALSE(QueryVar(TopB.b()->route_out()));
  EXPECT_TRUE(QueryVar(TopB.b()->route_in()));
  EXPECT_FALSE(TopB.signal_green()->Get());
}


TEST_F(SampleLayoutLogicTrainTest, RunCircles) {
  class MyTrain : public TrainSchedule {
   public:
    MyTrain(SampleLayoutLogicTrainTest* t, Board* b,
            const AllocatorPtr& alloc)
        : TrainSchedule("mytrain", b,
                        openlcb::TractionDefs::NODE_ID_DCC | 0x1384,
                        alloc->Allocate("mytrain.pbits", 8),
                        alloc->Allocate("mytrain", 16)),
          t_(t) {}

    void RunTransition(Automata* aut) OVERRIDE {
      // Switches the turnout (permanently) to the outer loop.
      Def().ActReg1(
          aut->ImportVariable(t_->RStubEntry.b.magnet()->command.get()));
      AddEagerBlockSequence({t_->TopA.b(), t_->TopB.b(), t_->RRight.b(),
                             t_->BotA.b(), t_->BotB.b(), t_->RLeft.b(),
                             t_->TopA.b()});
    }
   private:
    SampleLayoutLogicTrainTest* t_;
  } my_train(this, &brd, alloc());
  SetupRunner(&brd);
  Run(20);
  vector<TestBlock*> blocks = {&TopA, &TopB, &RRight, &BotA, &BotB, &RLeft};
  TopA.inverted_detector()->Set(false);
  SetVar(*my_train.TEST_GetPermalocBit(*TopA.b()), true);
  
  for (int i = 0; i < 37; ++i) {
    LOG(INFO, "sequence %d", i);
    TestBlock* cblock = blocks[i % blocks.size()];
    TestBlock* nblock = blocks[(i + 1) % blocks.size()];
    Run(20);
    EXPECT_TRUE(QueryVar(cblock->b()->route_out()));
    EXPECT_TRUE(QueryVar(nblock->b()->route_in()));
    cblock->inverted_detector()->Set(true);
    Run(20);
    EXPECT_FALSE(QueryVar(cblock->b()->route_in()));
    EXPECT_FALSE(QueryVar(cblock->b()->route_out()));
    EXPECT_TRUE(QueryVar(nblock->b()->route_in()));

    EXPECT_TRUE(QueryVar(*my_train.TEST_GetPermalocBit(*nblock->b())));
    EXPECT_FALSE(QueryVar(*my_train.TEST_GetPermalocBit(*cblock->b())));

    nblock->inverted_detector()->Set(false);
    Run(20);
  }
}

TEST_F(SampleLayoutLogicTrainTest, SpeedSetting) {
  uint64_t speed_event_base = BRACZ_SPEEDS | 0x8400;
  static ByteImportVariable speed_var(&brd, "speed.mytrain", speed_event_base,
                                      30);
  class MyTrain : public TrainSchedule {
   public:
    MyTrain(SampleLayoutLogicTrainTest* t, Board* b,
            const AllocatorPtr& alloc)
        : TrainSchedule("mytrain", b,
                        openlcb::TractionDefs::NODE_ID_DCC | 0x1384,
                        alloc->Allocate("mytrain.pbits", 8),
                        alloc->Allocate("mytrain", 16),
                        &speed_var),
          t_(t) {}

    void RunTransition(Automata* aut) OVERRIDE {
      // Switches the turnout (permanently) to the outer loop.
      Def().ActReg1(
          aut->ImportVariable(t_->RStubEntry.b.magnet()->command.get()));
      AddEagerBlockSequence({t_->TopA.b(), t_->TopB.b(), t_->RRight.b(),
                             t_->BotA.b(), t_->BotB.b(), t_->RLeft.b(),
                             t_->TopA.b()});
    }
   private:
    SampleLayoutLogicTrainTest* t_;
  } my_train(this, &brd, alloc());
  SetupRunner(&brd);
  Run(20);
  vector<TestBlock*> blocks = {&TopA, &TopB, &RRight, &BotA, &BotB, &RLeft};
  TopA.inverted_detector()->Set(false);
  SetVar(*my_train.TEST_GetPermalocBit(*TopA.b()), true);

  vector<uint8_t> speeds = {30, 50, 19, 20};

  for (int i = 0; i < 37; ++i) {
    TestBlock* cblock = blocks[i % blocks.size()];
    TestBlock* nblock = blocks[(i + 1) % blocks.size()];
    uint8_t speed = speeds[i % speeds.size()];
    Run(40);
    EXPECT_TRUE(QueryVar(cblock->b()->route_out()));
    EXPECT_TRUE(QueryVar(nblock->b()->route_in()));
    cblock->inverted_detector()->Set(true);
    Run(40);
    EXPECT_FALSE(QueryVar(cblock->b()->route_in()));
    EXPECT_FALSE(QueryVar(cblock->b()->route_out()));
    EXPECT_TRUE(QueryVar(nblock->b()->route_in()));

    EXPECT_EQ(speed, (int)(trainImpl_.get_speed().mph() + 0.5));

    EXPECT_TRUE(QueryVar(*my_train.TEST_GetPermalocBit(*nblock->b())));
    EXPECT_FALSE(QueryVar(*my_train.TEST_GetPermalocBit(*cblock->b())));

    nblock->inverted_detector()->Set(false);
    speed = speeds[(i+1) % speeds.size()];
    ProduceEvent(speed_event_base | speed);
    wait();
  }
}

TEST_F(SampleLayoutLogicTrainTest, ScheduleConditional) {
  class MyTrain : public TrainSchedule {
   public:
    MyTrain(SampleLayoutLogicTrainTest* t, Board* b,
            const AllocatorPtr& alloc)
        : TrainSchedule("mytrain", b,
                        openlcb::TractionDefs::NODE_ID_DCC | 0x1384,
                        alloc->Allocate("mytrain.pbits", 8),
                        alloc->Allocate("mytrain", 16)),
          gate_("gate", alloc_),
          t_(t) {}

    void RunTransition(Automata* aut) OVERRIDE {
      AddBlockTransitionOnPermit(*t_->TopA.b(), *t_->TopB.b(), &gate_);
      StopTrainAt(*t_->TopB.b());
    }

    RequestClientInterface gate_;
   private:
    SampleLayoutLogicTrainTest* t_;
  } my_train(this, &brd, alloc());
  SetupRunner(&brd);

  Run(20);
  EXPECT_TRUE(TopA.inverted_detector()->Get());
  EXPECT_TRUE(TopB.inverted_detector()->Get());
  EXPECT_FALSE(QueryVar(*TopA.b()->body_det_.simulated_occupancy_));
  EXPECT_FALSE(QueryVar(*TopB.b()->body_det_.simulated_occupancy_));
  EXPECT_EQ(0, trainImpl_.get_speed().speed());
  
  LOG(INFO, "Flipping detector at source location.");
  TopA.inverted_detector()->Set(false);
  Run(20);
  EXPECT_FALSE(QueryVar(*my_train.gate_.request()));

  LOG(INFO, "Setting train to the source location.");
  SetVar(*my_train.TEST_GetPermalocBit(*TopA.b()), true);
  wait();
  Run(20);
  wait();
  EXPECT_TRUE(QueryVar(*my_train.gate_.request()));
  EXPECT_EQ(0, trainImpl_.get_speed().speed());
  
  // We'll make the destination block occupied and see that the request will be
  // taken back.
  TopB.inverted_detector()->Set(false);
  Run(20);
  EXPECT_FALSE(QueryVar(*my_train.gate_.request()));
  EXPECT_EQ(0, trainImpl_.get_speed().speed());
  
  TopB.inverted_detector()->Set(true);
  Run(20);
  EXPECT_TRUE(QueryVar(*my_train.gate_.request()));
  EXPECT_EQ(0, trainImpl_.get_speed().speed());

  // We grant the request.
  SetVar(*my_train.gate_.granted(), true);
  Run(20);
  EXPECT_FALSE(QueryVar(*my_train.gate_.request()));
  EXPECT_TRUE(QueryVar(*my_train.gate_.taken()));
  EXPECT_EQ(40, (int)(trainImpl_.get_speed().mph() + 0.5));
  EXPECT_TRUE(TopA.signal_green()->Get());
  
  Run(20);
  LOG(INFO, "Train arriving at dest location.");
  TopB.inverted_detector()->Set(false);
  TopA.inverted_detector()->Set(true);
  Run(20);
  wait();
  EXPECT_EQ(0, trainImpl_.get_speed().mph());

  // Some expectations on where the train actually is (block TopB).
  EXPECT_FALSE(QueryVar(*my_train.TEST_GetPermalocBit(*TopA.b())));
  EXPECT_TRUE(QueryVar(*my_train.TEST_GetPermalocBit(*TopB.b())));
  EXPECT_FALSE(QueryVar(TopA.b()->route_out()));
  EXPECT_FALSE(QueryVar(TopB.b()->route_out()));
  EXPECT_TRUE(QueryVar(TopB.b()->route_in()));
  EXPECT_FALSE(TopB.signal_green()->Get());
}

TEST_F(SampleLayoutLogicTrainTest, RunCirclesWithTurnout) {
  class MyTrain : public TrainSchedule {
   public:
    MyTrain(SampleLayoutLogicTrainTest* t, Board* b,
            const AllocatorPtr& alloc)
        : TrainSchedule("mytrain", b,
                        openlcb::TractionDefs::NODE_ID_DCC | 0x1384,
                        alloc->Allocate("mytrain.pbits", 8),
                        alloc->Allocate("mytrain", 16)),
          t_(t) {}

    void RunTransition(Automata* aut) OVERRIDE {
      AddEagerBlockSequence({t_->TopA.b(), t_->TopB.b()});
      AddEagerBlockTransition(*t_->TopB.b(), *t_->RRight.b());
      SwitchTurnout(t_->RStubEntry.b.magnet(), true);
      AddEagerBlockSequence(
          {t_->RRight.b(), t_->BotA.b(), t_->BotB.b(), t_->RLeft.b(), t_->TopA.b()});
    }
   private:
    SampleLayoutLogicTrainTest* t_;
  } my_train(this, &brd, alloc());
  SetupRunner(&brd);
  Run(20);
  vector<TestBlock*> blocks = {&TopA, &TopB, &RRight, &BotA, &BotB, &RLeft};
  TopA.inverted_detector()->Set(false);
  SetVar(*my_train.TEST_GetPermalocBit(*TopA.b()), true);
  
  for (int i = 0; i < 37; ++i) {
    TestBlock* cblock = blocks[i % blocks.size()];
    TestBlock* nblock = blocks[(i + 1) % blocks.size()];
    Run(20);
    EXPECT_TRUE(QueryVar(cblock->b()->route_out()));
    EXPECT_TRUE(QueryVar(nblock->b()->route_in()));
    cblock->inverted_detector()->Set(true);
    Run(20);
    EXPECT_FALSE(QueryVar(cblock->b()->route_in()));
    EXPECT_FALSE(QueryVar(cblock->b()->route_out()));
    EXPECT_TRUE(QueryVar(nblock->b()->route_in()));

    EXPECT_TRUE(QueryVar(*my_train.TEST_GetPermalocBit(*nblock->b())));
    EXPECT_FALSE(QueryVar(*my_train.TEST_GetPermalocBit(*cblock->b())));

    nblock->inverted_detector()->Set(false);
    Run(20);
  }
}


TEST_F(SampleLayoutLogicTrainTest, RunCircleBlocked) {
  class MyTrain : public TrainSchedule {
   public:
    MyTrain(SampleLayoutLogicTrainTest* t, Board* b,
            const AllocatorPtr& alloc)
        : TrainSchedule("mytrain", b,
                        openlcb::TractionDefs::NODE_ID_DCC | 0x1384,
                        alloc->Allocate("mytrain.pbits", 8),
                        alloc->Allocate("mytrain", 16)),
          t_(t) {}

    void RunTransition(Automata* aut) OVERRIDE {
      // Switches the turnout (permanently) to the outer loop.
      Def().ActReg1(
          aut->ImportVariable(t_->RStubEntry.b.magnet()->command.get()));
      AddEagerBlockSequence({t_->TopA.b(), t_->TopB.b(), t_->RRight.b(),
                             t_->BotA.b(), t_->BotB.b(), t_->RLeft.b(),
                             t_->TopA.b()});
    }
   private:
    SampleLayoutLogicTrainTest* t_;
  } my_train(this, &brd, alloc());
  SetupRunner(&brd);
  Run(20);
  TopA.inverted_detector()->Set(false);
  SetVar(*my_train.TEST_GetPermalocBit(*TopA.b()), true);
  SetVar(*BotB.b()->auto_blocked(), true);
  Run(100);

}

}  // namespace automata
