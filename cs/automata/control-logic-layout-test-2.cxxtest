#include <unistd.h>

#include <string>
#include "gtest/gtest.h"
#include "gmock/gmock.h"

#include "control_logic_test_helper.hxx"
#include "../automata/control-logic.hxx"

using ::testing::HasSubstr;

extern int debug_variables;

namespace automata {

TEST_F(SampleLayoutLogicTrainTest, RunCirclesReversedAtTopB) {
  class MyTrain : public TrainSchedule {
   public:
    MyTrain(SampleLayoutLogicTrainTest* t, Board* b,
            const AllocatorPtr& alloc)
        : TrainSchedule("mytrain", b,
                        openlcb::TractionDefs::NODE_ID_DCC | 0x1384,
                        alloc->Allocate("mytrain.pbits", 8),
                        alloc->Allocate("mytrain", 16)),
          t_(t) {}

    void RunTransition(Automata* aut) OVERRIDE {
      AddEagerBlockSequence({t_->TopA.b(), t_->TopB.b()});
      StopAndReverseAtStub(*t_->TopB.b());
      AddDirectBlockTransition(t_->TopB.b()->rev_signal, *t_->BotB.b());
      AddEagerBlockSequence(
          {t_->BotB.b(), t_->RLeft.b(), t_->TopA.b()});
    }
   private:
    SampleLayoutLogicTrainTest* t_;
  } my_train(this, &brd, alloc());
  SetupRunner(&brd);
  Run(20);
  vector<TestBlock*> blocks = {&TopB, &BotB, &RLeft, &TopA, &TopB};
  TopB.inverted_detector()->Set(false);
  SetVar(*my_train.TEST_GetPermalocBit(*TopB.b()), true);
  debug_variables = 1;

  for (int loop = 0; loop < 5; ++loop) {
    for (unsigned i = 0; i < blocks.size() - 1; ++i) {
      TestBlock* cblock = blocks[i];
      TestBlock* nblock = blocks[i + 1];
      LOG(INFO, "Going from %s to %s", cblock->b_.base_name().c_str(),
          nblock->b_.base_name().c_str());
      Run(20);
      if (i == 0) {
        EXPECT_TRUE(QueryVar(cblock->b()->rev_route_out()));
        EXPECT_FALSE(QueryVar(cblock->b()->route_out()));
      } else {
        EXPECT_FALSE(QueryVar(cblock->b()->rev_route_out()));
        EXPECT_TRUE(QueryVar(cblock->b()->route_out()));
      }
      EXPECT_TRUE(QueryVar(nblock->b()->route_in()));
      cblock->inverted_detector()->Set(true);
      Run(20);
      EXPECT_FALSE(QueryVar(string("blk.") + cblock->b_.base_name() +
                            ".body.simulated_occ"));
      EXPECT_TRUE(QueryVar(string("blk.") + nblock->b_.base_name() +
                            ".body.simulated_occ"));
      EXPECT_FALSE(QueryVar(cblock->b()->route_in()));
      EXPECT_FALSE(QueryVar(cblock->b()->route_out()));
      EXPECT_TRUE(QueryVar(nblock->b()->route_in()));

      if (i == 0) {
        EXPECT_TRUE(QueryVar(cblock->b()->rev_route_out()));
        EXPECT_TRUE(QueryVar("blk.XoverTop.any_route_set"));
      }

      EXPECT_TRUE(QueryVar(*my_train.TEST_GetPermalocBit(*nblock->b())));
      EXPECT_FALSE(QueryVar(*my_train.TEST_GetPermalocBit(*cblock->b())));

      nblock->inverted_detector()->Set(false);
      Run(20);
      if (i == 0) {
        EXPECT_FALSE(QueryVar(cblock->b()->rev_route_out()));
        EXPECT_FALSE(QueryVar("blk.XoverTop.any_route_set"));
      }
    }
  }
}

TEST_F(SampleLayoutLogicTrainTest, RunCirclesAlternating) {
  debug_variables = 0;
  class MyTrain : public TrainSchedule {
   public:
    MyTrain(SampleLayoutLogicTrainTest* t, Board* b,
            const AllocatorPtr& alloc)
        : TrainSchedule("mytrain", b,
                        openlcb::TractionDefs::NODE_ID_DCC | 0x1384,
                        alloc->Allocate("mytrain.pbits", 16),
                        alloc->Allocate("mytrain", 32)),
          gate_loop_("gate_loop", alloc_),
          gate_stub_("gate_stub", alloc_),
          t_(t) {}

    void RunTransition(Automata* aut) OVERRIDE {
      AddEagerBlockSequence({t_->BotA.b(), t_->BotB.b(), t_->RLeft.b(), t_->TopA.b(), t_->TopB.b()});
      AddBlockTransitionOnPermit(*t_->TopB.b(), *t_->RRight.b(),
                                 &gate_loop_);
      SwitchTurnout(t_->RStubEntry.b.magnet(), true);
      AddBlockTransitionOnPermit(*t_->TopB.b(), *t_->RStub.b(),
                                 &gate_stub_);
      SwitchTurnout(t_->RStubEntry.b.magnet(), false);
      StopAndReverseAtStub(t_->RStub.b_);

      AddEagerBlockTransition(*t_->RRight.b(), *t_->BotA.b());
      AddDirectBlockTransition(*t_->RStub.b(), *t_->BotA.b(), nullptr, false);
    }

    RequestClientInterface gate_loop_;
    RequestClientInterface gate_stub_;

   private:
    SampleLayoutLogicTrainTest* t_;
  } my_train(this, &brd, alloc());
  SetupRunner(&brd);
  Run(20);
  vector<TestBlock*> blocks = {&BotA, &BotB, &RLeft, &TopA, &TopB};
  BotA.inverted_detector()->Set(false);
  SetVar(*my_train.TEST_GetPermalocBit(*BotA.b()), true);
  unsigned i = 1;
  bool is_out = false;
  BlockInterface* last_block = blocks[0];
  bool is_forward = true;
  for (unsigned j = 0; j < 37; ++i, ++j) {
    BlockInterface* nblock;
    if (i == blocks.size()) {
      is_out = !is_out;
      EXPECT_TRUE(QueryVar(*my_train.gate_loop_.request()));
      EXPECT_TRUE(QueryVar(*my_train.gate_stub_.request()));
      if (is_out) {
        SetVar(*my_train.gate_loop_.granted(), true);
        nblock = &RRight;
      } else {
        SetVar(*my_train.gate_stub_.granted(), true);
        nblock = &RStub;
        is_forward = !is_forward;
      } // we went through the stub.
    } else {
      if (i > blocks.size()) {
        i = 0;
      }
      nblock = blocks[i];
    }
    wait();
    LOG(INFO, "\n===========\nround %u / %u, last_block %s nblock %s", j, i,
        last_block->b()->name().c_str(), nblock->b()->name().c_str());
    Run(30);
    EXPECT_TRUE(QueryVar(last_block->b()->route_out()));
    EXPECT_TRUE(QueryVar(nblock->b()->route_in()));
    last_block->inverted_detector()->Set(true);
    if (nblock == &RStub) {
      RStub.inverted_entry_detector()->Set(false);
    }
    Run(30);
    EXPECT_FALSE(QueryVar(last_block->b()->route_in()));
    EXPECT_FALSE(QueryVar(last_block->b()->route_out()));
    EXPECT_TRUE(QueryVar(nblock->b()->route_in()));
    
    EXPECT_TRUE(QueryVar(*my_train.TEST_GetPermalocBit(*nblock->b())));
    EXPECT_FALSE(QueryVar(*my_train.TEST_GetPermalocBit(*last_block->b())));
    if (nblock == &RStub) {
      RStub.inverted_entry_detector()->Set(true);
    }
    nblock->inverted_detector()->Set(false);
    Run(30);
    EXPECT_EQ(is_forward,
              trainImpl_.get_speed().direction() == openlcb::Velocity::FORWARD);
    if (i == blocks.size()) {
      EXPECT_FALSE(QueryVar(*my_train.gate_loop_.request()));
      EXPECT_FALSE(QueryVar(*my_train.gate_stub_.request()));
    }
    last_block = nblock;
  }
}

TEST_F(SampleLayoutLogicTrainTest, RunCirclesWithFlipFlop) {
  debug_variables = 0;
  static FlipFlopAutomata flaut(&brd, "flipflop", alloc());
  static FlipFlopClient flc_loop("loop", &flaut);
  static FlipFlopClient flc_stub("stub", &flaut);
  
  class MyTrain : public TrainSchedule {
   public:
    MyTrain(SampleLayoutLogicTrainTest* t, Board* b,
            const AllocatorPtr& alloc)
        : TrainSchedule("mytrain", b,
                        openlcb::TractionDefs::NODE_ID_DCC | 0x1384,
                        alloc->Allocate("mytrain.pbits", 16),
                        alloc->Allocate("mytrain", 32)),
          t_(t) {}

    void RunTransition(Automata* aut) OVERRIDE {
      AddEagerBlockSequence({t_->BotA.b(), t_->BotB.b(), t_->RLeft.b(), t_->TopA.b(), t_->TopB.b()});
      AddBlockTransitionOnPermit(*t_->TopB.b(), *t_->RRight.b(),
                                 &flc_loop);
      SwitchTurnout(t_->RStubEntry.b.magnet(), true);
      AddBlockTransitionOnPermit(*t_->TopB.b(), *t_->RStub.b(),
                                 &flc_stub);
      SwitchTurnout(t_->RStubEntry.b.magnet(), false);
      AddEagerBlockTransition(*t_->RRight.b(), *t_->BotA.b());
      AddDirectBlockTransition(*t_->RStub.b(), *t_->BotA.b(), nullptr, false);
    }

   private:
    SampleLayoutLogicTrainTest* t_;
  } my_train(this, &brd, alloc());
  SetupRunner(&brd);
  Run(20);
  vector<BlockInterface*> blocks = {&TopA, &TopB, &RRight, &BotA, &BotB, &RLeft,
                                    &TopA, &TopB, &RStub, &BotA, &BotB, &RLeft};
  TopA.inverted_detector()->Set(false);
  SetVar(*my_train.TEST_GetPermalocBit(*TopA.b()), true);
  
  for (int i = 0; i < 37; ++i) {
    BlockInterface* cblock = blocks[i % blocks.size()];
    BlockInterface* nblock = blocks[(i + 1) % blocks.size()];
    Run(20);
    EXPECT_TRUE(QueryVar(cblock->b()->route_out()));
    EXPECT_TRUE(QueryVar(nblock->b()->route_in()));
    cblock->inverted_detector()->Set(true);
    if (nblock == &RStub) {
      RStub.inverted_entry_detector()->Set(false);
    }
    Run(20);
    EXPECT_FALSE(QueryVar(cblock->b()->route_in()));
    EXPECT_FALSE(QueryVar(cblock->b()->route_out()));
    EXPECT_TRUE(QueryVar(nblock->b()->route_in()));

    EXPECT_TRUE(QueryVar(*my_train.TEST_GetPermalocBit(*nblock->b())));
    EXPECT_FALSE(QueryVar(*my_train.TEST_GetPermalocBit(*cblock->b())));
    if (nblock == &RStub) {
      RStub.inverted_entry_detector()->Set(true);
    }
    nblock->inverted_detector()->Set(false);
    Run(20);
  }
}

TEST_F(SampleLayoutLogicTrainTest, RunCirclesWithFlipFlopTwoTrain) {
  // ScopedOverride so(&debug_variables, 2);
  static FlipFlopAutomata flaut(&brd, "flipflop", alloc());
  static FlipFlopClient flc_loop("loop", &flaut);
  static FlipFlopClient flc_stub("stub", &flaut);

  expect_next_alias_allocation();
  expect_packet_(":X1070144CN060100001388;");
  expect_packet_(":X1910044CN060100001388;");

  openlcb::LoggingTrain trainImpl2(0x1388);
  openlcb::TrainNodeForProxy trainNode2(&trainService_, &trainImpl2);

  wait();

  class MyTrain : public TrainSchedule {
   public:
    MyTrain(const string& name,
            uint64_t id,
            SampleLayoutLogicTrainTest* t, Board* b,
            AllocatorPtr alloc)
        : TrainSchedule(name, b,
                        id,
                        alloc->Allocate("pbits", 16),
                        alloc->Allocate("u", 32)),
          t_(t) {}

    void RunTransition(Automata* aut) OVERRIDE {
      AddEagerBlockSequence({t_->BotA.b(), t_->BotB.b(), t_->RLeft.b(), t_->TopA.b(), t_->TopB.b()}, nullptr, true);
      AddBlockTransitionOnPermit(*t_->TopB.b(), *t_->RRight.b(),
                                 &flc_loop);
      SwitchTurnout(t_->RStubEntry.b.magnet(), true);
      AddBlockTransitionOnPermit(*t_->TopB.b(), *t_->RStub.b(),
                                 &flc_stub);
      SwitchTurnout(t_->RStubEntry.b.magnet(), false);
      AddEagerBlockTransition(*t_->RRight.b(), *t_->BotA.b());
      AddDirectBlockTransition(*t_->RStub.b(), *t_->BotA.b(), nullptr, false);
    }

   private:
    SampleLayoutLogicTrainTest* t_;
  } train1("t1", openlcb::TractionDefs::NODE_ID_DCC | 0x1384, this, &brd, alloc()->Allocate("t1", 64)),
      train2("t2", openlcb::TractionDefs::NODE_ID_DCC | 0x1388, this, &brd, alloc()->Allocate("t2", 64));
  SetupRunner(&brd);
  Run(20);
  vector<BlockInterface*> blocks = {&TopA, &TopB, &RRight, &BotA, &BotB, &RLeft,
                                    &TopA, &TopB, &RStub, &BotA, &BotB, &RLeft};
  TopA.inverted_detector()->Set(false);
  SetVar(*train1.TEST_GetPermalocBit(*TopA.b()), true);
  BotA.inverted_detector()->Set(false);
  SetVar(*train2.TEST_GetPermalocBit(*BotA.b()), true);

  Run(50);

  EXPECT_TRUE(QueryVar(BotA.b()->route_out()));
  EXPECT_TRUE(QueryVar(BotB.b()->route_out()));
  EXPECT_FALSE(QueryVar(RLeft.b()->route_out()));
  EXPECT_TRUE(QueryVar(TopA.b()->route_out()));
  EXPECT_FALSE(QueryVar(TopB.b()->route_out()));

  EXPECT_TRUE(QueryVar("blk.t2.u.rtloc.RLeft"));
  EXPECT_TRUE(QueryVar("blk.t1.u.rtloc.TopB"));

  EXPECT_TRUE(QueryVar("blk.t2.pbits.loc.BotB"));
  EXPECT_TRUE(QueryVar("blk.t1.pbits.loc.TopB"));

  // The trains are moving.
  EXPECT_EQ(40, (int)(trainImpl_.get_speed().mph() + 0.5));
  EXPECT_EQ(40, (int)(trainImpl2.get_speed().mph() + 0.5));
  EXPECT_TRUE(QueryVar("blk.t2.u.is_moving"));
  EXPECT_TRUE(QueryVar("blk.t1.u.is_moving"));
  LOG(INFO, "\n\nTop train gets on the move.\n");
  TopA.inverted_detector()->Set(true);
  Run(50);

  EXPECT_TRUE(QueryVar(RLeft.b()->route_out()));
  EXPECT_FALSE(QueryVar(TopA.b()->route_out()));
  EXPECT_TRUE(QueryVar("blk.t2.u.rtloc.TopA"));
  EXPECT_TRUE(QueryVar("blk.t1.u.rtloc.TopB"));

  EXPECT_TRUE(QueryVar("blk.t2.pbits.loc.BotB"));
  EXPECT_TRUE(QueryVar("blk.t1.pbits.loc.TopB"));

  LOG(INFO, "\n\nTop train arrives.\n");
  TopB.inverted_detector()->Set(false);
  Run(50);

  EXPECT_TRUE(QueryVar("blk.magnets.RStubEntry.mgn.current_state"));

  EXPECT_TRUE(QueryVar("blk.t1.u.rtloc.RRight"));
  EXPECT_TRUE(QueryVar("blk.t1.pbits.loc.RRight"));

  EXPECT_TRUE(QueryVar("blk.t2.pbits.loc.BotB"));
  EXPECT_TRUE(QueryVar("blk.t2.u.rtloc.TopA"));

  // We make t2 catch up with t1.

  std::vector<std::vector<TestBlock*>> ll = {{&BotA, &BotB}, {&BotB, &RLeft}, {&RLeft, &TopA}};
  for (auto& pp : ll) {
    LOG(INFO, "\nRotate: %s -> %s.\n",pp[0]->b()->name().c_str(), pp[1]->b()->name().c_str());
    EXPECT_TRUE(QueryVar(pp[0]->b()->route_out()));
    pp[0]->inverted_detector()->Set(true);
    Run(40);
    EXPECT_FALSE(QueryVar(pp[0]->b()->route_out()));
    pp[1]->inverted_detector()->Set(false);
    Run(40);
    EXPECT_TRUE(QueryVar("blk.t1.pbits.loc.RRight"));
  }

  EXPECT_TRUE(QueryVar("blk.t2.u.rtloc.TopA"));
  EXPECT_TRUE(QueryVar("blk.t2.pbits.loc.TopA"));
  LOG(INFO, "\n\nTop train moves on.\n");
  TopB.inverted_detector()->Set(true);
  Run(40);
  EXPECT_TRUE(QueryVar("blk.t2.u.rtloc.TopB"));
  EXPECT_TRUE(QueryVar("blk.t2.pbits.loc.TopB"));
  // The front train has green all around.
  EXPECT_TRUE(QueryVar("blk.t1.u.rtloc.RLeft"));
  EXPECT_FALSE(QueryVar("blk.t1.u.rtloc.TopA"));
  EXPECT_FALSE(QueryVar("blk.t1.u.rtloc.BotB"));
  EXPECT_TRUE(QueryVar("blk.t1.pbits.loc.RRight"));

  EXPECT_TRUE(QueryVar("blk.magnets.RStubEntry.mgn.current_state"));

  LOG(INFO, "\n\nSecond train reaches the flipflop.\n");
  TopA.inverted_detector()->Set(true);
  TopB.inverted_detector()->Set(false);
  Run(40);
  EXPECT_TRUE(QueryVar("blk.t2.u.rtloc.TopB"));
  EXPECT_TRUE(QueryVar("blk.t2.pbits.loc.TopB"));
  EXPECT_FALSE(QueryVar(TopB.b()->route_out()));
  // Since the turnout still has its route set, we are not supposed to have
  // changed the state yet.
  EXPECT_TRUE(QueryVar("blk.magnets.RStubEntry.mgn.locked"));
  EXPECT_TRUE(QueryVar("blk.magnets.RStubEntry.mgn.current_state"));

  // Now the turnout route gets released as the front train reaches the next
  // station.
  RRight.inverted_detector()->Set(false);
  Run(40);
  EXPECT_TRUE(QueryVar("blk.t2.u.rtloc.RStub"));
  EXPECT_TRUE(QueryVar("blk.t2.pbits.loc.RStub"));
  EXPECT_TRUE(QueryVar(TopB.b()->route_out()));
  EXPECT_TRUE(QueryVar("blk.magnets.RStubEntry.mgn.locked"));
  EXPECT_FALSE(QueryVar("blk.magnets.RStubEntry.mgn.current_state"));

  TopB.inverted_detector()->Set(true);
  Run(40);
  EXPECT_FALSE(QueryVar(TopB.b()->route_out()));
  EXPECT_TRUE(QueryVar("blk.magnets.RStubEntry.mgn.locked"));
  EXPECT_FALSE(QueryVar("blk.magnets.RStubEntry.mgn.current_state"));

  RStub.inverted_detector()->Set(false);
  Run(40);
  EXPECT_FALSE(QueryVar("blk.magnets.RStubEntry.mgn.current_state"));
  EXPECT_FALSE(QueryVar("blk.magnets.RStubEntry.mgn.locked"));
}

TEST_F(SampleLayoutLogicTrainTest, EagerFlipFlopTwoTrain) {
  debug_variables = 0;
  static FlipFlopAutomata flaut(&brd, "flipflop", alloc());
  static FlipFlopClient flc_loop("loop", &flaut);
  static FlipFlopClient flc_stub("stub", &flaut);

  expect_next_alias_allocation();
  expect_packet_(":X1070144CN060100001388;");
  expect_packet_(":X1910044CN060100001388;");

  openlcb::LoggingTrain trainImpl2(0x1388);
  openlcb::TrainNodeForProxy trainNode2(&trainService_, &trainImpl2);

  wait();

  class MyTrain : public TrainSchedule {
   public:
    MyTrain(const string& name,
            uint64_t id,
            SampleLayoutLogicTrainTest* t, Board* b,
            AllocatorPtr alloc)
        : TrainSchedule(name, b,
                        id,
                        alloc->Allocate("pbits", 16),
                        alloc->Allocate("u", 32)),
          t_(t) {}

    void RunTransition(Automata* aut) OVERRIDE {
      AddEagerBlockSequence({t_->BotA.b(), t_->BotB.b(), t_->RLeft.b(), t_->TopA.b(), t_->TopB.b()}, nullptr, true);
      AddBlockTransitionOnPermit(*t_->TopB.b(), *t_->RRight.b(),
                                 &flc_loop, nullptr, true);
      SwitchTurnout(t_->RStubEntry.b.magnet(), true);
      AddBlockTransitionOnPermit(*t_->TopB.b(), *t_->RStub.b(),
                                 &flc_stub, nullptr, true);
      SwitchTurnout(t_->RStubEntry.b.magnet(), false);
      AddEagerBlockTransition(*t_->RRight.b(), *t_->BotA.b());
      AddDirectBlockTransition(*t_->RStub.b(), *t_->BotA.b(), nullptr, false);
    }

   private:
    SampleLayoutLogicTrainTest* t_;
  } train1("t1", openlcb::TractionDefs::NODE_ID_DCC | 0x1384, this, &brd, alloc()->Allocate("t1", 64)),
      train2("t2", openlcb::TractionDefs::NODE_ID_DCC | 0x1388, this, &brd, alloc()->Allocate("t2", 64));
  SetupRunner(&brd);
  Run(20);
  vector<BlockInterface*> blocks = {&TopA, &TopB, &RRight, &BotA, &BotB, &RLeft,
                                    &TopA, &TopB, &RStub, &BotA, &BotB, &RLeft};
  RLeft.inverted_detector()->Set(false);
  SetVar(*train1.TEST_GetPermalocBit(*RLeft.b()), true);
  BotA.inverted_detector()->Set(false);
  SetVar(*train2.TEST_GetPermalocBit(*BotA.b()), true);

  Run(50);

  EXPECT_TRUE(QueryVar(BotA.b()->route_out()));
  EXPECT_FALSE(QueryVar(BotB.b()->route_out()));
  EXPECT_TRUE(QueryVar(RLeft.b()->route_out()));
  EXPECT_TRUE(QueryVar(TopA.b()->route_out()));
  EXPECT_TRUE(QueryVar(TopB.b()->route_out()));

  EXPECT_TRUE(QueryVar("blk.t2.u.rtloc.BotB"));
  EXPECT_TRUE(QueryVar("blk.t1.u.rtloc.RRight"));

  EXPECT_TRUE(QueryVar("blk.t2.pbits.loc.BotB"));
  EXPECT_TRUE(QueryVar("blk.t1.pbits.loc.TopA"));

  EXPECT_TRUE(QueryVar("blk.magnets.RStubEntry.mgn.current_state"));

  // The trains are moving.
  LOG(INFO, "\n\nTop train gets on the move.\n");
  TopA.inverted_detector()->Set(false);
  Run(20);
  RLeft.inverted_detector()->Set(true);
  TopB.inverted_detector()->Set(false);
  Run(20);
  TopA.inverted_detector()->Set(true);
  Run(40);

  EXPECT_TRUE(QueryVar(RLeft.b()->route_out()));
  EXPECT_FALSE(QueryVar(TopA.b()->route_out()));
  EXPECT_TRUE(QueryVar("blk.t2.u.rtloc.TopA"));
  EXPECT_TRUE(QueryVar("blk.t1.u.rtloc.RRight"));

  EXPECT_TRUE(QueryVar("blk.t2.pbits.loc.BotB"));
  EXPECT_TRUE(QueryVar("blk.t1.pbits.loc.RRight"));

  EXPECT_TRUE(QueryVar("blk.magnets.RStubEntry.mgn.current_state"));

  TopB.inverted_detector()->Set(true);
  Run(40);
  EXPECT_TRUE(QueryVar("blk.t1.u.rtloc.RRight"));
  EXPECT_TRUE(QueryVar("blk.t1.pbits.loc.RRight"));

  EXPECT_TRUE(QueryVar("blk.magnets.RStubEntry.mgn.current_state"));

  EXPECT_TRUE(QueryVar("blk.t2.u.rtloc.TopB"));
  EXPECT_TRUE(QueryVar("blk.t2.pbits.loc.BotB"));

  LOG(INFO, "\n\nSecond train moves past flipflop.\n");

  RRight.inverted_detector()->Set(false);
  Run(70);
  EXPECT_FALSE(QueryVar("blk.magnets.RStubEntry.mgn.current_state"));

  EXPECT_TRUE(QueryVar(RStub.b()->route_in()));

  // There is no routingloc bit for the moment, because we traversed into a
  // non-eager node which removed the routingloc bit until the train shows up.
  EXPECT_FALSE(QueryVar("blk.t2.u.rtloc.RStub"));
  EXPECT_FALSE(QueryVar("blk.t2.u.rtloc.TopB"));
  EXPECT_FALSE(QueryVar("blk.t2.u.rtloc.TopA"));
  EXPECT_FALSE(QueryVar("blk.t2.u.rtloc.BotA"));
  EXPECT_FALSE(QueryVar("blk.t2.u.rtloc.BotB"));
  EXPECT_FALSE(QueryVar("blk.t2.u.rtloc.RLeft"));
  EXPECT_FALSE(QueryVar("blk.t2.u.rtloc.RRight"));

  std::vector<std::vector<TestBlock*>> ll = {{&BotA, &BotB}, {&BotB, &RLeft}, {&RLeft, &TopA}};
  for (auto& pp : ll) {
    EXPECT_TRUE(QueryVar(pp[0]->b()->route_out()));
    pp[0]->inverted_detector()->Set(true);
    Run(40);
    EXPECT_FALSE(QueryVar(pp[0]->b()->route_out()));
    pp[1]->inverted_detector()->Set(false);
    Run(40);
  }

  EXPECT_TRUE(QueryVar("blk.t2.pbits.loc.TopB"));

  TopA.inverted_detector()->Set(true);
  TopB.inverted_detector()->Set(false);
  Run(50);

  // Now there is a routingloc.
  EXPECT_TRUE(QueryVar("blk.t2.pbits.loc.RStub"));
  EXPECT_TRUE(QueryVar("blk.t2.u.rtloc.RStub"));
}



}  // namespace automata
