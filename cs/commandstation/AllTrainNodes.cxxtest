/** \copyright
 * Copyright (c) 2016, Balazs Racz
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are  permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \file AllTrainNodes.cxxtest
 *
 * Unit tests for the train FDI generator and AllTrainNodes.
 *
 * @author Balazs Racz
 * @date 16 Jan 2016
 */

#include "commandstation/cm_test_helper.hxx"
#include "utils/format_utils.hxx"
#include "commandstation/UpdateProcessor.hxx"
#include "commandstation/FindProtocolDefs.hxx"

namespace commandstation {

TEST_F(AllTrainNodesTest, CreateDestroy) {}

TEST_F(AllTrainNodesTest, PIPRequest) {
  send_packet_and_expect_response(":X19828123N0441;",
                                  ":X19668441N0123D41E00000000;");
  wait();
}

TEST_F(AllTrainNodesTest, CreateNode) {
  expect_train_start(0x443, 183);
  trainNodes_->allocate_node(DCC_28_LONG_ADDRESS, 183);
  wait();
  send_packet_and_expect_response(":X19828123N0443;",
                                  ":X19668443N0123D41E00000000;");
  wait();
  auto db_entry = get_traindb_entry(3);
  ASSERT_TRUE((bool)db_entry);
  EXPECT_EQ(183, db_entry->get_legacy_address());
  EXPECT_EQ(string("183"), db_entry->get_train_name());
}

TEST_F(AllTrainNodesTest, CreateNodeShort) {
  expect_train_start(0x443, 18, dcc::TrainAddressType::DCC_SHORT_ADDRESS);
  trainNodes_->allocate_node(DCC_28, 18);
  wait();
  send_packet_and_expect_response(":X19828123N0443;",
                                  ":X19668443N0123D41E00000000;");
  wait();
  auto db_entry = get_traindb_entry(3);
  ASSERT_TRUE((bool)db_entry);
  EXPECT_EQ(18, db_entry->get_legacy_address());
  EXPECT_EQ(string("18S"), db_entry->get_train_name());
}

TEST_F(AllTrainNodesTest, CreateNodeLong) {
  expect_train_start(0x443, 18);
  trainNodes_->allocate_node(DCC_28_LONG_ADDRESS, 18);
  wait();
  send_packet_and_expect_response(":X19828123N0443;",
                                  ":X19668443N0123D41E00000000;");
  wait();
  auto db_entry = get_traindb_entry(3);
  ASSERT_TRUE((bool)db_entry);
  EXPECT_EQ(18, db_entry->get_legacy_address());
  EXPECT_EQ(string("018L"), db_entry->get_train_name());
}

TEST_F(AllTrainNodesTest, CreateNodeMarklin) {
  expect_train_start(0x443, 13, dcc::TrainAddressType::MM);
  trainNodes_->allocate_node(MARKLIN_NEW, 13);
  wait();
  send_packet_and_expect_response(":X19828123N0443;",
                                  ":X19668443N0123D41E00000000;");
  wait();
  auto db_entry = get_traindb_entry(3);
  ASSERT_TRUE((bool)db_entry);
  EXPECT_EQ(13, db_entry->get_legacy_address());
  EXPECT_EQ(string("13M"), db_entry->get_train_name());
}

TEST(bufferrender, T183) {
    char buf[16];
    memset(buf, 0, sizeof(buf));
    integer_to_buffer(183, buf);
    EXPECT_EQ(string("183"), buf);
}

// TODO: add test for retrieving via memory config protocol.
TEST_F(StoredTrainNodesTest, create) {}

TEST_F(StoredTrainNodesTest, start) {
  start();
}

// Regression test for #132
TEST_F(StoredTrainNodesTest, create_with_train_search_6) {
  cfg_.entry<0>().address().write(configFile_.fd(), 53);
  cfg_.entry<0>().mode().write(configFile_.fd(), DCC_128);
  cfg_.entry<0>().name().write(configFile_.fd(), "Am 111 222-7");

  expect_train_start(0x443, 53, dcc::TrainAddressType::DCC_SHORT_ADDRESS);
  start();

  clear_expect(true); // strict
  expect_packet(":X19544443N090099FFFFFFF700;");
  send_packet(  ":X19914123N090099FFFFFFF700;");
  wait();
  clear_expect(true); // strict

  expect_train_start(0x444, 6, dcc::TrainAddressType::DCC_SHORT_ADDRESS);
  expect_packet(":X19544444N090099FFFFFFF6E0;");
  send_packet(  ":X19914471N090099FFFFFFF6E0;");
  twait();
  clear_expect(true); // strict
}

// Regression test for #132
TEST_F(StoredTrainNodesTest, create_with_train_search_7) {
  cfg_.entry<0>().address().write(configFile_.fd(), 53);
  cfg_.entry<0>().mode().write(configFile_.fd(), DCC_128);
  cfg_.entry<0>().name().write(configFile_.fd(), "Am 111 222-7");

  expect_train_start(0x443, 53, dcc::TrainAddressType::DCC_SHORT_ADDRESS);
  start();

  auto db_entry = get_traindb_entry(trainNodes_->size() - 1);
  
  clear_expect(true); // strict
  expect_packet(":X19544443N090099FFFFFFF700;");
  send_packet(  ":X19914123N090099FFFFFFF700;");
  wait();
  clear_expect(true); // strict

  expect_train_start(0x444, 7, dcc::TrainAddressType::DCC_SHORT_ADDRESS);
  expect_packet(":X19544444N090099FFFFFFF7E0;");
  send_packet(  ":X19914471N090099FFFFFFF7E0;");
  twait();
  clear_expect(true); // strict

  EXPECT_EQ("Am 111 222-7", db_entry->get_train_name());
  EXPECT_EQ(53, db_entry->get_legacy_address());
  EXPECT_EQ(DCC_128, db_entry->get_legacy_drive_mode());

  EXPECT_TRUE(
      FindProtocolDefs::match_query_to_node(0x090099FFFFFFF700, db_entry.get()));
  EXPECT_FALSE(
      FindProtocolDefs::match_query_to_node(0x090099FFFFFFF7E0, db_entry.get()));
  EXPECT_TRUE(
      FindProtocolDefs::match_query_to_node(0x090099FFFFFFF7C0, db_entry.get()));

  
  db_entry = get_traindb_entry(0);

  EXPECT_EQ("Am 843 093-6", db_entry->get_train_name());
  EXPECT_EQ(43, db_entry->get_legacy_address());
  EXPECT_EQ(DCC_128_LONG_ADDRESS, db_entry->get_legacy_drive_mode());

  EXPECT_TRUE(
      FindProtocolDefs::match_query_to_node(0x090099FFFFFFF600, db_entry.get()));
  EXPECT_TRUE(
      FindProtocolDefs::match_query_to_node(0x090099FFFFFFF6C0, db_entry.get()));
  EXPECT_FALSE(
      FindProtocolDefs::match_query_to_node(0x090099FFFFFFF6E0, db_entry.get()));
}

// Regression test for #132
TEST_F(StoredTrainNodesTest, create_with_train_search_7_alt) {
  cfg_.entry<0>().address().write(configFile_.fd(), 53);
  cfg_.entry<0>().mode().write(configFile_.fd(), DCC_128);
  cfg_.entry<0>().name().write(configFile_.fd(), "Am 111 222-7");

  expect_train_start(0x443, 53, dcc::TrainAddressType::DCC_SHORT_ADDRESS);
  start();

  auto db_entry = get_traindb_entry(trainNodes_->size() - 1);
  
  clear_expect(true); // strict
  expect_packet(":X19544443N090099FFFFFFF700;");
  send_packet(  ":X19914123N090099FFFFFFF700;");
  wait();
  clear_expect(true); // strict

  expect_train_start(0x444, 7, dcc::TrainAddressType::DCC_SHORT_ADDRESS);
  expect_packet(":X19544444N090099FFFFFFF7E0;");
  send_packet(  ":X19914471N090099FFFFFFF7E0;");
  twait();
  clear_expect(true); // strict

  EXPECT_EQ("Am 111 222-7", db_entry->get_train_name());
  EXPECT_EQ(53, db_entry->get_legacy_address());
  EXPECT_EQ(DCC_128, db_entry->get_legacy_drive_mode());

  EXPECT_TRUE(
      FindProtocolDefs::match_query_to_node(0x090099FFFFFFF700, db_entry.get()));
  EXPECT_EQ(0, 
      FindProtocolDefs::match_query_to_node(0x090099FFFFFFF7E0, db_entry.get()));
  EXPECT_TRUE( 
      FindProtocolDefs::match_query_to_node(0x090099FFFFFFF7C0, db_entry.get()));

  
  db_entry = get_traindb_entry(0);

  EXPECT_EQ("Am 843 093-6", db_entry->get_train_name());
  EXPECT_EQ(43, db_entry->get_legacy_address());
  EXPECT_EQ(DCC_128_LONG_ADDRESS, db_entry->get_legacy_drive_mode());

  EXPECT_TRUE(
      FindProtocolDefs::match_query_to_node(0x090099FFFFFFF600, db_entry.get()));
  EXPECT_TRUE(
      FindProtocolDefs::match_query_to_node(0x090099FFFFFFF6C0, db_entry.get()));
  EXPECT_EQ(0,
      FindProtocolDefs::match_query_to_node(0x090099FFFFFFF6E0, db_entry.get()));
}

}  // namespace commandstation
