#include "commandstation/FindProtocolServer.hxx"
#include "commandstation/cm_test_helper.hxx"
#include "commandstation/UpdateProcessor.hxx"
#include "commandstation/ExternalTrainDbEntry.hxx"

namespace commandstation {

template <typename T>
static T* CHECK_NOTNULL(T* d) {
  HASSERT(d);
  return d;
}

static openlcb::EventId create_query(uint64_t nibbles, uint8_t settings) {
  static_assert(FindProtocolDefs::TRAIN_FIND_MASK_LOW == 8,
                "The code above expects settings to be 8-bit.");
  return FindProtocolDefs::TRAIN_FIND_BASE |
         ((nibbles << FindProtocolDefs::TRAIN_FIND_MASK_LOW) &
          ((1ULL << FindProtocolDefs::TRAIN_FIND_MASK) - 1)) |
         (settings & 0xff);
}


class FindProtocolTest : public AllTrainNodesTest {
 protected:
  ~FindProtocolTest() { wait(); }

  void find_nodes(uint64_t nibbles, uint8_t settings,
                  std::initializer_list<uint16_t> results) {
    clear_expect(true);
    uint64_t event = create_query(nibbles, settings);
    LOG(INFO, "query event: %016" PRIX64, event);
    for (uint16_t alias : results) {
      SCOPED_TRACE(alias);
      LOG(INFO, "expected result: %x", (unsigned)alias);
      expect_packet(StringPrintf(":X19544%03XN%016" PRIX64 ";", alias, event));
    }
    send_packet_and_flush_expect(
        StringPrintf(":X19914123N%016" PRIX64 ";", event));
  }

  void twait() {
    wait();
    while (!trainNodes_->find_flow_is_idle()) {
      usleep(100);
    }
    wait();
  }
  
  // This handler has been moved into AllTrainNodes.
  // FindProtocolServer handler_{CHECK_NOTNULL(trainNodes_.get())};
};

TEST_F(FindProtocolTest, CreateDestroy) {}

TEST_F(FindProtocolTest, GlobalIdentify) {
  for (uint16_t alias : {0x440, 0x441, 0x442}) {
    // is train
    expect_packet(StringPrintf(":X19547%03XN0101000000000303;", alias));
    // producer identified range for the train finder protocol
    expect_packet(StringPrintf(":X19524%03XN090099FF00000000;", alias));
  }
  send_packet(":X19970123N;");
  wait();
}

TEST_F(FindProtocolTest, AddressedIdentify) {
  for (uint16_t alias : {0x441}) {
    // is train
    expect_packet(StringPrintf(":X19547%03XN0101000000000303;", alias));
    // producer identified range for the train finder protocol
    expect_packet(StringPrintf(":X19524%03XN090099FF00000000;", alias));
  }
  send_packet(":X19968123N0441;");
  wait();
}

TEST_F(FindProtocolTest, FindOneNode) {
  for (uint16_t alias : {0x441}) {
    // producer identified valid for the train finder protocol
    expect_packet(StringPrintf(":X19544%03XN090099FFFFFF2200;", alias));
  }
  send_packet(":X19914123N090099FFFFFF2200;");
  wait();
}

TEST_F(FindProtocolTest, MultiQuery) {
  send_packet_and_expect_response(":X19914123N090099FFFFFF2200;",
                                  ":X19544441N090099FFFFFF2200;");
  send_packet_and_expect_response(":X19914123N090099FFFFFF2200;",
                                  ":X19544441N090099FFFFFF2200;");
  send_packet_and_expect_response(":X19914123N090099FFFFFF2200;",
                                  ":X19544441N090099FFFFFF2200;");
  send_packet_and_expect_response(":X19914123N090099FFFFFF2200;",
                                  ":X19544441N090099FFFFFF2200;");
}

TEST_F(FindProtocolTest, FindThreeNodes) {
  for (uint16_t alias : {0x440, 0x441, 0x442}) {
    // producer identified valid for the train finder protocol
    expect_packet(StringPrintf(":X19544%03XN090099FFFFFFF400;", alias));
  }
  send_packet(":X19914123N090099FFFFFFF400;");
  wait();
}

TEST_F(FindProtocolTest, RaceToQuery) {
  // This test checks what happens when multiple throttles are sending train
  // protocol query commands simultaneously. This, while unlikely, should
  // function correctly and all requests should be queued and answered.
  
  // Check down the train initialization part.
  wait();
  clear_expect(true); // strict
  // Put in expectations
  for (uint16_t alias : {0x440, 0x441, 0x442}) {
    // producer identified valid for the train finder protocol
    expect_packet(StringPrintf(":X19544%03XN090099FFFFFFF400;", alias)).Times(4);
  }
  // We block the main executor to ensure that the multiple requests really do
  // arrive concurrently.
  BlockExecutor b(nullptr);
  send_packet(":X19914123N090099FFFFFFF400;");
  send_packet(":X19914123N090099FFFFFFF400;");
  send_packet(":X19914123N090099FFFFFFF400;");
  send_packet(":X19914123N090099FFFFFFF400;");
  // ... and go!
  b.release_block();
  wait();
  clear_expect();
}

TEST_F(FindProtocolTest, WithAllocate) {
  // Check down the train initialization part.
  wait();
  clear_expect(true); // strict
  send_packet(":X19914123N090099FFFFFF2300;");
  wait();
  clear_expect(true); // strict
  expect_train_start(0x443, 23, dcc::TrainAddressType::DCC_SHORT_ADDRESS);
  expect_packet(":X19544443N090099FFFFFF2380;");
  send_packet(":X19914123N090099FFFFFF2380;");
  wait();
  while (!trainNodes_->find_flow_is_idle()) {
    usleep(100);
  }
  wait();
  clear_expect();
  // Checks that the new train is indeed DCC with address 23.
  auto entry = get_traindb_entry(trainNodes_->size() - 1);
  EXPECT_EQ(DCC_128, entry->get_legacy_drive_mode());
  EXPECT_EQ(23, entry->get_legacy_address());
  EXPECT_EQ("23S", entry->get_train_name());
}

TEST_F(FindProtocolTest, WithAllocateDefault28) {
  ScopedOverride so(&FindProtocolDefs::DEFAULT_DRIVE_MODE, DCC_28);
  // Check down the train initialization part.
  wait();
  clear_expect(true); // strict
  send_packet(":X19914123N090099FFFFFF2300;");
  wait();
  clear_expect(true); // strict
  expect_train_start(0x443, 23, dcc::TrainAddressType::DCC_SHORT_ADDRESS);
  expect_packet(":X19544443N090099FFFFFF2380;");
  send_packet(":X19914123N090099FFFFFF2380;");
  wait();
  while (!trainNodes_->find_flow_is_idle()) {
    usleep(100);
  }
  wait();
  clear_expect();
  // Checks that the new train is indeed DCC with address 23.
  auto entry = get_traindb_entry(trainNodes_->size() - 1);
  EXPECT_EQ(DCC_28, entry->get_legacy_drive_mode());
  EXPECT_EQ(23, entry->get_legacy_address());
  EXPECT_EQ("23S", entry->get_train_name());
}

// Regression test for #132
TEST_F(FindProtocolTest, WithAllocateShort6) {
  // Check down the train initialization part.
  wait();
  clear_expect(true); // strict
  expect_packet(":X19544440N090099FFFFFFF600;");
  send_packet(":X19914123N090099FFFFFFF600;");
  wait();
  clear_expect(true); // strict
  expect_train_start(0x443, 6, dcc::TrainAddressType::DCC_SHORT_ADDRESS);
  expect_packet(":X19544443N090099FFFFFFF6E0;");
  send_packet(":X19914471N090099FFFFFFF6E0;");
  wait();
  while (!trainNodes_->find_flow_is_idle()) {
    usleep(100);
  }
  wait();
  clear_expect();
  // Checks that the new train is indeed DCC with address 6.
  auto entry = get_traindb_entry(trainNodes_->size() - 1);
  EXPECT_EQ(DCC_128, entry->get_legacy_drive_mode());
  EXPECT_EQ(6, entry->get_legacy_address());
  EXPECT_EQ("6S", entry->get_train_name());
}

TEST_F(FindProtocolTest, WithAllocateDefaultMarklin) {
  ScopedOverride so(&FindProtocolDefs::DEFAULT_DRIVE_MODE, MARKLIN_NEW);
  // Check down the train initialization part.
  wait();
  clear_expect(true); // strict
  send_packet(":X19914123N090099FFFFFF2300;");
  wait();
  clear_expect(true); // strict
  expect_train_start(0x443, 23, dcc::TrainAddressType::MM);
  expect_packet(":X19544443N090099FFFFFF2380;");
  send_packet(":X19914123N090099FFFFFF2380;");
  wait();
  while (!trainNodes_->find_flow_is_idle()) {
    usleep(100);
  }
  wait();
  clear_expect();
  // Checks that the new train is indeed DCC with address 23.
  auto entry = get_traindb_entry(trainNodes_->size() - 1);
  EXPECT_EQ(MARKLIN_NEW, entry->get_legacy_drive_mode());
  EXPECT_EQ(23, entry->get_legacy_address());
  EXPECT_EQ("23M", entry->get_train_name());
}

TEST_F(FindProtocolTest, AllocateMarklin) {
  // Check down the train initialization part.
  wait();
  clear_expect(true); // strict
  expect_train_start(0x443, 23, dcc::TrainAddressType::MM);
  expect_packet(":X19544443N090099FFFFFF2384;");
  send_packet(":X19914123N090099FFFFFF2384;");
  wait();
  while (!trainNodes_->find_flow_is_idle()) {
    usleep(100);
  }
  wait();
  clear_expect();
  // Checks that the new train is indeed marklin with address 23.
  auto entry = get_traindb_entry(trainNodes_->size() - 1);
  EXPECT_EQ(MARKLIN_NEW, entry->get_legacy_drive_mode());
  EXPECT_EQ(23, entry->get_legacy_address());
  EXPECT_EQ("23M", entry->get_train_name());
}

TEST_F(FindProtocolTest, AllocateLongAddressViaBit) {
  // Check down the train initialization part.
  wait();
  clear_expect(true); // strict
  expect_train_start(0x443, 23, dcc::TrainAddressType::DCC_LONG_ADDRESS);
  expect_packet(":X19544443N090099FFFFFF238C;");
  auto seq = g_executor.sequence();
  send_packet(":X19914123N090099FFFFFF238C;");
  EXPECT_TRUE((g_executor.sequence() > seq) || !g_executor.empty());
  wait();
  ASSERT_TRUE(g_executor.empty());
  while (!trainNodes_->find_flow_is_idle()) {
    usleep(100);
  }
  wait();
  clear_expect();
  // Checks that the new train is indeed DCC with address 23 long.
  auto entry = get_traindb_entry(trainNodes_->size() - 1);
  EXPECT_EQ(DCC_128_LONG_ADDRESS, entry->get_legacy_drive_mode());
  EXPECT_EQ(23, entry->get_legacy_address());
  EXPECT_EQ("023L", entry->get_train_name());
}

TEST_F(FindProtocolTest, AllocateLongAddressViaPrefixZero) {
  // Check down the train initialization part.
  wait();
  clear_expect(true); // strict
  expect_train_start(0x443, 23, dcc::TrainAddressType::DCC_LONG_ADDRESS);
  expect_packet(":X19544443N090099FFFFF02380;");
  send_packet(":X19914123N090099FFFFF02380;");
  wait();
  while (!trainNodes_->find_flow_is_idle()) {
    usleep(100);
  }
  wait();
  clear_expect();
  // Checks that the new train is indeed DCC with address 23 long.
  auto entry = get_traindb_entry(trainNodes_->size() - 1);
  EXPECT_EQ(DCC_128_LONG_ADDRESS, entry->get_legacy_drive_mode());
  EXPECT_EQ(23, entry->get_legacy_address());
  EXPECT_EQ("023L", entry->get_train_name());
}

TEST_F(FindProtocolTest, AllocateLongAddressDefault) {
  // Check down the train initialization part.
  wait();
  clear_expect(true); // strict
  expect_train_start(0x443, 323, dcc::TrainAddressType::DCC_LONG_ADDRESS);
  expect_packet(":X19544443N090099FFFFF32380;");
  send_packet(":X19914123N090099FFFFF32380;");
  wait();
  while (!trainNodes_->find_flow_is_idle()) {
    usleep(100);
  }
  wait();
  clear_expect();
  // Checks that the new train is indeed DCC with address 23 long.
  auto entry = get_traindb_entry(trainNodes_->size() - 1);
  EXPECT_EQ(323, entry->get_legacy_address());
  EXPECT_EQ("323", entry->get_train_name());
}

TEST_F(FindProtocolTest, AllocateAndFind) {
  // Check down the train initialization part.
  wait();
  clear_expect(true); // strict
  send_packet(":X19914123N090099FFFFFF2300;");
  wait();
  clear_expect(true); // strict
  expect_train_start(0x443, 23, dcc::TrainAddressType::DCC_SHORT_ADDRESS);
  expect_packet(":X19544443N090099FFFFFF2380;");
  send_packet(":X19914123N090099FFFFFF2380;");
  twait();
  clear_expect(true); // strict
  // slightly different alignment but gives back the same node
  expect_packet(":X19544443N090099FFFF23FF80;");
  send_packet(":X19914123N090099FFFF23FF80;");
  twait();

  clear_expect(true); // strict
  expect_train_start(0x444, 23, dcc::TrainAddressType::DCC_LONG_ADDRESS);
  // now address 23 long
  expect_packet(":X19544444N090099FFFFF023C0;");
  send_packet(":X19914123N090099FFFFF023C0;");
  twait();
}

TEST_F(FindProtocolTest, FindOneNodeInfra) { find_nodes(0xFFFF22, 0, {0x441}); }

TEST_F(FindProtocolTest, BunchOfQueries) {
  find_nodes(0xFFFF23, 0, {});
  find_nodes(0xFFFF22, 0, {0x441});
  find_nodes(0xF43FFF, 0, {0x440});
  find_nodes(0xF843FF, 0, {0x440});
  find_nodes(0xF460FF, 0, {0x441});
  find_nodes(0xFFF460, 0, {0x441});
  find_nodes(0xFFF465, 0, {0x442});
  find_nodes(0x000465, 0, {0x442});
  find_nodes(0xFFFF46, 0, {0x442, 0x441});
  find_nodes(0xFFFFF4, 0, {0x442, 0x441, 0x440});
  print_all_packets();
  find_nodes(0xFFFFFF, 0, {0x442, 0x441, 0x440});
  find_nodes(0xFFFFFF, FindProtocolDefs::ADDRESS_ONLY, {});
}

class SingleFindProtocolTest : public openlcb::AsyncNodeTest {
 protected:
  ~SingleFindProtocolTest() { wait(); }

  void find_nodes(uint64_t nibbles, uint8_t settings,
                  std::initializer_list<uint16_t> results) {
    clear_expect(true);
    uint64_t event = create_query(nibbles, settings);
    LOG(INFO, "query event: %016" PRIX64, event);
    for (uint16_t alias : results) {
      LOG(INFO, "expected result: %x", (unsigned)alias);
      expect_packet(StringPrintf(":X19544%03XN%016" PRIX64 ";", alias, event));
    }
    send_packet_and_flush_expect(
        StringPrintf(":X19914123N%016" PRIX64 ";", event));
  }

  ExternalTrainDbEntry dbEntry_{"Am 853 093-6", 53, DCCMODE_FAKE_DRIVE};
  SingleNodeFindProtocolServer server_{node_, &dbEntry_};
};

TEST_F(SingleFindProtocolTest, createdestroy) {}

TEST_F(SingleFindProtocolTest, match) {
  find_nodes(0xFFFF53, 0, {0x22A});
  find_nodes(0xFFFF63, 0, {});
  find_nodes(0xFFF853, 0, {0x22A});
  find_nodes(0xFFFF09, 0, {0x22A});
}

class MatchNodeTest : public ::testing::Test {
 protected:
  uint8_t check_match(uint64_t nibbles, uint8_t settings, const string& name,
                      int address, DccMode mode = DCC_28) {
    ExternalTrainDbEntry tr(name, address, mode);
    openlcb::EventId event = create_query(nibbles, settings);
    return FindProtocolDefs::match_query_to_node(event, &tr);
  }

  enum {
    MATCH_ANY = FindProtocolDefs::MATCH_ANY,
    ADDRESS_ONLY = FindProtocolDefs::ADDRESS_ONLY,
    EXACT = FindProtocolDefs::EXACT,
  };
};

TEST_F(MatchNodeTest, simple) {
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY | EXACT,
            check_match(0xFFF123, 0, "Foo", 123));

  EXPECT_FALSE(check_match(0x124, 0, "Foo", 123));
}

TEST_F(MatchNodeTest, middle) {
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY | EXACT,
            check_match(0xF523F, 0, "Foo", 523));
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY | EXACT,
            check_match(0xFF523F, 0, "Foo", 523));
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY | EXACT,
            check_match(0xF523FF, 0, "Foo", 523));

  EXPECT_FALSE(check_match(0xF524F, 0, "Foo", 523));
  EXPECT_FALSE(check_match(0xFF524F, 0, "Foo", 523));
  EXPECT_FALSE(check_match(0xF524FF, 0, "Foo", 523));
}

TEST_F(MatchNodeTest, begin) {
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY | EXACT,
            check_match(0x523F, 0, "Foo", 523));
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY | EXACT,
            check_match(0x523FF, 0, "Foo", 523));
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY | EXACT,
            check_match(0x523FFF, 0, "Foo", 523));

  EXPECT_FALSE(check_match(0x524F, 0, "Foo", 523));
  EXPECT_FALSE(check_match(0x524FF, 0, "Foo", 523));
  EXPECT_FALSE(check_match(0x524FFF, 0, "Foo", 523));
}

TEST_F(MatchNodeTest, toolong) {
  EXPECT_FALSE(check_match(0x123FFFF, 0, "Foo", 123));
}

TEST_F(MatchNodeTest, scattered) {
  // In this test we put in unused characters into the middle of the query
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY | EXACT,
            check_match(0x5F23F, 0, "Foo", 523));
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY | EXACT,
            check_match(0xF52F3F, 0, "Foo", 523));
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY | EXACT,
            check_match(0x5F2F3F, 0, "Foo", 523));

  EXPECT_FALSE(check_match(0x5F24F, 0, "Foo", 523));
  EXPECT_FALSE(check_match(0xF52F4F, 0, "Foo", 523));
  EXPECT_FALSE(check_match(0x5F2F4F, 0, "Foo", 523));
}

TEST_F(MatchNodeTest, label) {
  EXPECT_TRUE(check_match(0xFFF123, 0, "123", 555));
  EXPECT_TRUE(check_match(0xFFF123, 0, "BR123", 555));
  EXPECT_FALSE(
      check_match(0xFFF123, FindProtocolDefs::ADDRESS_ONLY, "BR123", 555));
  EXPECT_FALSE(check_match(0xFFF124, 0, "BR123", 555));
}

TEST_F(MatchNodeTest, prefix) {
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY | EXACT,
            check_match(0xFFF123, FindProtocolDefs::EXACT, "Foo", 123));
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY, check_match(0xFFFF12, 0, "Foo", 123));
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY, check_match(0xFFFFF1, 0, "Foo", 123));
  EXPECT_FALSE(check_match(0xFFFF12, FindProtocolDefs::EXACT, "Foo", 123));

  EXPECT_EQ(MATCH_ANY | EXACT,
            check_match(0xFFF123, FindProtocolDefs::EXACT, "BR 123", 555));
  EXPECT_EQ(MATCH_ANY, check_match(0xFFF12F, 0, "BR123", 555));
  EXPECT_EQ(MATCH_ANY, check_match(0xFFFF1F, 0, "BR123", 555));
  EXPECT_FALSE(check_match(0xFFF12F, FindProtocolDefs::EXACT, "BR 123", 555));
}

TEST_F(MatchNodeTest, with_protocol) {
  // Baseline.
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY | EXACT,
            check_match(0xFFF123, FindProtocolDefs::EXACT, "Foo", 123));
  // If the protocol is specified to be MARKLIN, there is no match as the train
  // is DCC.
  EXPECT_FALSE(check_match(0xFFF123, MARKLIN_ANY, "Foo", 123, DCC_28));
  // But if the train is also marklin, that is fine.
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY | EXACT,
      check_match(0xFFF123, MARKLIN_ANY, "Foo", 123, MARKLIN_NEW));
  // If exact is needed, but protocols don't match, no match either.
  EXPECT_FALSE(check_match(0xFFF123, FindProtocolDefs::EXACT | MARKLIN_NEW,
                           "Foo", 123, DCC_28));

  // A DCC long address received matched against a short-addressed train:
  EXPECT_FALSE(
      check_match(0xFF0123, FindProtocolDefs::EXACT | DCC_28, "Foo", 123));
  EXPECT_FALSE(check_match(
      0xFF0123,
      FindProtocolDefs::EXACT | DCC_28_LONG_ADDRESS,
      "Foo", 123));
  EXPECT_FALSE(check_match(
      0xFFF123,
      FindProtocolDefs::EXACT | DCC_28_LONG_ADDRESS,
      "Foo", 123));

  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY | EXACT,
            check_match(0xFF0123, FindProtocolDefs::EXACT | DCC_28_LONG_ADDRESS,
                        "Foo", 123, DCC_28_LONG_ADDRESS));
  EXPECT_FALSE(check_match(0xFFF123, FindProtocolDefs::EXACT | DCC_28, "Foo",
                           123, DCC_28_LONG_ADDRESS));

  // TODO: add unit tests that check the exact sequence used by a smart and a
  // dumb throttle to allocate three train nodes: 2, 02, 2MM in any sequence.
}

TEST_F(MatchNodeTest, select_best) {
  // An exact name match is better than a partial address match.
  EXPECT_EQ(MATCH_ANY | EXACT, check_match(0xFFF123, 0, "BR 123", 1234));
  // But if we are restricted to addresses, then we get a partial match back.
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY,
            check_match(0xFFF123, ADDRESS_ONLY, "BR 123", 1234));

  // Of two partial matches the address wins, even if not restricted to it
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY,
            check_match(0xFFF123, 0, "BR 1234", 1234));
  // But also when it is
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY,
            check_match(0xFFF123, ADDRESS_ONLY, "BR 1234", 1234));
}

TEST_F(MatchNodeTest, no_digit_in_name) {
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY, check_match(0xFFF123, 0, "BR", 1234));
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY,
            check_match(0xFFF123, ADDRESS_ONLY, "BR", 1234));
  EXPECT_FALSE(check_match(0xFFF123, EXACT, "BR", 1234));
  EXPECT_FALSE(check_match(0xFFF123, EXACT | ADDRESS_ONLY, "BR", 1234));

  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY | EXACT,
            check_match(0xFF1234, 0, "BR", 1234));
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY | EXACT,
            check_match(0xFF1234, ADDRESS_ONLY, "BR", 1234));
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY | EXACT,
            check_match(0xFF1234, ADDRESS_ONLY | EXACT, "BR", 1234));
}

TEST_F(MatchNodeTest, multi_part_name) {
  // An exact name match can start in the middle of the name tag.
  EXPECT_EQ(MATCH_ANY | EXACT, check_match(0xFFF123, 0, "BR 260 123", 555));
  // Another case
  EXPECT_EQ(MATCH_ANY | EXACT, check_match(0xFFF123, 0, "Re 4/4 123", 555));
  // Another case
  EXPECT_EQ(MATCH_ANY | EXACT, check_match(0xFFF123, 0, "Re 4/4 123b", 555));
  // Just a partial name match here
  EXPECT_EQ(MATCH_ANY, check_match(0xFFF123, 0, "Re 4/4 123b2", 555));

  // Also works for exact name match
  EXPECT_EQ(MATCH_ANY | EXACT,
            check_match(0xFFF123, EXACT, "Re 4/4 123", 1234));
  // Even works for multiple prefix matches
  EXPECT_EQ(MATCH_ANY | EXACT,
            check_match(0xFFF123, EXACT, "Re 12 1234 123", 1234));
  // But the reverse is not an exact match.
  EXPECT_FALSE(check_match(0xFFF123, EXACT, "Re 12 123 1234", 1234));
  // Without exact we match on the address.
  EXPECT_EQ(MATCH_ANY | ADDRESS_ONLY,
            check_match(0xFFF123, 0, "Re 12 123 1234", 1234));
  // It the address is wrong, we remain at the partial name match.
  EXPECT_EQ(MATCH_ANY, check_match(0xFFF123, 0, "Re 12 123 1234", 555));
  // Doesn't help if we're looking for address matches only.
  EXPECT_FALSE(check_match(0xFFF123, ADDRESS_ONLY, "BR 260 123", 555));
}

TEST_F(MatchNodeTest, emptyqry) {
  EXPECT_EQ(MATCH_ANY, check_match(0xFFFFFF, 0, "BR 123", 555));
}

}  // namespace commandstation
