/** \copyright
 * Copyright (c) 2014-2016, Balazs Racz
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are  permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \file FindProtocolDefs.cxxtest
 *
 * Tests for the static methods of the find train protocol.
 *
 * @author Balazs Racz
 * @date 2 Jul 2016
 */

#include "utils/test_main.hxx"
#include "commandstation/FindProtocolDefs.hxx"

namespace commandstation {

uint8_t attempt_name_match_term(const string& name, openlcb::EventId event,
                                unsigned shift_start, unsigned shift_end);
uint8_t attempt_name_match(const string& name, openlcb::EventId event);

namespace {

string eventtohex(uint64_t event) { return StringPrintf("%016" PRIX64, event); }

string A2Q(unsigned address, bool exact, int mode) {
  return eventtohex(
      FindProtocolDefs::address_to_query(address, exact, (DccMode)mode));
}

string A2A(unsigned address, bool exact, int mode) {
  return eventtohex(
      FindProtocolDefs::address_to_allocate(address, exact, (DccMode)mode));
}

string I2Q(const string& input) {
  return eventtohex(FindProtocolDefs::input_to_search(input));
}

string I2A(const string& input) {
  return eventtohex(FindProtocolDefs::input_to_allocate(input));
}

string dcc_mode_to_string(DccMode mode) {
  switch((unsigned)mode) {
    case DCCMODE_DEFAULT:
      return "Not Specified";
    case DCCMODE_OLCBUSER:
      return "OpenLCB";
    case 0b10:
      return "MFX/M4";
    default:
      break;
  }
  if ((mode & DCC_ANY_MASK) == DCC_ANY) {
    string ret = "DCC";
    switch (mode & DCC_SS_MASK) {
      case DCC_14 & DCC_SS_MASK:
        ret += " 14-speed";
        break;
      case DCC_28 & DCC_SS_MASK:
        ret += " 28-speed";
        break;
      case DCC_128 & DCC_SS_MASK:
        ret += " 128-speed";
        break;
    }
    if (mode & DCC_LONG_ADDRESS) {
      ret += " long address";
    }
    return ret;
  }
  if ((mode & MARKLIN_ANY_MASK) == MARKLIN_ANY) {
    string ret = "Marklin-Motorola";
    switch(mode & MARKLIN_V_MASK) {
      case MARKLIN_OLD & MARKLIN_V_MASK:
        ret += " I";
        break;
      case MARKLIN_NEW & MARKLIN_V_MASK:
        ret += " II";
        break;
      case MARKLIN_TWOADDR & MARKLIN_V_MASK:
        ret += " II w/two addresses";
        break;
    }
    return ret;
  }
  return "n/a";
}

uint8_t match(const string& input, bool query, const string& name,
              unsigned address, DccMode mode) {
  auto event = query ? FindProtocolDefs::input_to_search(input)
                     : FindProtocolDefs::input_to_allocate(input);
  auto ret = FindProtocolDefs::match_query_to_train(event, name, address, mode);
  LOG(INFO, "%s\t%016llX\t%u\t\"%s\"\t%s", ret ? "   match" : "no match",
      (unsigned long long)event, address, name.c_str(),
      dcc_mode_to_string(mode).c_str());
  return ret;
}

uint8_t match_event(uint64_t event, const string& name,
              unsigned address, DccMode mode) {
  auto ret = FindProtocolDefs::match_query_to_train(event, name, address, mode);
  LOG(INFO, "%s\t%016llX\t%u\t\"%s\"\t%s", ret ? "   match" : "no match",
      (unsigned long long)event, address, name.c_str(),
      dcc_mode_to_string(mode).c_str());
  return ret;
}

TEST(AddressToQueryTest, simplexlate) {
  EXPECT_EQ("090099FFFFFF1300", A2Q(13, false, DCCMODE_DEFAULT));
  EXPECT_EQ("090099FFFFFF1301", A2Q(13, false, DCCMODE_OLCBUSER));
  // Forced long
  EXPECT_EQ("090099FFFFFF130C", A2Q(13, false, DCC_LONG_ADDRESS | DCC_ANY));
  EXPECT_EQ("090099FF13572100", A2Q(135721, false, 0));
}

TEST(AddressToAllocateTest, simplexlate) {
  EXPECT_EQ("090099FFFFFF1380", A2A(13, false, DCCMODE_DEFAULT));
  EXPECT_EQ("090099FFFFFF1381", A2A(13, false, DCCMODE_OLCBUSER));
  // Forced long
  EXPECT_EQ("090099FFFFFF138C", A2A(13, false, DCC_LONG_ADDRESS | DCC_ANY));
  EXPECT_EQ("090099FF13572180", A2A(135721, false, 0));
}

TEST(InputToQueryTest, simplexlate) {
  EXPECT_EQ("090099FFFFFF1300", I2Q("13"));
  // Forced long
  EXPECT_EQ("090099FFFFF0130C", I2Q("013"));
  EXPECT_EQ("090099FFFF123400", I2Q("1234"));
  // some more exotic
  EXPECT_EQ("090099FF013F410C", I2Q("013 41"));
  EXPECT_EQ("090099FF013F410C", I2Q("013///41"));

  // Marklin
  EXPECT_EQ("090099FFFFF13F06", I2Q("13M"));
}

TEST(InputToAllocTest, simplexlate) {
  EXPECT_EQ("090099FFFFFF13E0", I2A("13"));
  // Forced long
  EXPECT_EQ("090099FFFFF013EC", I2A("013"));
  EXPECT_EQ("090099FFFFF13FEC", I2A("13L"));
  EXPECT_EQ("090099FFFF013FEC", I2A("013L"));
  EXPECT_EQ("090099FFFF1234E0", I2A("1234"));

  // Marklin
  EXPECT_EQ("090099FFFFF12FE6", I2A("12M"));
  EXPECT_EQ("090099FFFFF12FE5", I2A("12m"));
}

typedef FindProtocolDefs F;

TEST(MatchTest, testmatch) {
  EXPECT_EQ(0, match("13", true, "FooBar", 45, DCC_ANY));
  EXPECT_EQ(0, match("13", true, "FooBar", 4513, DCC_ANY));
  EXPECT_EQ(F::EXACT | F::MATCH_ANY,
            match("13", true, "FooBar13", 45, DCC_ANY));
  EXPECT_EQ(F::MATCH_ANY,
            match("13", true, "FooBar135", 45, DCC_ANY));
  EXPECT_EQ(F::EXACT | F::ADDRESS_ONLY | F::MATCH_ANY,
            match("13", true, "FooBar777", 13, DCC_128));

  EXPECT_EQ(F::ADDRESS_ONLY | F::EXACT | F::MATCH_ANY,
            match("013", true, "FooBar777", 13, DCC_DEFAULT_LONG_ADDRESS));
  EXPECT_EQ(0,
            match("013", true, "FooBar777", 13, DCC_28));
  EXPECT_EQ(0, // allocate will not match due to short vs long
            match("013", false, "FooBar777", 13, DCC_ANY));

  EXPECT_EQ(0,  // allocate will not match due to marklin vs dcc
            match("13M", false, "FooBar777", 13, DCC_ANY));
  EXPECT_NE(0,  // this is marklin vs marklin
            match("13M", false, "FooBar777", 13, MARKLIN_NEW));

  EXPECT_EQ(F::EXACT | F::ADDRESS_ONLY | F::MATCH_ANY,
            match("013", true, "FooBar777", 13, DCC_14_LONG_ADDRESS));

  // Empty query should match all trains
  EXPECT_EQ(F::EXACT | F::ADDRESS_ONLY | F::MATCH_ANY,
            match("", true, "FooBar", 13, DCC_14_LONG_ADDRESS));
  EXPECT_EQ(F::EXACT | F::ADDRESS_ONLY | F::MATCH_ANY,
            match("", true, "FooBar777", 13, DCC_128));
}

TEST(MatchTest, longtoshortmatch) {
  // In this test we have a dcc long address locomotive and then a short
  // address allocate arrives. The match should fail.
  EXPECT_EQ(0, match("13", false, "013", 13, DCC_28_LONG_ADDRESS));

  // Another example in reverse: a short locomotive and a long address query.
  EXPECT_EQ(0, match("013", false, "13", 13, DCC_28));

  // Search for short address should return a long address loco.
  EXPECT_EQ(F::EXACT | F::ADDRESS_ONLY | F::MATCH_ANY,
            match("13", true, "FooBar777", 13, DCC_28_LONG_ADDRESS));
  // Search for long address should not return a short address loco.
  EXPECT_EQ(0, match("013", true, "FooBar777", 13, DCC_28));

  // Search for short address should return a long address loco.
  EXPECT_EQ(F::EXACT | F::ADDRESS_ONLY | F::MATCH_ANY,
            match("13", true, "013L", 13, DCC_28_LONG_ADDRESS));
  // Search for long address should not return a short address loco.
  EXPECT_EQ(0, match("013", true, "13S", 13, DCC_28));
}

TEST(MatchTest, marklinmatch) {
  // In this test we have a dcc long address locomotive and then a marklin
  // allocate arrives. The match should fail.
  EXPECT_EQ(0, match("13M", false, "013L", 13, DCC_28_LONG_ADDRESS));
  LOG(INFO, "2");
  // Another example: a short locomotive and a marklin query.
  EXPECT_EQ(0, match("13M", false, "13S", 13, DCC_28));

  // In this test we have a marklin-old locomotive and then a marklin address
  // allocate arrives.
  EXPECT_NE(0, match("13M", false, "13m", 13, MARKLIN_OLD));

  // Another example: a marklin-new loco and a marklin query.
  EXPECT_NE(0, match("13M", false, "13M", 13, MARKLIN_NEW));

  // In this test we have a marklin-old locomotive and then a generic
  // allocate arrives. This won't match if the default drive mode is DCC.
  EXPECT_EQ(0, match("13", false, "13m", 13, MARKLIN_OLD));
  
  // Another example: a marklin-new loco and a generic query.
  EXPECT_EQ(0, match("13", false, "13M", 13, MARKLIN_NEW));

  {
    ScopedOverride ov(&FindProtocolDefs::DEFAULT_DRIVE_MODE, MARKLIN_NEW);
    // In this test we have a marklin-old locomotive and then a generic
    // allocate arrives. This will match if the default drive mode is MM.
    EXPECT_NE(0, match("13", false, "13m", 13, MARKLIN_OLD));
    EXPECT_NE(0, match("13", false, "13M", 13, MARKLIN_NEW));
  }
  
  // In this test we have a marklin-old locomotive and then a DCC address
  // allocate arrives.
  EXPECT_EQ(0, match("013", false, "13m", 13, MARKLIN_OLD));

  // Another example: a marklin-new loco and a DCC query.
  EXPECT_EQ(0, match("013", false, "13M", 13, MARKLIN_NEW));

  // Another example: a marklin-new loco and a DCC query.
  EXPECT_EQ(0, match("13L", false, "13M", 13, MARKLIN_NEW));

  // Another example: a marklin-new loco and a DCC query.
  EXPECT_EQ(0, match("13L", false, "13m", 13, MARKLIN_OLD));

  // In this test we have a marklin-old locomotive and then a DCC address
  // allocate arrives.
  EXPECT_EQ(0, match("13S", false, "13m", 13, MARKLIN_OLD));

  // Another example: a marklin-new loco and a DCC query.
  EXPECT_EQ(0, match("13S", false, "13M", 13, MARKLIN_NEW));
}

TEST(NameMatchTest, match_helpers) {
  EXPECT_EQ(F::EXACT | F::MATCH_ANY,
            attempt_name_match_term("FooBar13", 0x090099FFFFFF1300, 12, 8));
  EXPECT_EQ(F::EXACT | F::MATCH_ANY,
            attempt_name_match("FooBar13", 0x090099FFFFFF1300));
  EXPECT_EQ(F::EXACT | F::MATCH_ANY,
            attempt_name_match("FooBar13xx", 0x090099FFFFFF1300));
  EXPECT_EQ(
      0, attempt_name_match(
             "FooBar13", 0x090099FFFFFF1300 | FindProtocolDefs::ADDRESS_ONLY));
  EXPECT_EQ(F::MATCH_ANY, attempt_name_match("FooBar135", 0x090099FFFFFF1300));
  EXPECT_EQ(0, attempt_name_match(
                   "FooBar135", 0x090099FFFFFF1300 | FindProtocolDefs::EXACT));
}

/// Contains all test vectors from the TrainSearchTN. These are duplicates of
/// the tests above.
TEST(MatchTest, test_vectors) {
  EXPECT_EQ(0, match("13", true, "FooBar", 45, DCC_ANY));
  EXPECT_EQ(0, match("13", true, "FooBar", 4513, DCC_ANY));
  EXPECT_EQ(F::EXACT | F::MATCH_ANY,
            match("13", true, "FooBar13", 45, DCC_ANY));
  EXPECT_EQ(F::MATCH_ANY,
            match("13", true, "FooBar135", 45, DCC_ANY));
  EXPECT_EQ(0, match_event(0x090099FFFFFF1300 | FindProtocolDefs::EXACT,
                           "FooBar135", 45, DCC_ANY));
  EXPECT_EQ(F::EXACT | F::MATCH_ANY,
            match_event(0x090099FFFFFF1300 | FindProtocolDefs::EXACT,
                        "FooBar13 5", 45, DCC_ANY));

  EXPECT_EQ(F::EXACT | F::ADDRESS_ONLY | F::MATCH_ANY,
            match("13", true, "FooBar777", 13, DCC_128));

}

}  // namespace
}  // namespace commandstation
