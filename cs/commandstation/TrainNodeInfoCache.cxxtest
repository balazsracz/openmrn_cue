#define LOGLEVEL INFO

#include "commandstation/traindb_test_utils.hxx"
#include "commandstation/FindTrainNode.hxx"
#include "commandstation/TrainNodeInfoCache.hxx"

#include "openlcb/CanDefs.hxx"

using ::testing::ElementsAre;
using ::testing::ContainerEq;

namespace commandstation {

const struct const_traindb_entry_t const_lokdb[] = {
    // 0
    {7000, {0xff}, "Node test 7000", DCC_28},
    {5000, {0xff}, "TT 5000", DCC_28},
    {5104, {0xff}, "TT 5104", DCC_28},
    {5100, {0xff}, "TT 5100", DCC_28},
    {3000, {0xff}, "TT 3000", DCC_28},
    {5102, {0xff}, "TT 5102", DCC_28},
    {5001, {0xff}, "TT 5001", DCC_28},
    {5103, {0xff}, "TT 5103", DCC_28},
    {5002, {0xff}, "TT 5002", DCC_28},
    {5101, {0xff}, "TT 5101", DCC_28},
    {5105, {0xff}, "TT 5105", DCC_28},
    {5003, {0xff}, "TT 5003", DCC_28},
    {5004, {0xff}, "TT 5004", DCC_28},
    {5005, {0xff}, "TT 5005", DCC_28},
    {3020, {0xff}, "TT 3020", DCC_28},
    {3001, {0xff}, "TT 3001", DCC_28},
    {3003, {0xff}, "TT 3003", DCC_28},
    {3018, {0xff}, "TT 3018", DCC_28},
    {3006, {0xff}, "TT 3006", DCC_28},
    {3014, {0xff}, "TT 3014", DCC_28},
    {3023, {0xff}, "TT 3023", DCC_28},
    {3013, {0xff}, "TT 3013", DCC_28},
    {3024, {0xff}, "TT 3024", DCC_28},
    {3009, {0xff}, "TT 3009", DCC_28},
    {3004, {0xff}, "TT 3004", DCC_28},
    {3019, {0xff}, "TT 3019", DCC_28},
    {3017, {0xff}, "TT 3017", DCC_28},
    {3007, {0xff}, "TT 3007", DCC_28},
    {3021, {0xff}, "TT 3021", DCC_28},
    {3011, {0xff}, "TT 3011", DCC_28},
    {3002, {0xff}, "TT 3002", DCC_28},
    {3022, {0xff}, "TT 3022", DCC_28},
    {3012, {0xff}, "TT 3012", DCC_28},
    {3005, {0xff}, "TT 3005", DCC_28},
    {3015, {0xff}, "TT 3015", DCC_28},
    {3010, {0xff}, "TT 3010", DCC_28},
    {3008, {0xff}, "TT 3008", DCC_28},
    {3016, {0xff}, "TT 3016", DCC_28},
    {0, {0}, "", 0},
};

extern const size_t const_lokdb_size =
    sizeof(const_lokdb) / sizeof(const_lokdb[0]);

const unsigned TRAINDB_TEST_NUM_ALIAS = 45;
OVERRIDE_CONST(local_alias_cache_size, 30);

class MockNotifiable : public Notifiable {
 public:
  MOCK_METHOD0(notify, void());
};

class FindManyTrainTestBase : public TrainDbTest {
 protected:
  static void SetUpTestCase() {
    TrainDbTest::SetUpTestCase();
    local_alias_cache_size = 40;
    local_node_count = 39;
  }

  FindManyTrainTestBase() {
    secondIf_.add_addressed_message_support();
    // Adds one alias buffer to the alias allocation flow.
    run_x([this](){
      secondIf_.alias_allocator()->TEST_add_allocated_alias(0x922);
    });
    wait();
    trainCache_.set_cache_max_size(16, 4);
    trainCache_.set_nodes_to_show(3);
  }

  ~FindManyTrainTestBase() {
    wait_for_search();
    wait();
  }

  void wait_for_search() {
    while (!trainCache_.is_terminated()) {
      usleep(20000);
    }
    wait();
  }

  /// @return a subset of the names vector. first and last are indexes to the
  /// base vector, both interpreted as inclusive.
  vector<string> get_names_list(const vector<string>& base, int first,
                                int last) {
    vector<string> result(base.begin() + first, base.begin() + last + 1);
    return result;
  }

  using NodeCacheMap = TrainNodeInfoCache::NodeCacheMap;
  using ResultList = TrainNodeInfoCache::ResultList;

  const NodeCacheMap& get_results_map() {
    return trainCache_.trainNodes_.nodes_;
  }

  const ResultList& get_result_struct() {
    return trainCache_.trainNodes_;
  }

  openlcb::NodeID get_clip_min() {
    return trainCache_.minResult_;
  }

  openlcb::NodeID get_clip_max() {
    return trainCache_.maxResult_;
  }
  
  std::vector<string> get_output() {
    std::vector<string> ret;
    for (auto* ps : output_.entry_names) {
      EXPECT_TRUE(ps);
      ret.push_back(*ps);
    }
    return ret;
  }

  const uint64_t SECOND_NODE_ID = openlcb::TEST_NODE_ID + 256;
  openlcb::IfCan secondIf_{&g_executor, &can_hub0, 10, 10, 5};
  openlcb::AddAliasAllocator aa_{SECOND_NODE_ID, &secondIf_};
  openlcb::DefaultNode secondNode_{&secondIf_, SECOND_NODE_ID};

  RemoteFindTrainNode remoteClient_{&secondNode_};
  TrainNodeCacheOutput output_;
  TrainNodeInfoCache trainCache_{&secondNode_, &remoteClient_, &output_};

  StrictMock<MockNotifiable> mockNotifiable_;
  //openlcb::ConfigUpdateFlow cfgflow{ifCan_.get()};
};

TEST_F(FindManyTrainTestBase, Create) {}

TEST_F(FindManyTrainTestBase, Search7) {
  auto b = get_buffer_deleter(remoteClient_.alloc());
  b->data()->reset(7, false, DCC_ANY);
  print_all_packets();
  trainCache_.reset_search(std::move(b), &mockNotifiable_);
  EXPECT_CALL(mockNotifiable_, notify()).Times(AtLeast(1));
  wait_for_search();
  EXPECT_EQ(1u, get_results_map().size());
  EXPECT_TRUE(get_results_map().begin()->second->hasNodeName_);
  EXPECT_THAT(get_output(), ElementsAre("Node test 7000"));
  printf("scrolling...\n");
  trainCache_.scroll_down();
  EXPECT_THAT(get_output(), ElementsAre("Node test 7000"));
  printf("scrolling...\n");
  trainCache_.scroll_down();
  EXPECT_THAT(get_output(), ElementsAre("Node test 7000"));
}

TEST_F(FindManyTrainTestBase, Search5) {
  auto b = get_buffer_deleter(remoteClient_.alloc());
  b->data()->reset(5, false, DCC_ANY);

  expect_any_packet();
  trainCache_.reset_search(std::move(b), &mockNotifiable_);
  EXPECT_CALL(mockNotifiable_, notify()).Times(AtLeast(1));
  wait_for_search();
  EXPECT_EQ(12u, get_results_map().size());

  EXPECT_THAT(get_output(), ElementsAre("TT 5000", "TT 5001", "TT 5002"));

  // Do some scrolling
  EXPECT_EQ(12u, trainCache_.num_results());
  EXPECT_EQ(0u, trainCache_.first_result_offset());
  trainCache_.scroll_down();
  EXPECT_THAT(get_output(), ElementsAre("TT 5001", "TT 5002", "TT 5003"));
  trainCache_.scroll_down();
  EXPECT_THAT(get_output(), ElementsAre("TT 5002", "TT 5003", "TT 5004"));
  for (int i = 0; i < 20; ++i) {
    trainCache_.scroll_down();
  }
  EXPECT_THAT(get_output(), ElementsAre("TT 5103", "TT 5104", "TT 5105"));
  EXPECT_EQ(9u, trainCache_.first_result_offset());
  trainCache_.scroll_down();
  EXPECT_EQ(9u, trainCache_.first_result_offset());
  EXPECT_THAT(get_output(), ElementsAre("TT 5103", "TT 5104", "TT 5105"));

  clear_expect();
  printf("restrict search.\n");
  // Restrict the search
  b = get_buffer_deleter(remoteClient_.alloc());
  b->data()->reset(51, false, DCCMODE_DEFAULT);
  trainCache_.reset_search(std::move(b), &mockNotifiable_);
  EXPECT_CALL(mockNotifiable_, notify()).Times(2); // no new SNIP lookup.
  EXPECT_CALL(canBus_, mwrite(_)).Times(AtMost(7));
  wait_for_search();
  EXPECT_EQ(6u, trainCache_.num_results());
  EXPECT_EQ(0u, trainCache_.first_result_offset());
  clear_expect();
  EXPECT_EQ(6u, get_results_map().size());
  EXPECT_THAT(get_output(), ElementsAre("TT 5100", "TT 5101", "TT 5102"));
  EXPECT_EQ(0u, trainCache_.first_result_offset());
  EXPECT_EQ(6u, trainCache_.num_results());

  // clear restrict
  b = get_buffer_deleter(remoteClient_.alloc());
  b->data()->reset();
  EXPECT_CALL(mockNotifiable_, notify()).Times(AtLeast(2));
  trainCache_.reset_search(std::move(b), &mockNotifiable_);
  // wait for one iteration of the executor
  // It is really difficult to specify how long we need to wait.
  //EXPECT_EQ(0u, trainCache_.num_results());
  //EXPECT_EQ(0u, trainCache_.first_result_offset());

  wait_for_search();
  EXPECT_EQ(38u, trainCache_.num_results());
  EXPECT_EQ(0u, trainCache_.first_result_offset());
  EXPECT_THAT(get_output(), ElementsAre("TT 3000", "TT 3001", "TT 3002"));
}

TEST_F(FindManyTrainTestBase, PageSize) {
  trainCache_.set_nodes_to_show(2);
  auto b = get_buffer_deleter(remoteClient_.alloc());
  b->data()->reset(5, false, DCCMODE_DEFAULT);

  expect_any_packet();
  trainCache_.reset_search(std::move(b), &mockNotifiable_);
  EXPECT_CALL(mockNotifiable_, notify()).Times(AtLeast(1));
  wait_for_search();
  EXPECT_EQ(12u, get_results_map().size());

  EXPECT_THAT(get_output(), ElementsAre("TT 5000", "TT 5001"));
}


TEST_F(FindManyTrainTestBase, ScrollToLastLine) {
  trainCache_.set_nodes_to_show(2);
  trainCache_.set_scroll_to_last_line(true);
  auto b = get_buffer_deleter(remoteClient_.alloc());
  b->data()->reset(5, false, DCCMODE_DEFAULT);

  expect_any_packet();
  trainCache_.reset_search(std::move(b), &mockNotifiable_);
  EXPECT_CALL(mockNotifiable_, notify()).Times(AtLeast(1));
  wait_for_search();
  EXPECT_EQ(12u, get_results_map().size());

  EXPECT_THAT(get_output(), ElementsAre("TT 5000", "TT 5001"));

  // Do some scrolling
  EXPECT_EQ(12u, trainCache_.num_results());
  EXPECT_EQ(0u, trainCache_.first_result_offset());
  trainCache_.scroll_down();
  EXPECT_THAT(get_output(), ElementsAre("TT 5001", "TT 5002"));
  trainCache_.scroll_down();
  EXPECT_THAT(get_output(), ElementsAre("TT 5002", "TT 5003"));
  for (int i = 0; i < 20; ++i) {
    trainCache_.scroll_down();
  }
  EXPECT_THAT(get_output(), ElementsAre("TT 5105"));
  EXPECT_EQ(11u, trainCache_.first_result_offset());
  trainCache_.scroll_down();
  EXPECT_EQ(11u, trainCache_.first_result_offset());
  EXPECT_THAT(get_output(), ElementsAre("TT 5105"));

  trainCache_.scroll_up();
  EXPECT_EQ(10u, trainCache_.first_result_offset());
  EXPECT_THAT(get_output(), ElementsAre("TT 5104", "TT 5105"));

  trainCache_.scroll_down();
  EXPECT_EQ(11u, trainCache_.first_result_offset());
  EXPECT_THAT(get_output(), ElementsAre("TT 5105"));
}

TEST_F(FindManyTrainTestBase, Scroll3) {
  auto b = get_buffer_deleter(remoteClient_.alloc());
  b->data()->reset(3, false, DCCMODE_DEFAULT);
  expect_any_packet();
  trainCache_.reset_search(std::move(b), &mockNotifiable_);
  EXPECT_CALL(mockNotifiable_, notify()).Times(AtLeast(1));
  wait_for_search();
  EXPECT_EQ(16u, get_results_map().size());
  EXPECT_EQ(25u, trainCache_.num_results());

  EXPECT_THAT(get_output(), ElementsAre("TT 3000", "TT 3001", "TT 3002"));

  // Do some scrolling
  EXPECT_EQ(0u, trainCache_.first_result_offset());
  trainCache_.scroll_down();
  EXPECT_THAT(get_output(), ElementsAre("TT 3001", "TT 3002", "TT 3003"));
  EXPECT_EQ(1u, trainCache_.first_result_offset());
  trainCache_.scroll_down();
  EXPECT_THAT(get_output(), ElementsAre("TT 3002", "TT 3003", "TT 3004"));
  EXPECT_EQ(2u, trainCache_.first_result_offset());
  clear_expect(true);
  for (int i = 0; i < 7; ++i) {
    printf("offset %u, then scroll\n", trainCache_.first_result_offset());
    trainCache_.scroll_down();
    wait_for_search();
    EXPECT_EQ(25u, trainCache_.num_results());
  }
  EXPECT_EQ(9u, trainCache_.first_result_offset());
  EXPECT_THAT(get_output(), ElementsAre("TT 3009", "TT 3010", "TT 3011"));
  wait();
  clear_expect();
  EXPECT_EQ(0, get_result_struct().resultsClippedAtTop_);
  printf("scroll and re-fetch\n");
  EXPECT_CALL(canBus_, mwrite(_)).Times(AtLeast(40));
  trainCache_.scroll_down();
  EXPECT_THAT(get_output(), ElementsAre("TT 3010", "TT 3011", "TT 3012"));
  EXPECT_EQ(10u, trainCache_.first_result_offset());
  wait_for_search();
  clear_expect(true);
  EXPECT_EQ(10u, trainCache_.first_result_offset());
  EXPECT_THAT(get_output(), ElementsAre("TT 3010", "TT 3011", "TT 3012"));
  EXPECT_EQ("TT 3006", get_results_map().begin()->second->name_);
  // there is some whitebox testing here to debug why the scrolling is broken
  // now.
  EXPECT_EQ(0x060100000000ULL | 3006, get_clip_min());
  EXPECT_EQ(6, get_result_struct().resultsClippedAtTop_);
  EXPECT_EQ(6, get_result_struct().newClippedAtTop_);
  EXPECT_EQ(16U, get_results_map().size());
  auto maxnode = TrainNodeInfoCache::kMaxNode;
  EXPECT_EQ(maxnode, get_clip_max());
  printf("more scroll\n");
  for (int i = 0; i < 5; ++i) {
    printf("offset %u, then scroll\n", trainCache_.first_result_offset());
    trainCache_.scroll_down();
    wait_for_search();
    EXPECT_EQ(25u, trainCache_.num_results());
  }
  EXPECT_EQ(15u, trainCache_.first_result_offset());
  EXPECT_THAT(get_output(), ElementsAre("TT 3015", "TT 3016", "TT 3017"));
  clear_expect(true);
  wait_for_search();
  clear_expect();
  EXPECT_CALL(canBus_, mwrite(_)).Times(AtLeast(40));
  printf("more scroll\n");
  trainCache_.scroll_down();
  wait_for_search();
  clear_expect(true);
  EXPECT_EQ(16u, get_results_map().size());
  for (int i = 0; i < 10; ++i) {
    printf("offset %u, then scroll\n", trainCache_.first_result_offset());
    trainCache_.scroll_down();
    EXPECT_EQ(25u, trainCache_.num_results());
  }
  EXPECT_EQ(22u, trainCache_.first_result_offset());
  EXPECT_THAT(get_output(), ElementsAre("TT 3022", "TT 3023", "TT 3024"));
  wait_for_search();
}

TEST_F(FindManyTrainTestBase, BidirScrollNoPage) {
  auto b = get_buffer_deleter(remoteClient_.alloc());
  b->data()->reset(5, false, DCCMODE_DEFAULT);

  expect_any_packet();
  trainCache_.reset_search(std::move(b), &mockNotifiable_);
  EXPECT_CALL(mockNotifiable_, notify()).Times(AtLeast(1));
  wait_for_search();
  EXPECT_EQ(12u, get_results_map().size());

  EXPECT_THAT(get_output(), ElementsAre("TT 5000", "TT 5001", "TT 5002"));
  clear_expect(true);

  trainCache_.scroll_down();
  trainCache_.scroll_down();
  trainCache_.scroll_down();
  trainCache_.scroll_down();
  EXPECT_THAT(get_output(), ElementsAre("TT 5004", "TT 5005", "TT 5100"));
  trainCache_.scroll_up();
  EXPECT_THAT(get_output(), ElementsAre("TT 5003", "TT 5004", "TT 5005"));
  trainCache_.scroll_up();
  EXPECT_THAT(get_output(), ElementsAre("TT 5002", "TT 5003", "TT 5004"));
  trainCache_.scroll_up();
  EXPECT_THAT(get_output(), ElementsAre("TT 5001", "TT 5002", "TT 5003"));
  trainCache_.scroll_up();
  EXPECT_THAT(get_output(), ElementsAre("TT 5000", "TT 5001", "TT 5002"));
  trainCache_.scroll_up();
  EXPECT_THAT(get_output(), ElementsAre("TT 5000", "TT 5001", "TT 5002"));
  wait_for_search();
  clear_expect(true);
}

TEST_F(FindManyTrainTestBase, BidirScrollWithPage) {
  auto b = get_buffer_deleter(remoteClient_.alloc());
  b->data()->reset(3, false, DCCMODE_DEFAULT);

  expect_any_packet();
  trainCache_.reset_search(std::move(b), &mockNotifiable_);
  EXPECT_CALL(mockNotifiable_, notify()).Times(AtLeast(1));
  wait_for_search();
  EXPECT_EQ(16u, get_results_map().size());
  EXPECT_EQ(25u, trainCache_.num_results());

  EXPECT_THAT(get_output(), ElementsAre("TT 3000", "TT 3001", "TT 3002"));
  LOG(INFO, "10");
  
  clear_expect(true);
  for (int i = 0; i < 9; ++i) {
    printf("offset %u, then scroll\n", trainCache_.first_result_offset());
    trainCache_.scroll_down();
  }
  wait_for_search();
  EXPECT_THAT(get_output(), ElementsAre("TT 3009", "TT 3010", "TT 3011"));
  clear_expect();
  EXPECT_CALL(canBus_, mwrite(_)).Times(AtLeast(40));
  trainCache_.scroll_down();
  wait_for_search();
  EXPECT_THAT(get_output(), ElementsAre("TT 3010", "TT 3011", "TT 3012"));
  clear_expect(true);

  LOG(INFO, "20");

  EXPECT_EQ("TT 3006", get_results_map().begin()->second->name_);
  trainCache_.scroll_down();
  EXPECT_THAT(get_output(), ElementsAre("TT 3011", "TT 3012", "TT 3013"));
  // now one up should be fine, the second should trigger a refetch
  trainCache_.scroll_up();
  EXPECT_THAT(get_output(), ElementsAre("TT 3010", "TT 3011", "TT 3012"));
  wait_for_search();
  clear_expect();
  EXPECT_CALL(canBus_, mwrite(_)).Times(AtLeast(40));
  trainCache_.scroll_up();
  wait_for_search();
  clear_expect(true);

  LOG(INFO, "30, [%012" PRIx64 ",%012" PRIx64 "]", get_clip_min(), get_clip_max());

  EXPECT_EQ("TT 3000", get_results_map().begin()->second->name_);
  EXPECT_THAT(get_output(), ElementsAre("TT 3009", "TT 3010", "TT 3011"));
  trainCache_.scroll_up();
  EXPECT_THAT(get_output(), ElementsAre("TT 3008", "TT 3009", "TT 3010"));
  wait_for_search();
  clear_expect(true);
  trainCache_.scroll_down();
  EXPECT_THAT(get_output(), ElementsAre("TT 3009", "TT 3010", "TT 3011"));
  trainCache_.scroll_up();
  EXPECT_THAT(get_output(), ElementsAre("TT 3008", "TT 3009", "TT 3010"));
  wait_for_search();
  clear_expect(true);
  EXPECT_EQ("TT 3000", get_results_map().begin()->second->name_);
  LOG(INFO, "40");
  for (int i = 0; i < 20; ++i) {
    LOG(INFO, "45 %d", i);
    trainCache_.scroll_up();
    wait();
  }
  LOG(INFO, "50");
  wait_for_search();
  clear_expect(true);
  trainCache_.scroll_down();
  LOG(INFO, "60");
  EXPECT_THAT(get_output(), ElementsAre("TT 3001", "TT 3002", "TT 3003"));
  EXPECT_EQ(1u, trainCache_.first_result_offset());
  wait_for_search();
  clear_expect(true);
}

TEST_F(FindManyTrainTestBase, PrefetchTest) {
  auto b = get_buffer_deleter(remoteClient_.alloc());
  b->data()->reset(3, false, DCCMODE_DEFAULT);

  expect_any_packet();
  trainCache_.reset_search(std::move(b), &mockNotifiable_);
  EXPECT_CALL(mockNotifiable_, notify()).Times(AtLeast(1));
  wait_for_search();
  EXPECT_EQ(16u, get_results_map().size());
  EXPECT_EQ(25u, trainCache_.num_results());

  vector<string> names;
  for (int i = 0; i < 25; ++i) {
    names.push_back(StringPrintf("TT %d", 3000 + i));
  }
  
  EXPECT_THAT(get_output(), ElementsAre(names[0], names[1], names[2]));

  for (int i = 0; i <= 22; ++i) {
    EXPECT_THAT(get_output(), ElementsAre(names[i+0], names[i+1], names[i+2]));

    LOG(INFO, "Round %d", i);
    clear_expect(true);
    if (i == 9 || i == 15) {
      EXPECT_CALL(canBus_, mwrite(_)).Times(AtLeast(40));
    }
    trainCache_.scroll_down();
    wait_for_search();
    clear_expect(true);
    if (i < 9) {
      EXPECT_EQ(names[0], get_results_map().begin()->second->name_);
    } else if (i < 15) {
      EXPECT_EQ(names[6], get_results_map().begin()->second->name_);
    } else if (i < 25) {
      // 16 entries 3009..3024
      EXPECT_EQ(names[9], get_results_map().begin()->second->name_);
    }
  }
  
  // at the peak the output is 22, 23, 24.
  
  // let's go backwards
  for (int i = 22; i > 0; --i) {
    EXPECT_THAT(get_output(), ElementsAre(names[i+0], names[i+1], names[i+2]));

    LOG(INFO, "Round %d", i);
    clear_expect(true);
    if (i == 13 || i == 7) {
      EXPECT_CALL(canBus_, mwrite(_)).Times(AtLeast(40));
    }
    trainCache_.scroll_up();
    wait_for_search();
    clear_expect(true);
    if (i > 13) {
      EXPECT_EQ(names[9], get_results_map().begin()->second->name_);
    } else if (i > 7) {
      EXPECT_EQ(names[3], get_results_map().begin()->second->name_);
    } else {
      EXPECT_EQ(names[0], get_results_map().begin()->second->name_);
    } 
  }
}


TEST_F(FindManyTrainTestBase, ScrollToTest) {
  auto b = get_buffer_deleter(remoteClient_.alloc());
  b->data()->reset(3, false, DCCMODE_DEFAULT);

  expect_any_packet();
  trainCache_.reset_search(std::move(b), &mockNotifiable_);
  EXPECT_CALL(mockNotifiable_, notify()).Times(AtLeast(1));
  wait_for_search();
  EXPECT_EQ(16u, get_results_map().size());
  EXPECT_EQ(25u, trainCache_.num_results());
  
  vector<string> names;
  vector<openlcb::NodeID> ids;
  for (int i = 0; i < 25; ++i) {
    names.push_back(StringPrintf("TT %d", 3000 + i));
    ids.push_back(0x060100000000ULL | (3000 + i));
  }

  // This is the result of the initial search.
  /// @todo we need to have the initial search also have the sizes specified.
  EXPECT_THAT(get_output(), ElementsAre(names[0], names[1], names[2]));

  LOG(INFO, "Initial scrolls");
  // We scroll around a bit the existing cache contents.
  clear_expect(true);
  trainCache_.scroll_to(ids[0], 3, 3);
  EXPECT_THAT(get_output(), ContainerEq(get_names_list(names, 0, 3)));
  clear_expect(true);

  trainCache_.scroll_to(ids[5], 3, 3);
  EXPECT_THAT(get_output(), ContainerEq(get_names_list(names, 2, 8)));
  clear_expect(true);

  trainCache_.scroll_to(ids[5], 4, 2);
  EXPECT_THAT(get_output(), ContainerEq(get_names_list(names, 1, 7)));
  clear_expect(true);

  // Scroll barely to the border. 4 entries spare, no resync needed.
  LOG(INFO, "Scroll to border");
  clear_expect(true);
  EXPECT_EQ(names[15], (--get_results_map().end())->second->name_);
  EXPECT_EQ(0U, trainCache_.scroll_to(ids[10], 4, 1));
  EXPECT_THAT(get_output(), ContainerEq(get_names_list(names, 6, 11)));
  wait_for_search();
  clear_expect(true);
  
  EXPECT_EQ(0U, trainCache_.scroll_to(ids[1], 4, 1));
  EXPECT_THAT(get_output(), ContainerEq(get_names_list(names, 0, 2)));

  // Scroll to the border with refresh.
  clear_expect(true);
  LOG(INFO, "Scroll to border with refresh");
  EXPECT_CALL(canBus_, mwrite(_)).Times(AtLeast(40));
  EXPECT_EQ((unsigned)trainCache_.FLAGS_NEED_REFILL_CACHE, trainCache_.scroll_to(ids[11], 4, 1));
  EXPECT_THAT(get_output(), ContainerEq(get_names_list(names, 7, 12)));
  wait_for_search();
  clear_expect(true);
  EXPECT_EQ(names[3], get_results_map().begin()->second->name_);
  EXPECT_EQ(names[18], (--get_results_map().end())->second->name_);

  // Scroll to border with clip.
  LOG(INFO, "Scroll to border with clip");
  EXPECT_CALL(canBus_, mwrite(_)).Times(AtLeast(40));
  EXPECT_EQ(trainCache_.FLAGS_NEED_REFILL_CACHE | trainCache_.FLAGS_CLIPPED_AT_BOTTOM, trainCache_.scroll_to(ids[18], 4, 2));
  EXPECT_THAT(get_output(), ContainerEq(get_names_list(names, 14, 18)));
  wait_for_search();
  clear_expect(true);
  // After the wait for search we should have complete data.
  EXPECT_THAT(get_output(), ContainerEq(get_names_list(names, 14, 20)));
}  

TEST_F(FindManyTrainTestBase, ScrollToTestEmpty) {
  auto b = get_buffer_deleter(remoteClient_.alloc());
  b->data()->reset(831, false, DCCMODE_DEFAULT);

  expect_any_packet();
  trainCache_.reset_search(std::move(b), &mockNotifiable_);
  EXPECT_CALL(mockNotifiable_, notify()).Times(AtLeast(1));
  wait_for_search();
  EXPECT_EQ(0u, get_results_map().size());
  EXPECT_EQ(0u, trainCache_.num_results());
  
  EXPECT_EQ(0 + trainCache_.FLAGS_TARGET_NOT_FOUND, trainCache_.scroll_to(0, 4, 2));
  EXPECT_EQ(0u, get_results_map().size());
  EXPECT_EQ(0u, trainCache_.num_results());
}

} // namespace commandstation
