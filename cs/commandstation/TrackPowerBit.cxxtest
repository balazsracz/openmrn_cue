#include "commandstation/TrackPowerBit.hxx"
#include "commandstation/track_test_helper.hxx"
#include "utils/Singleton.hxx"

DccOutput* dcc_output_main = nullptr;
DccOutput* dcc_output_lcc = nullptr;

DccOutput* get_dcc_output(DccOutput::Type type) {
  if (type == DccOutput::TRACK) {
    return dcc_output_main;
  }
  if (type == DccOutput::LCC) {
    return dcc_output_lcc;
  }
  return nullptr;
}

class MockDccOutput : public DccOutput {
 public:
  MOCK_METHOD1(disable_output_for_reason, void(DisableReason));
  MOCK_METHOD1(clear_disable_output_for_reason, void(DisableReason));
  MOCK_METHOD0(get_disable_output_reasons, uint8_t(void));
  MOCK_METHOD1(set_railcom_cutout_enabled, void(RailcomCutout));
};

namespace commandstation {
namespace {

class TrackPowerTest : public UpdateProcessorTest {
 protected:
  TrackPowerTest() {
    dcc_output_main = &mockMain_;
    dcc_output_lcc = &mockLcc_;
  }
  
  StrictMock<MockDccOutput> mockMain_;
  StrictMock<MockDccOutput> mockLcc_;
  TrackPowerState power_{node_,  //
                         openlcb::Defs::CLEAR_EMERGENCY_OFF_EVENT,
                         openlcb::Defs::EMERGENCY_OFF_EVENT,
                         openlcb::Defs::CLEAR_EMERGENCY_STOP_EVENT,
                         openlcb::Defs::EMERGENCY_STOP_EVENT};
  openlcb::BitEventConsumer powerC_{power_.get_power_bit()};
};

TEST_F(TrackPowerTest, create) {
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x04, dcc_from(0xFF, 0, 0xFF))));
  send_empty_packet();
  qwait();
}

TEST_F(TrackPowerTest, enable) {
  EXPECT_CALL(mockMain_, clear_disable_output_for_reason(DccOutput::DisableReason::GLOBAL_EOFF));
  EXPECT_CALL(mockLcc_, clear_disable_output_for_reason(DccOutput::DisableReason::GLOBAL_EOFF));
  send_packet(":X195B4123N010000000000FFFE;");
  wait();
}

TEST_F(TrackPowerTest, disable_no_packet) {
  send_packet(":X195B4123N010000000000FFFF;");
  wait();
  Mock::VerifyAndClear(&mockMain_);
  Mock::VerifyAndClear(&mockLcc_);
}

TEST_F(TrackPowerTest, disable_estop_packets) {
  EXPECT_CALL(trackSendQueue_, arrived(PacketIs(0x04, dcc_from(0xFF, 0, 0xFF))))
      .Times(4);
  for (int i = 0; i < 4; ++i) {
    send_empty_packet();
  }
  qwait();
  send_packet(":X195B4123N010000000000FFFF;");
  wait();
  Mock::VerifyAndClear(&mockMain_);
  Mock::VerifyAndClear(&mockLcc_);
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(0, 0b01100001, -2))))
      .Times(10);
  EXPECT_CALL(trackSendQueue_, arrived(PacketIs(0x66, dcc_from(0, 0, 0xC0))))
      .Times(10);
  for (int i = 0; i < 19; ++i) {
    send_empty_packet();
  }
  wait();
  EXPECT_CALL(mockMain_, disable_output_for_reason(DccOutput::DisableReason::GLOBAL_EOFF));
  EXPECT_CALL(mockLcc_, disable_output_for_reason(DccOutput::DisableReason::GLOBAL_EOFF));
  send_empty_packet();
  wait();
  Mock::VerifyAndClear(&mockMain_);
  Mock::VerifyAndClear(&mockLcc_);
  // after disabling dcc we are still getting estop packets.
  EXPECT_CALL(trackSendQueue_,
              arrived(PacketIs(0x4, dcc_from(0, 0b01100001, -2))))
      .Times(2);
  EXPECT_CALL(trackSendQueue_, arrived(PacketIs(0x66, dcc_from(0, 0, 0xC0))))
      .Times(2);
  for (int i = 0; i < 4; ++i) {
    send_empty_packet();
  }
  wait();

  // After reenable we'll get idle packets.
  EXPECT_CALL(mockMain_, clear_disable_output_for_reason(DccOutput::DisableReason::GLOBAL_EOFF));
  EXPECT_CALL(mockLcc_, clear_disable_output_for_reason(DccOutput::DisableReason::GLOBAL_EOFF));
  send_packet(":X195B4123N010000000000FFFE;");
  qwait();
  EXPECT_CALL(trackSendQueue_, arrived(PacketIs(0x04, dcc_from(0xFF, 0, 0xFF))))
      .Times(4);
  for (int i = 0; i < 4; ++i) {
    send_empty_packet();
  }
  qwait();
}

TEST_F(TrackPowerTest, query) {
  EXPECT_CALL(mockMain_, get_disable_output_reasons())
      .WillOnce(Return((uint8_t)0));
  send_packet_and_expect_response(":X198F4123N010000000000FFFF;",
                                  ":X194C522AN010000000000FFFF;");
  qwait();
  EXPECT_CALL(mockMain_, get_disable_output_reasons())
      .WillOnce(Return((uint8_t)DccOutput::DisableReason::SHORTED));
  send_packet_and_expect_response(":X198F4123N010000000000FFFE;",
                                  ":X194C422AN010000000000FFFE;");
  qwait();
  EXPECT_CALL(mockMain_, get_disable_output_reasons())
      .WillOnce(Return((uint8_t)DccOutput::DisableReason::GLOBAL_EOFF |
                       (uint8_t)DccOutput::DisableReason::SHORTED));
  send_packet_and_expect_response(":X198F4123N010000000000FFFF;",
                                  ":X194C422AN010000000000FFFF;");
  qwait();
  EXPECT_CALL(mockMain_, get_disable_output_reasons())
      .WillOnce(Return((uint8_t)DccOutput::DisableReason::GLOBAL_EOFF));
  send_packet_and_expect_response(":X198F4123N010000000000FFFE;",
                                  ":X194C522AN010000000000FFFE;");
  qwait();
}

}  // namespace
}  // namespace commandstation
