#include "utils/async_if_test_helper.hxx"
#include "commandstation/TrainDb.hxx"
#include "openlcb/ConfigUpdateFlow.hxx"

namespace openlcb {
void PrintTo(const openlcb::NodeID& id, std::ostream& o) {
  o << "Node ID 0x" << StringPrintf("%012" PRIx64, id);
}
}


CanHubFlow g_can_hub(&g_service);
openlcb::IfCan g_if_can(&g_executor, &can_hub0, 10, 10, 10);
openlcb::ConfigUpdateFlow cfgflow(&g_if_can);

namespace commandstation {


const struct const_traindb_entry_t const_lokdb[] = {
  // 0
  { 2 , { HEADLIGHT, 0, HORN, ANNOUNCE, MOMENTUM, },
    "ICE 2", DCC_128 }, // todo: check fnbits
  { 51, { HEADLIGHT, UNCOUPLE, SHUNTING_MODE, MOMENTUM, },
    "BR 260417", DCC_28 },  // ESU LokPilot 3.0
  { 0, {0,}, "", 0},
  //  { 0, {0, }, {0,}, "", 0},
  //{ 0, {0, }, {0,}, "", 0},
};

const size_t const_lokdb_size = sizeof(const_lokdb) / sizeof(const_lokdb[0]);


TEST(CdiTest, sizes) {
  EXPECT_EQ(77u, TrainDbCdiEntry::size());
}

TEST(TrainDbTest, getaddress) {
  TrainDb db;
  ASSERT_TRUE(db.is_train_id_known(1));
  EXPECT_EQ(0x060100000033ULL, db.get_entry(1)->get_traction_node());
}

TEST(TrainDbTest, isknown) {
  TrainDb db;
  EXPECT_TRUE(db.is_train_id_known(1));
  EXPECT_TRUE(db.is_train_id_known(0));
  EXPECT_FALSE(db.is_train_id_known(2));
  EXPECT_FALSE(db.is_train_id_known(150));
}

TEST(TrainDbTest, name) {
  TrainDb db;
  EXPECT_EQ("ICE 2", db.get_entry(0)->get_train_name());
  EXPECT_EQ("BR 260417", db.get_entry(1)->get_train_name());
}

TEST(TrainDbTest, fntype) {
  TrainDb db;
  ASSERT_TRUE(db.is_train_id_known(0));
  EXPECT_EQ(HEADLIGHT, db.get_entry(0)->get_function_label(0));
  EXPECT_EQ(FN_NONEXISTANT, db.get_entry(0)->get_function_label(1));
  EXPECT_EQ(HORN, db.get_entry(0)->get_function_label(2));
  EXPECT_EQ(ANNOUNCE, db.get_entry(0)->get_function_label(3));
  EXPECT_EQ(MOMENTUM, db.get_entry(0)->get_function_label(4));
  EXPECT_EQ(4, db.get_entry(0)->get_max_fn());
  EXPECT_EQ(FN_NONEXISTANT, db.get_entry(0)->get_function_label(5));
  EXPECT_EQ(FN_NONEXISTANT, db.get_entry(0)->get_function_label(6));
  EXPECT_EQ(FN_NONEXISTANT, db.get_entry(0)->get_function_label(7));
  EXPECT_EQ(FN_NONEXISTANT, db.get_entry(0)->get_function_label(23));
  EXPECT_EQ(FN_NONEXISTANT, db.get_entry(0)->get_function_label(150));

  EXPECT_EQ(3, db.get_entry(1)->get_max_fn());
  EXPECT_EQ(FN_NONEXISTANT, db.get_entry(1)->get_function_label(4));
}

}  // namespace commandstation
