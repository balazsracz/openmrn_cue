/** \copyright
 * Copyright (c) 2019, Balazs Racz
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are  permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \file Example.cxxtest
 *
 * Unit tests for the parser.
 *
 * @author Balazs Racz
 * @date 15 June 2019
 */

#include "utils/test_main.hxx"
#include "os/TempFile.hxx"
#include "logic/Driver.hxx"

TempDir g_dir;

TEST(ParserTest, ast_test) {
  TempFile tf(g_dir, "simple");
  tf.rewrite("int a; int b; a = 1 + 3 + 5\nb=22");
  logic::Driver d;
  EXPECT_EQ(0, d.parse_file(tf.name()));
  EXPECT_EQ("int a = 0;\nint b = 0;\nassign(a, plus(plus(1,3),5));\nassign(b, 22);\n", d.debug_print());
}

TEST(ParserTest, numeric_var_test) {
  TempFile tf(g_dir, "simple");
  tf.rewrite("int a; int b; a = 1\nb=a");
  logic::Driver d;
  EXPECT_EQ(0, d.parse_file(tf.name()));
  EXPECT_EQ("int a = 0;\nint b = 0;\nassign(a, 1);\nassign(b, fetch(a));\n", d.debug_print());
}

TEST(ParserTest, bool_constant_test) {
  TempFile tf(g_dir, "simple");
  tf.rewrite("bool a; a = Inactive");
  logic::Driver d;
  EXPECT_EQ(0, d.parse_file(tf.name()));
  EXPECT_EQ("bool a = false;\nboolassign(a, false);\n", d.debug_print());
}

TEST(ParserTest, indirect_var_error) {
  TempFile tf(g_dir, "simple");
  tf.rewrite("exported int a = 4");
  logic::Driver d;
  EXPECT_NE(0, d.parse_file(tf.name()));
}

TEST(ParserTest, indirect_var) {
  TempFile tf(g_dir, "simple");
  tf.rewrite("exported int a;");
  logic::Driver d;
  EXPECT_EQ(0, d.parse_file(tf.name()));
}
