// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: train_control.proto

#include "train_control.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LokStateProto_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LokStateProto_Function_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<18> scc_info_TrainControlRequest_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoChangeSavedState_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoDropState_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoEStopLoco_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoGetLokDb_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoGetLokState_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoGetOrSetAddress_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoGetOrSetCV_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoPicMisc_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoPing_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoReflashAutomata_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoReflashPic_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoRpc_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoSendRawCanPacket_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoSetAccessory_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoSetEmergencyStop_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoSetSpeed_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoWaitForChange_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_TrainControlResponse_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_Accessory_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_CurrentAddress_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_Cv_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_EmergencyStop_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrainControlResponse_LokDb_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrainControlResponse_LokDb_Lok_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_LokDb_Lok_Function_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_PicMisc_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_Pong_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_RawCanPacket_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_ReflashAutomata_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_ReflashPic_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_RpcResponse_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_Speed_train_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_train_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_WaitForChangeResponse_train_5fcontrol_2eproto;
namespace server {
class LokStateProto_FunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LokStateProto_Function> _instance;
} _LokStateProto_Function_default_instance_;
class LokStateProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LokStateProto> _instance;
} _LokStateProto_default_instance_;
class TrainControlRequest_DoSetSpeedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlRequest_DoSetSpeed> _instance;
} _TrainControlRequest_DoSetSpeed_default_instance_;
class TrainControlRequest_DoSetAccessoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlRequest_DoSetAccessory> _instance;
} _TrainControlRequest_DoSetAccessory_default_instance_;
class TrainControlRequest_DoSetEmergencyStopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlRequest_DoSetEmergencyStop> _instance;
} _TrainControlRequest_DoSetEmergencyStop_default_instance_;
class TrainControlRequest_DoRpcDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlRequest_DoRpc> _instance;
} _TrainControlRequest_DoRpc_default_instance_;
class TrainControlRequest_DoPingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlRequest_DoPing> _instance;
} _TrainControlRequest_DoPing_default_instance_;
class TrainControlRequest_DoGetOrSetAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlRequest_DoGetOrSetAddress> _instance;
} _TrainControlRequest_DoGetOrSetAddress_default_instance_;
class TrainControlRequest_DoDropStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlRequest_DoDropState> _instance;
} _TrainControlRequest_DoDropState_default_instance_;
class TrainControlRequest_DoChangeSavedStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlRequest_DoChangeSavedState> _instance;
} _TrainControlRequest_DoChangeSavedState_default_instance_;
class TrainControlRequest_DoSendRawCanPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlRequest_DoSendRawCanPacket> _instance;
} _TrainControlRequest_DoSendRawCanPacket_default_instance_;
class TrainControlRequest_DoReflashAutomataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlRequest_DoReflashAutomata> _instance;
} _TrainControlRequest_DoReflashAutomata_default_instance_;
class TrainControlRequest_DoGetLokDbDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlRequest_DoGetLokDb> _instance;
} _TrainControlRequest_DoGetLokDb_default_instance_;
class TrainControlRequest_DoGetLokStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlRequest_DoGetLokState> _instance;
} _TrainControlRequest_DoGetLokState_default_instance_;
class TrainControlRequest_DoEStopLocoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlRequest_DoEStopLoco> _instance;
} _TrainControlRequest_DoEStopLoco_default_instance_;
class TrainControlRequest_DoPicMiscDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlRequest_DoPicMisc> _instance;
} _TrainControlRequest_DoPicMisc_default_instance_;
class TrainControlRequest_DoReflashPicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlRequest_DoReflashPic> _instance;
} _TrainControlRequest_DoReflashPic_default_instance_;
class TrainControlRequest_DoGetOrSetCVDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlRequest_DoGetOrSetCV> _instance;
} _TrainControlRequest_DoGetOrSetCV_default_instance_;
class TrainControlRequest_DoWaitForChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlRequest_DoWaitForChange> _instance;
} _TrainControlRequest_DoWaitForChange_default_instance_;
class TrainControlRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlRequest> _instance;
} _TrainControlRequest_default_instance_;
class TrainControlResponse_SpeedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlResponse_Speed> _instance;
} _TrainControlResponse_Speed_default_instance_;
class TrainControlResponse_AccessoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlResponse_Accessory> _instance;
} _TrainControlResponse_Accessory_default_instance_;
class TrainControlResponse_EmergencyStopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlResponse_EmergencyStop> _instance;
} _TrainControlResponse_EmergencyStop_default_instance_;
class TrainControlResponse_RpcResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlResponse_RpcResponse> _instance;
} _TrainControlResponse_RpcResponse_default_instance_;
class TrainControlResponse_PongDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlResponse_Pong> _instance;
} _TrainControlResponse_Pong_default_instance_;
class TrainControlResponse_CurrentAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlResponse_CurrentAddress> _instance;
} _TrainControlResponse_CurrentAddress_default_instance_;
class TrainControlResponse_RawCanPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlResponse_RawCanPacket> _instance;
} _TrainControlResponse_RawCanPacket_default_instance_;
class TrainControlResponse_ReflashAutomataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlResponse_ReflashAutomata> _instance;
} _TrainControlResponse_ReflashAutomata_default_instance_;
class TrainControlResponse_LokDb_Lok_FunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlResponse_LokDb_Lok_Function> _instance;
} _TrainControlResponse_LokDb_Lok_Function_default_instance_;
class TrainControlResponse_LokDb_LokDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlResponse_LokDb_Lok> _instance;
} _TrainControlResponse_LokDb_Lok_default_instance_;
class TrainControlResponse_LokDbDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlResponse_LokDb> _instance;
} _TrainControlResponse_LokDb_default_instance_;
class TrainControlResponse_PicMiscDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlResponse_PicMisc> _instance;
} _TrainControlResponse_PicMisc_default_instance_;
class TrainControlResponse_ReflashPicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlResponse_ReflashPic> _instance;
} _TrainControlResponse_ReflashPic_default_instance_;
class TrainControlResponse_CvDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlResponse_Cv> _instance;
} _TrainControlResponse_Cv_default_instance_;
class TrainControlResponse_WaitForChangeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlResponse_WaitForChangeResponse> _instance;
} _TrainControlResponse_WaitForChangeResponse_default_instance_;
class TrainControlResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainControlResponse> _instance;
} _TrainControlResponse_default_instance_;
class TinyRpcRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TinyRpcRequest> _instance;
} _TinyRpcRequest_default_instance_;
class TinyRpcResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TinyRpcResponse> _instance;
} _TinyRpcResponse_default_instance_;
}  // namespace server
static void InitDefaultsscc_info_LokStateProto_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_LokStateProto_default_instance_;
    new (ptr) ::server::LokStateProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::LokStateProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LokStateProto_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LokStateProto_train_5fcontrol_2eproto}, {
      &scc_info_LokStateProto_Function_train_5fcontrol_2eproto.base,}};

static void InitDefaultsscc_info_LokStateProto_Function_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_LokStateProto_Function_default_instance_;
    new (ptr) ::server::LokStateProto_Function();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::LokStateProto_Function::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LokStateProto_Function_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LokStateProto_Function_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TinyRpcRequest_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TinyRpcRequest_default_instance_;
    new (ptr) ::server::TinyRpcRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TinyRpcRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TinyRpcRequest_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TinyRpcRequest_train_5fcontrol_2eproto}, {
      &scc_info_TrainControlRequest_train_5fcontrol_2eproto.base,}};

static void InitDefaultsscc_info_TinyRpcResponse_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TinyRpcResponse_default_instance_;
    new (ptr) ::server::TinyRpcResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TinyRpcResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TinyRpcResponse_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TinyRpcResponse_train_5fcontrol_2eproto}, {
      &scc_info_TrainControlResponse_train_5fcontrol_2eproto.base,}};

static void InitDefaultsscc_info_TrainControlRequest_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlRequest_default_instance_;
    new (ptr) ::server::TrainControlRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<18> scc_info_TrainControlRequest_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 18, 0, InitDefaultsscc_info_TrainControlRequest_train_5fcontrol_2eproto}, {
      &scc_info_TrainControlRequest_DoSetSpeed_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlRequest_DoSetAccessory_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlRequest_DoSetEmergencyStop_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlRequest_DoRpc_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlRequest_DoPing_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlRequest_DoGetOrSetAddress_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlRequest_DoDropState_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlRequest_DoChangeSavedState_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlRequest_DoSendRawCanPacket_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlRequest_DoReflashAutomata_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlRequest_DoGetLokDb_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlRequest_DoGetLokState_train_5fcontrol_2eproto.base,
      &scc_info_LokStateProto_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlRequest_DoEStopLoco_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlRequest_DoPicMisc_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlRequest_DoReflashPic_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlRequest_DoGetOrSetCV_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlRequest_DoWaitForChange_train_5fcontrol_2eproto.base,}};

static void InitDefaultsscc_info_TrainControlRequest_DoChangeSavedState_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlRequest_DoChangeSavedState_default_instance_;
    new (ptr) ::server::TrainControlRequest_DoChangeSavedState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlRequest_DoChangeSavedState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoChangeSavedState_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlRequest_DoChangeSavedState_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlRequest_DoDropState_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlRequest_DoDropState_default_instance_;
    new (ptr) ::server::TrainControlRequest_DoDropState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlRequest_DoDropState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoDropState_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlRequest_DoDropState_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlRequest_DoEStopLoco_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlRequest_DoEStopLoco_default_instance_;
    new (ptr) ::server::TrainControlRequest_DoEStopLoco();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlRequest_DoEStopLoco::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoEStopLoco_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlRequest_DoEStopLoco_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlRequest_DoGetLokDb_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlRequest_DoGetLokDb_default_instance_;
    new (ptr) ::server::TrainControlRequest_DoGetLokDb();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlRequest_DoGetLokDb::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoGetLokDb_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlRequest_DoGetLokDb_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlRequest_DoGetLokState_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlRequest_DoGetLokState_default_instance_;
    new (ptr) ::server::TrainControlRequest_DoGetLokState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlRequest_DoGetLokState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoGetLokState_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlRequest_DoGetLokState_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlRequest_DoGetOrSetAddress_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlRequest_DoGetOrSetAddress_default_instance_;
    new (ptr) ::server::TrainControlRequest_DoGetOrSetAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlRequest_DoGetOrSetAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoGetOrSetAddress_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlRequest_DoGetOrSetAddress_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlRequest_DoGetOrSetCV_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlRequest_DoGetOrSetCV_default_instance_;
    new (ptr) ::server::TrainControlRequest_DoGetOrSetCV();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlRequest_DoGetOrSetCV::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoGetOrSetCV_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlRequest_DoGetOrSetCV_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlRequest_DoPicMisc_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlRequest_DoPicMisc_default_instance_;
    new (ptr) ::server::TrainControlRequest_DoPicMisc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlRequest_DoPicMisc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoPicMisc_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlRequest_DoPicMisc_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlRequest_DoPing_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlRequest_DoPing_default_instance_;
    new (ptr) ::server::TrainControlRequest_DoPing();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlRequest_DoPing::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoPing_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlRequest_DoPing_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlRequest_DoReflashAutomata_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlRequest_DoReflashAutomata_default_instance_;
    new (ptr) ::server::TrainControlRequest_DoReflashAutomata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlRequest_DoReflashAutomata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoReflashAutomata_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlRequest_DoReflashAutomata_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlRequest_DoReflashPic_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlRequest_DoReflashPic_default_instance_;
    new (ptr) ::server::TrainControlRequest_DoReflashPic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlRequest_DoReflashPic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoReflashPic_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlRequest_DoReflashPic_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlRequest_DoRpc_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlRequest_DoRpc_default_instance_;
    new (ptr) ::server::TrainControlRequest_DoRpc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlRequest_DoRpc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoRpc_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlRequest_DoRpc_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlRequest_DoSendRawCanPacket_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlRequest_DoSendRawCanPacket_default_instance_;
    new (ptr) ::server::TrainControlRequest_DoSendRawCanPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlRequest_DoSendRawCanPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoSendRawCanPacket_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlRequest_DoSendRawCanPacket_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlRequest_DoSetAccessory_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlRequest_DoSetAccessory_default_instance_;
    new (ptr) ::server::TrainControlRequest_DoSetAccessory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlRequest_DoSetAccessory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoSetAccessory_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlRequest_DoSetAccessory_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlRequest_DoSetEmergencyStop_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlRequest_DoSetEmergencyStop_default_instance_;
    new (ptr) ::server::TrainControlRequest_DoSetEmergencyStop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlRequest_DoSetEmergencyStop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoSetEmergencyStop_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlRequest_DoSetEmergencyStop_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlRequest_DoSetSpeed_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlRequest_DoSetSpeed_default_instance_;
    new (ptr) ::server::TrainControlRequest_DoSetSpeed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlRequest_DoSetSpeed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoSetSpeed_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlRequest_DoSetSpeed_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlRequest_DoWaitForChange_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlRequest_DoWaitForChange_default_instance_;
    new (ptr) ::server::TrainControlRequest_DoWaitForChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlRequest_DoWaitForChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlRequest_DoWaitForChange_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlRequest_DoWaitForChange_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlResponse_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlResponse_default_instance_;
    new (ptr) ::server::TrainControlResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_TrainControlResponse_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 14, 0, InitDefaultsscc_info_TrainControlResponse_train_5fcontrol_2eproto}, {
      &scc_info_TrainControlResponse_Speed_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlResponse_Accessory_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlResponse_EmergencyStop_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlResponse_RpcResponse_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlResponse_Pong_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlResponse_CurrentAddress_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlResponse_RawCanPacket_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlResponse_ReflashAutomata_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlResponse_LokDb_train_5fcontrol_2eproto.base,
      &scc_info_LokStateProto_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlResponse_PicMisc_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlResponse_ReflashPic_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlResponse_Cv_train_5fcontrol_2eproto.base,
      &scc_info_TrainControlResponse_WaitForChangeResponse_train_5fcontrol_2eproto.base,}};

static void InitDefaultsscc_info_TrainControlResponse_Accessory_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlResponse_Accessory_default_instance_;
    new (ptr) ::server::TrainControlResponse_Accessory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlResponse_Accessory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_Accessory_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlResponse_Accessory_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlResponse_CurrentAddress_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlResponse_CurrentAddress_default_instance_;
    new (ptr) ::server::TrainControlResponse_CurrentAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlResponse_CurrentAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_CurrentAddress_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlResponse_CurrentAddress_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlResponse_Cv_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlResponse_Cv_default_instance_;
    new (ptr) ::server::TrainControlResponse_Cv();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlResponse_Cv::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_Cv_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlResponse_Cv_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlResponse_EmergencyStop_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlResponse_EmergencyStop_default_instance_;
    new (ptr) ::server::TrainControlResponse_EmergencyStop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlResponse_EmergencyStop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_EmergencyStop_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlResponse_EmergencyStop_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlResponse_LokDb_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlResponse_LokDb_default_instance_;
    new (ptr) ::server::TrainControlResponse_LokDb();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlResponse_LokDb::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrainControlResponse_LokDb_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrainControlResponse_LokDb_train_5fcontrol_2eproto}, {
      &scc_info_TrainControlResponse_LokDb_Lok_train_5fcontrol_2eproto.base,}};

static void InitDefaultsscc_info_TrainControlResponse_LokDb_Lok_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlResponse_LokDb_Lok_default_instance_;
    new (ptr) ::server::TrainControlResponse_LokDb_Lok();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlResponse_LokDb_Lok::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrainControlResponse_LokDb_Lok_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrainControlResponse_LokDb_Lok_train_5fcontrol_2eproto}, {
      &scc_info_TrainControlResponse_LokDb_Lok_Function_train_5fcontrol_2eproto.base,}};

static void InitDefaultsscc_info_TrainControlResponse_LokDb_Lok_Function_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlResponse_LokDb_Lok_Function_default_instance_;
    new (ptr) ::server::TrainControlResponse_LokDb_Lok_Function();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlResponse_LokDb_Lok_Function::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_LokDb_Lok_Function_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlResponse_LokDb_Lok_Function_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlResponse_PicMisc_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlResponse_PicMisc_default_instance_;
    new (ptr) ::server::TrainControlResponse_PicMisc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlResponse_PicMisc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_PicMisc_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlResponse_PicMisc_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlResponse_Pong_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlResponse_Pong_default_instance_;
    new (ptr) ::server::TrainControlResponse_Pong();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlResponse_Pong::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_Pong_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlResponse_Pong_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlResponse_RawCanPacket_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlResponse_RawCanPacket_default_instance_;
    new (ptr) ::server::TrainControlResponse_RawCanPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlResponse_RawCanPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_RawCanPacket_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlResponse_RawCanPacket_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlResponse_ReflashAutomata_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlResponse_ReflashAutomata_default_instance_;
    new (ptr) ::server::TrainControlResponse_ReflashAutomata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlResponse_ReflashAutomata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_ReflashAutomata_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlResponse_ReflashAutomata_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlResponse_ReflashPic_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlResponse_ReflashPic_default_instance_;
    new (ptr) ::server::TrainControlResponse_ReflashPic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlResponse_ReflashPic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_ReflashPic_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlResponse_ReflashPic_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlResponse_RpcResponse_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlResponse_RpcResponse_default_instance_;
    new (ptr) ::server::TrainControlResponse_RpcResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlResponse_RpcResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_RpcResponse_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlResponse_RpcResponse_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlResponse_Speed_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlResponse_Speed_default_instance_;
    new (ptr) ::server::TrainControlResponse_Speed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlResponse_Speed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_Speed_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlResponse_Speed_train_5fcontrol_2eproto}, {}};

static void InitDefaultsscc_info_TrainControlResponse_WaitForChangeResponse_train_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_TrainControlResponse_WaitForChangeResponse_default_instance_;
    new (ptr) ::server::TrainControlResponse_WaitForChangeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::TrainControlResponse_WaitForChangeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainControlResponse_WaitForChangeResponse_train_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainControlResponse_WaitForChangeResponse_train_5fcontrol_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_train_5fcontrol_2eproto[38];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_train_5fcontrol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_train_5fcontrol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_train_5fcontrol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::server::LokStateProto_Function, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::LokStateProto_Function, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::LokStateProto_Function, id_),
  PROTOBUF_FIELD_OFFSET(::server::LokStateProto_Function, value_),
  PROTOBUF_FIELD_OFFSET(::server::LokStateProto_Function, ts_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::server::LokStateProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::LokStateProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::LokStateProto, id_),
  PROTOBUF_FIELD_OFFSET(::server::LokStateProto, dir_),
  PROTOBUF_FIELD_OFFSET(::server::LokStateProto, speed_),
  PROTOBUF_FIELD_OFFSET(::server::LokStateProto, speed_ts_),
  PROTOBUF_FIELD_OFFSET(::server::LokStateProto, function_),
  PROTOBUF_FIELD_OFFSET(::server::LokStateProto, ts_),
  0,
  4,
  1,
  3,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoSetSpeed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoSetSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoSetSpeed, id_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoSetSpeed, dir_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoSetSpeed, speed_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoSetAccessory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoSetAccessory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoSetAccessory, train_id_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoSetAccessory, accessory_id_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoSetAccessory, value_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoSetEmergencyStop, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoSetEmergencyStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoSetEmergencyStop, stop_),
  0,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoRpc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoRpc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoRpc, destination_address_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoRpc, command_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoRpc, arg1_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoRpc, arg2_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoRpc, payload_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoPing, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoGetOrSetAddress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoGetOrSetAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoGetOrSetAddress, new_address_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoDropState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoChangeSavedState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoChangeSavedState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoChangeSavedState, client_id_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoChangeSavedState, offset_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoChangeSavedState, new_value_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoChangeSavedState, bits_to_set_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoChangeSavedState, bits_to_clear_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoSendRawCanPacket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoSendRawCanPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoSendRawCanPacket, wait_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoSendRawCanPacket, d_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoSendRawCanPacket, data_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoReflashAutomata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoReflashAutomata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoReflashAutomata, destination_address_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoReflashAutomata, signal_address_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoReflashAutomata, offset_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoReflashAutomata, data_),
  0,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoGetLokDb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoGetLokState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoGetLokState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoGetLokState, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoEStopLoco, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoEStopLoco, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoEStopLoco, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoPicMisc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoPicMisc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoPicMisc, cmd_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoPicMisc, arg_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoReflashPic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoReflashPic, data_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoGetOrSetCV, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoGetOrSetCV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoGetOrSetCV, train_id_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoGetOrSetCV, cv_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoGetOrSetCV, value_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoWaitForChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoWaitForChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoWaitForChange, timestamp_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest_DoWaitForChange, id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest, dosetspeed_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest, dosetaccessory_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest, dosetemergencystop_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest, dorpc_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest, doping_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest, dogetorsetaddress_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest, dodropstate_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest, dochangesavedstate_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest, dosendrawcanpacket_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest, doreflashautomata_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest, dogetlokdb_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest, dogetlokstate_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest, dosetlokstate_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest, doestoploco_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest, dopicmisc_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest, doreflashpic_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest, dogetorsetcv_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlRequest, dowaitforchange_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_Speed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_Speed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_Speed, id_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_Speed, dir_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_Speed, speed_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_Speed, timestamp_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_Accessory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_Accessory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_Accessory, train_id_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_Accessory, accessory_id_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_Accessory, value_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_Accessory, timestamp_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_EmergencyStop, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_EmergencyStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_EmergencyStop, stop_),
  0,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_RpcResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_RpcResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_RpcResponse, success_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_RpcResponse, response_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_Pong, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_Pong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_Pong, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_CurrentAddress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_CurrentAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_CurrentAddress, address_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_RawCanPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_RawCanPacket, data_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_ReflashAutomata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_ReflashAutomata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_ReflashAutomata, error_),
  0,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_LokDb_Lok_Function, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_LokDb_Lok_Function, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_LokDb_Lok_Function, id_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_LokDb_Lok_Function, type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_LokDb_Lok, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_LokDb_Lok, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_LokDb_Lok, id_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_LokDb_Lok, name_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_LokDb_Lok, address_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_LokDb_Lok, function_),
  1,
  0,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_LokDb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_LokDb, lok_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_PicMisc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_PicMisc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_PicMisc, cmd_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_PicMisc, status_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_PicMisc, arg1_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_PicMisc, arg2_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_PicMisc, more_arg_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_ReflashPic, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_ReflashPic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_ReflashPic, error_),
  0,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_Cv, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_Cv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_Cv, train_id_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_Cv, cv_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_Cv, error_code_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_Cv, value_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_WaitForChangeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_WaitForChangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_WaitForChangeResponse, timestamp_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse_WaitForChangeResponse, id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse, speed_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse, accessory_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse, emergencystop_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse, rpcresponse_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse, pong_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse, currentaddress_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse, rawcanpacket_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse, reflashautomata_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse, lokdb_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse, lokstate_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse, picmisc_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse, reflashpic_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse, cv_),
  PROTOBUF_FIELD_OFFSET(::server::TrainControlResponse, waitforchangeresponse_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::server::TinyRpcRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TinyRpcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TinyRpcRequest, id_),
  PROTOBUF_FIELD_OFFSET(::server::TinyRpcRequest, request_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::server::TinyRpcResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server::TinyRpcResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server::TinyRpcResponse, id_),
  PROTOBUF_FIELD_OFFSET(::server::TinyRpcResponse, response_),
  PROTOBUF_FIELD_OFFSET(::server::TinyRpcResponse, failed_),
  PROTOBUF_FIELD_OFFSET(::server::TinyRpcResponse, error_detail_),
  2,
  1,
  3,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::server::LokStateProto_Function)},
  { 11, 22, sizeof(::server::LokStateProto)},
  { 28, 36, sizeof(::server::TrainControlRequest_DoSetSpeed)},
  { 39, 47, sizeof(::server::TrainControlRequest_DoSetAccessory)},
  { 50, 56, sizeof(::server::TrainControlRequest_DoSetEmergencyStop)},
  { 57, 67, sizeof(::server::TrainControlRequest_DoRpc)},
  { 72, 78, sizeof(::server::TrainControlRequest_DoPing)},
  { 79, 85, sizeof(::server::TrainControlRequest_DoGetOrSetAddress)},
  { 86, -1, sizeof(::server::TrainControlRequest_DoDropState)},
  { 91, 101, sizeof(::server::TrainControlRequest_DoChangeSavedState)},
  { 106, 114, sizeof(::server::TrainControlRequest_DoSendRawCanPacket)},
  { 117, 126, sizeof(::server::TrainControlRequest_DoReflashAutomata)},
  { 130, -1, sizeof(::server::TrainControlRequest_DoGetLokDb)},
  { 135, 141, sizeof(::server::TrainControlRequest_DoGetLokState)},
  { 142, 148, sizeof(::server::TrainControlRequest_DoEStopLoco)},
  { 149, 156, sizeof(::server::TrainControlRequest_DoPicMisc)},
  { 158, -1, sizeof(::server::TrainControlRequest_DoReflashPic)},
  { 164, 172, sizeof(::server::TrainControlRequest_DoGetOrSetCV)},
  { 175, 182, sizeof(::server::TrainControlRequest_DoWaitForChange)},
  { 184, 207, sizeof(::server::TrainControlRequest)},
  { 225, 234, sizeof(::server::TrainControlResponse_Speed)},
  { 238, 247, sizeof(::server::TrainControlResponse_Accessory)},
  { 251, 257, sizeof(::server::TrainControlResponse_EmergencyStop)},
  { 258, 265, sizeof(::server::TrainControlResponse_RpcResponse)},
  { 267, 273, sizeof(::server::TrainControlResponse_Pong)},
  { 274, 280, sizeof(::server::TrainControlResponse_CurrentAddress)},
  { 281, -1, sizeof(::server::TrainControlResponse_RawCanPacket)},
  { 287, 293, sizeof(::server::TrainControlResponse_ReflashAutomata)},
  { 294, 301, sizeof(::server::TrainControlResponse_LokDb_Lok_Function)},
  { 303, 312, sizeof(::server::TrainControlResponse_LokDb_Lok)},
  { 316, -1, sizeof(::server::TrainControlResponse_LokDb)},
  { 322, 332, sizeof(::server::TrainControlResponse_PicMisc)},
  { 337, 343, sizeof(::server::TrainControlResponse_ReflashPic)},
  { 344, 353, sizeof(::server::TrainControlResponse_Cv)},
  { 357, 364, sizeof(::server::TrainControlResponse_WaitForChangeResponse)},
  { 366, 385, sizeof(::server::TrainControlResponse)},
  { 399, 406, sizeof(::server::TinyRpcRequest)},
  { 408, 417, sizeof(::server::TinyRpcResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_LokStateProto_Function_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_LokStateProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlRequest_DoSetSpeed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlRequest_DoSetAccessory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlRequest_DoSetEmergencyStop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlRequest_DoRpc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlRequest_DoPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlRequest_DoGetOrSetAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlRequest_DoDropState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlRequest_DoChangeSavedState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlRequest_DoSendRawCanPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlRequest_DoReflashAutomata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlRequest_DoGetLokDb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlRequest_DoGetLokState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlRequest_DoEStopLoco_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlRequest_DoPicMisc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlRequest_DoReflashPic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlRequest_DoGetOrSetCV_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlRequest_DoWaitForChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlResponse_Speed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlResponse_Accessory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlResponse_EmergencyStop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlResponse_RpcResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlResponse_Pong_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlResponse_CurrentAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlResponse_RawCanPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlResponse_ReflashAutomata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlResponse_LokDb_Lok_Function_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlResponse_LokDb_Lok_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlResponse_LokDb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlResponse_PicMisc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlResponse_ReflashPic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlResponse_Cv_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlResponse_WaitForChangeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TrainControlResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TinyRpcRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server::_TinyRpcResponse_default_instance_),
};

const char descriptor_table_protodef_train_5fcontrol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023train_control.proto\022\006server\"\275\001\n\rLokSta"
  "teProto\022\n\n\002id\030\001 \002(\005\022\016\n\003dir\030\002 \001(\005:\0011\022\r\n\005s"
  "peed\030\003 \001(\005\022\020\n\010speed_ts\030\t \001(\003\0220\n\010function"
  "\030\004 \003(\n2\036.server.LokStateProto.Function\022\n"
  "\n\002ts\030\007 \001(\003\0321\n\010Function\022\n\n\002id\030\005 \002(\005\022\r\n\005va"
  "lue\030\006 \001(\005\022\n\n\002ts\030\010 \001(\003\"\250\020\n\023TrainControlRe"
  "quest\022:\n\ndosetspeed\030\001 \001(\n2&.server.Train"
  "ControlRequest.DoSetSpeed\022B\n\016dosetaccess"
  "ory\030\004 \001(\n2*.server.TrainControlRequest.D"
  "oSetAccessory\022J\n\022dosetemergencystop\030\010 \001("
  "\n2..server.TrainControlRequest.DoSetEmer"
  "gencyStop\0220\n\005dorpc\030\020 \001(\n2!.server.TrainC"
  "ontrolRequest.DoRpc\0222\n\006doping\030\025 \001(\n2\".se"
  "rver.TrainControlRequest.DoPing\022H\n\021doget"
  "orsetaddress\030\027 \001(\n2-.server.TrainControl"
  "Request.DoGetOrSetAddress\022<\n\013dodropstate"
  "\030\031 \001(\n2\'.server.TrainControlRequest.DoDr"
  "opState\022J\n\022dochangesavedstate\030\032 \001(\n2..se"
  "rver.TrainControlRequest.DoChangeSavedSt"
  "ate\022J\n\022dosendrawcanpacket\030  \001(\n2..server"
  ".TrainControlRequest.DoSendRawCanPacket\022"
  "H\n\021doreflashautomata\030( \001(\n2-.server.Trai"
  "nControlRequest.DoReflashAutomata\022:\n\ndog"
  "etlokdb\030) \001(\n2&.server.TrainControlReque"
  "st.DoGetLokDb\022@\n\rdogetlokstate\030* \001(\n2).s"
  "erver.TrainControlRequest.DoGetLokState\022"
  ",\n\rDoSetLokState\030, \001(\0132\025.server.LokState"
  "Proto\022<\n\013doestoploco\030- \001(\n2\'.server.Trai"
  "nControlRequest.DoEStopLoco\0228\n\tdopicmisc"
  "\030/ \001(\n2%.server.TrainControlRequest.DoPi"
  "cMisc\022>\n\014doreflashpic\0302 \001(\n2(.server.Tra"
  "inControlRequest.DoReflashPic\022>\n\014dogetor"
  "setcv\0304 \001(\n2(.server.TrainControlRequest"
  ".DoGetOrSetCV\022D\n\017dowaitforchange\0308 \001(\n2+"
  ".server.TrainControlRequest.DoWaitForCha"
  "nge\0327\n\nDoSetSpeed\022\n\n\002id\030\002 \002(\005\022\016\n\003dir\030$ \001"
  "(\005:\0011\022\r\n\005speed\030\003 \001(\005\032G\n\016DoSetAccessory\022\020"
  "\n\010train_id\030\005 \002(\005\022\024\n\014accessory_id\030\006 \002(\005\022\r"
  "\n\005value\030\007 \001(\005\032\"\n\022DoSetEmergencyStop\022\014\n\004s"
  "top\030\t \001(\010\032b\n\005DoRpc\022\033\n\023destination_addres"
  "s\030\021 \002(\005\022\017\n\007command\030\022 \002(\005\022\014\n\004arg1\030\023 \002(\005\022\014"
  "\n\004arg2\030\024 \002(\005\022\017\n\007payload\030< \003(\005\032\032\n\006DoPing\022"
  "\020\n\005value\030\026 \001(\005:\0010\032(\n\021DoGetOrSetAddress\022\023"
  "\n\013new_address\030\030 \001(\005\032\r\n\013DoDropState\032|\n\022Do"
  "ChangeSavedState\022\021\n\tclient_id\030\033 \002(\005\022\016\n\006o"
  "ffset\030\034 \002(\005\022\021\n\tnew_value\030\035 \001(\005\022\026\n\013bits_t"
  "o_set\030\036 \001(\005:\0010\022\030\n\rbits_to_clear\030\037 \001(\005:\0010"
  "\032B\n\022DoSendRawCanPacket\022\023\n\004wait\030! \001(\010:\005fa"
  "lse\022\t\n\001d\030\" \003(\005\022\014\n\004data\030# \001(\t\032l\n\021DoReflas"
  "hAutomata\022\033\n\023destination_address\030% \002(\005\022\026"
  "\n\016signal_address\030= \001(\005\022\024\n\006offset\030& \001(\005:\004"
  "3328\022\014\n\004data\030\' \003(\005\032\014\n\nDoGetLokDb\032\033\n\rDoGe"
  "tLokState\022\n\n\002id\030+ \001(\005\032\031\n\013DoEStopLoco\022\n\n\002"
  "id\030. \002(\005\032%\n\tDoPicMisc\022\013\n\003cmd\0300 \002(\005\022\013\n\003ar"
  "g\0301 \003(\005\032\034\n\014DoReflashPic\022\014\n\004data\0303 \003(\005\032\?\n"
  "\014DoGetOrSetCV\022\024\n\010train_id\0305 \001(\005:\00263\022\n\n\002c"
  "v\0306 \002(\005\022\r\n\005value\0307 \001(\005\0320\n\017DoWaitForChang"
  "e\022\021\n\ttimestamp\0309 \002(\004\022\n\n\002id\030: \001(\005\"\212\r\n\024Tra"
  "inControlResponse\0221\n\005speed\030\001 \001(\n2\".serve"
  "r.TrainControlResponse.Speed\0229\n\taccessor"
  "y\030\004 \001(\n2&.server.TrainControlResponse.Ac"
  "cessory\022A\n\remergencystop\030\010 \001(\n2*.server."
  "TrainControlResponse.EmergencyStop\022=\n\013rp"
  "cresponse\030\020 \001(\n2(.server.TrainControlRes"
  "ponse.RpcResponse\022/\n\004pong\030\023 \001(\n2!.server"
  ".TrainControlResponse.Pong\022C\n\016currentadd"
  "ress\030\025 \001(\n2+.server.TrainControlResponse"
  ".CurrentAddress\022\?\n\014rawcanpacket\030\027 \001(\n2)."
  "server.TrainControlResponse.RawCanPacket"
  "\022E\n\017reflashautomata\030\033 \001(\n2,.server.Train"
  "ControlResponse.ReflashAutomata\0221\n\005lokdb"
  "\030\034 \001(\n2\".server.TrainControlResponse.Lok"
  "Db\022\'\n\010lokstate\030$ \003(\0132\025.server.LokStatePr"
  "oto\0225\n\007picmisc\030% \001(\n2$.server.TrainContr"
  "olResponse.PicMisc\022;\n\nreflashpic\030+ \001(\n2\'"
  ".server.TrainControlResponse.ReflashPic\022"
  "+\n\002cv\030- \001(\n2\037.server.TrainControlRespons"
  "e.Cv\022Q\n\025waitforchangeresponse\0304 \001(\n22.se"
  "rver.TrainControlResponse.WaitForChangeR"
  "esponse\032E\n\005Speed\022\n\n\002id\030\002 \002(\005\022\016\n\003dir\030\031 \001("
  "\005:\0011\022\r\n\005speed\030\003 \002(\005\022\021\n\ttimestamp\0302 \001(\004\032U"
  "\n\tAccessory\022\020\n\010train_id\030\005 \002(\005\022\024\n\014accesso"
  "ry_id\030\006 \002(\005\022\r\n\005value\030\007 \002(\005\022\021\n\ttimestamp\030"
  "3 \001(\004\032\035\n\rEmergencyStop\022\014\n\004stop\030\t \002(\010\0320\n\013"
  "RpcResponse\022\017\n\007success\030\021 \002(\010\022\020\n\010response"
  "\030\022 \002(\005\032\025\n\004Pong\022\r\n\005value\030\024 \002(\005\032!\n\016Current"
  "Address\022\017\n\007address\030\026 \002(\005\032\034\n\014RawCanPacket"
  "\022\014\n\004data\030\030 \003(\005\032 \n\017ReflashAutomata\022\r\n\005err"
  "or\030\032 \001(\t\032\330\001\n\005LokDb\0223\n\003lok\030\035 \003(\n2&.server"
  ".TrainControlResponse.LokDb.Lok\032\231\001\n\003Lok\022"
  "\n\n\002id\030\036 \002(\005\022\014\n\004name\030\037 \001(\t\022\017\n\007address\030  \001"
  "(\005\022A\n\010function\030! \003(\n2/.server.TrainContr"
  "olResponse.LokDb.Lok.Function\032$\n\010Functio"
  "n\022\n\n\002id\030\" \002(\005\022\014\n\004type\030# \001(\005\032T\n\007PicMisc\022\013"
  "\n\003cmd\030& \002(\005\022\016\n\006status\030\' \002(\005\022\014\n\004arg1\030( \002("
  "\005\022\014\n\004arg2\030) \002(\005\022\020\n\010more_arg\030* \003(\005\032\033\n\nRef"
  "lashPic\022\r\n\005error\030, \001(\t\032E\n\002Cv\022\020\n\010train_id"
  "\030. \002(\005\022\n\n\002cv\030/ \002(\005\022\022\n\nerror_code\0300 \001(\005\022\r"
  "\n\005value\0301 \001(\005\0326\n\025WaitForChangeResponse\022\021"
  "\n\ttimestamp\0305 \002(\004\022\n\n\002id\0306 \001(\005\"J\n\016TinyRpc"
  "Request\022\n\n\002id\030\001 \002(\005\022,\n\007request\030\002 \002(\0132\033.s"
  "erver.TrainControlRequest\"z\n\017TinyRpcResp"
  "onse\022\n\n\002id\030\001 \002(\005\022.\n\010response\030\004 \001(\0132\034.ser"
  "ver.TrainControlResponse\022\025\n\006failed\030\002 \001(\010"
  ":\005false\022\024\n\014error_detail\030\003 \001(\t2b\n\023TrainCo"
  "ntrolService\022K\n\014TrainControl\022\033.server.Tr"
  "ainControlRequest\032\034.server.TrainControlR"
  "esponse\"\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_train_5fcontrol_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_train_5fcontrol_2eproto_sccs[38] = {
  &scc_info_LokStateProto_train_5fcontrol_2eproto.base,
  &scc_info_LokStateProto_Function_train_5fcontrol_2eproto.base,
  &scc_info_TinyRpcRequest_train_5fcontrol_2eproto.base,
  &scc_info_TinyRpcResponse_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlRequest_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlRequest_DoChangeSavedState_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlRequest_DoDropState_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlRequest_DoEStopLoco_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlRequest_DoGetLokDb_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlRequest_DoGetLokState_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlRequest_DoGetOrSetAddress_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlRequest_DoGetOrSetCV_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlRequest_DoPicMisc_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlRequest_DoPing_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlRequest_DoReflashAutomata_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlRequest_DoReflashPic_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlRequest_DoRpc_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlRequest_DoSendRawCanPacket_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlRequest_DoSetAccessory_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlRequest_DoSetEmergencyStop_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlRequest_DoSetSpeed_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlRequest_DoWaitForChange_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlResponse_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlResponse_Accessory_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlResponse_CurrentAddress_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlResponse_Cv_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlResponse_EmergencyStop_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlResponse_LokDb_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlResponse_LokDb_Lok_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlResponse_LokDb_Lok_Function_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlResponse_PicMisc_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlResponse_Pong_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlResponse_RawCanPacket_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlResponse_ReflashAutomata_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlResponse_ReflashPic_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlResponse_RpcResponse_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlResponse_Speed_train_5fcontrol_2eproto.base,
  &scc_info_TrainControlResponse_WaitForChangeResponse_train_5fcontrol_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_train_5fcontrol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_train_5fcontrol_2eproto = {
  false, false, descriptor_table_protodef_train_5fcontrol_2eproto, "train_control.proto", 4289,
  &descriptor_table_train_5fcontrol_2eproto_once, descriptor_table_train_5fcontrol_2eproto_sccs, descriptor_table_train_5fcontrol_2eproto_deps, 38, 0,
  schemas, file_default_instances, TableStruct_train_5fcontrol_2eproto::offsets,
  file_level_metadata_train_5fcontrol_2eproto, 38, file_level_enum_descriptors_train_5fcontrol_2eproto, file_level_service_descriptors_train_5fcontrol_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_train_5fcontrol_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_train_5fcontrol_2eproto)), true);
namespace server {

// ===================================================================

void LokStateProto_Function::InitAsDefaultInstance() {
}
class LokStateProto_Function::_Internal {
 public:
  using HasBits = decltype(std::declval<LokStateProto_Function>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

LokStateProto_Function::LokStateProto_Function(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.LokStateProto.Function)
}
LokStateProto_Function::LokStateProto_Function(const LokStateProto_Function& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_) -
    reinterpret_cast<char*>(&id_)) + sizeof(ts_));
  // @@protoc_insertion_point(copy_constructor:server.LokStateProto.Function)
}

void LokStateProto_Function::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&id_)) + sizeof(ts_));
}

LokStateProto_Function::~LokStateProto_Function() {
  // @@protoc_insertion_point(destructor:server.LokStateProto.Function)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LokStateProto_Function::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LokStateProto_Function::ArenaDtor(void* object) {
  LokStateProto_Function* _this = reinterpret_cast< LokStateProto_Function* >(object);
  (void)_this;
}
void LokStateProto_Function::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LokStateProto_Function::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LokStateProto_Function& LokStateProto_Function::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LokStateProto_Function_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void LokStateProto_Function::Clear() {
// @@protoc_insertion_point(message_clear_start:server.LokStateProto.Function)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ts_) -
        reinterpret_cast<char*>(&id_)) + sizeof(ts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LokStateProto_Function::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 ts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ts(&has_bits);
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LokStateProto_Function::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.LokStateProto.Function)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_id(), target);
  }

  // optional int32 value = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_value(), target);
  }

  // optional int64 ts = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.LokStateProto.Function)
  return target;
}

size_t LokStateProto_Function::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.LokStateProto.Function)
  size_t total_size = 0;

  // required int32 id = 5;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int32 value = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_value());
    }

    // optional int64 ts = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_ts());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LokStateProto_Function::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.LokStateProto.Function)
  GOOGLE_DCHECK_NE(&from, this);
  const LokStateProto_Function* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LokStateProto_Function>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.LokStateProto.Function)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.LokStateProto.Function)
    MergeFrom(*source);
  }
}

void LokStateProto_Function::MergeFrom(const LokStateProto_Function& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.LokStateProto.Function)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LokStateProto_Function::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.LokStateProto.Function)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LokStateProto_Function::CopyFrom(const LokStateProto_Function& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.LokStateProto.Function)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LokStateProto_Function::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LokStateProto_Function::InternalSwap(LokStateProto_Function* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LokStateProto_Function, ts_)
      + sizeof(LokStateProto_Function::ts_)
      - PROTOBUF_FIELD_OFFSET(LokStateProto_Function, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LokStateProto_Function::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LokStateProto::InitAsDefaultInstance() {
}
class LokStateProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LokStateProto>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_speed_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

LokStateProto::LokStateProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  function_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.LokStateProto)
}
LokStateProto::LokStateProto(const LokStateProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      function_(from.function_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&id_)) + sizeof(dir_));
  // @@protoc_insertion_point(copy_constructor:server.LokStateProto)
}

void LokStateProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LokStateProto_train_5fcontrol_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_ts_) -
      reinterpret_cast<char*>(&id_)) + sizeof(speed_ts_));
  dir_ = 1;
}

LokStateProto::~LokStateProto() {
  // @@protoc_insertion_point(destructor:server.LokStateProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LokStateProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LokStateProto::ArenaDtor(void* object) {
  LokStateProto* _this = reinterpret_cast< LokStateProto* >(object);
  (void)_this;
}
void LokStateProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LokStateProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LokStateProto& LokStateProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LokStateProto_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void LokStateProto::Clear() {
// @@protoc_insertion_point(message_clear_start:server.LokStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  function_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_ts_) -
        reinterpret_cast<char*>(&id_)) + sizeof(speed_ts_));
    dir_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LokStateProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dir = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_dir(&has_bits);
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated group Function = 4 { ... };
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 35)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseGroup(_internal_add_function(), ptr, 35);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<35>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int64 ts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ts(&has_bits);
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 speed_ts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_speed_ts(&has_bits);
          speed_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LokStateProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.LokStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional int32 dir = 2 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_dir(), target);
  }

  // optional int32 speed = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_speed(), target);
  }

  // repeated group Function = 4 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_function_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(4, this->_internal_function(i), target, stream);
  }

  // optional int64 ts = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_ts(), target);
  }

  // optional int64 speed_ts = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_speed_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.LokStateProto)
  return target;
}

size_t LokStateProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.LokStateProto)
  size_t total_size = 0;

  // required int32 id = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated group Function = 4 { ... };
  total_size += 2UL * this->_internal_function_size();
  for (const auto& msg : this->function_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional int32 speed = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_speed());
    }

    // optional int64 ts = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_ts());
    }

    // optional int64 speed_ts = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_speed_ts());
    }

    // optional int32 dir = 2 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dir());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LokStateProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.LokStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  const LokStateProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LokStateProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.LokStateProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.LokStateProto)
    MergeFrom(*source);
  }
}

void LokStateProto::MergeFrom(const LokStateProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.LokStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  function_.MergeFrom(from.function_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      ts_ = from.ts_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_ts_ = from.speed_ts_;
    }
    if (cached_has_bits & 0x00000010u) {
      dir_ = from.dir_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LokStateProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.LokStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LokStateProto::CopyFrom(const LokStateProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.LokStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LokStateProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(function_)) return false;
  return true;
}

void LokStateProto::InternalSwap(LokStateProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  function_.InternalSwap(&other->function_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LokStateProto, speed_ts_)
      + sizeof(LokStateProto::speed_ts_)
      - PROTOBUF_FIELD_OFFSET(LokStateProto, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
  swap(dir_, other->dir_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LokStateProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlRequest_DoSetSpeed::InitAsDefaultInstance() {
}
class TrainControlRequest_DoSetSpeed::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlRequest_DoSetSpeed>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TrainControlRequest_DoSetSpeed::TrainControlRequest_DoSetSpeed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlRequest.DoSetSpeed)
}
TrainControlRequest_DoSetSpeed::TrainControlRequest_DoSetSpeed(const TrainControlRequest_DoSetSpeed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&id_)) + sizeof(dir_));
  // @@protoc_insertion_point(copy_constructor:server.TrainControlRequest.DoSetSpeed)
}

void TrainControlRequest_DoSetSpeed::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&id_)) + sizeof(speed_));
  dir_ = 1;
}

TrainControlRequest_DoSetSpeed::~TrainControlRequest_DoSetSpeed() {
  // @@protoc_insertion_point(destructor:server.TrainControlRequest.DoSetSpeed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlRequest_DoSetSpeed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlRequest_DoSetSpeed::ArenaDtor(void* object) {
  TrainControlRequest_DoSetSpeed* _this = reinterpret_cast< TrainControlRequest_DoSetSpeed* >(object);
  (void)_this;
}
void TrainControlRequest_DoSetSpeed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlRequest_DoSetSpeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlRequest_DoSetSpeed& TrainControlRequest_DoSetSpeed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlRequest_DoSetSpeed_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlRequest_DoSetSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlRequest.DoSetSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_) -
        reinterpret_cast<char*>(&id_)) + sizeof(speed_));
    dir_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlRequest_DoSetSpeed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dir = 36 [default = 1];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_dir(&has_bits);
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlRequest_DoSetSpeed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlRequest.DoSetSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // optional int32 speed = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_speed(), target);
  }

  // optional int32 dir = 36 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(36, this->_internal_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlRequest.DoSetSpeed)
  return target;
}

size_t TrainControlRequest_DoSetSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlRequest.DoSetSpeed)
  size_t total_size = 0;

  // required int32 id = 2;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int32 speed = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_speed());
    }

    // optional int32 dir = 36 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dir());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlRequest_DoSetSpeed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlRequest.DoSetSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlRequest_DoSetSpeed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlRequest_DoSetSpeed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlRequest.DoSetSpeed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlRequest.DoSetSpeed)
    MergeFrom(*source);
  }
}

void TrainControlRequest_DoSetSpeed::MergeFrom(const TrainControlRequest_DoSetSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlRequest.DoSetSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      dir_ = from.dir_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrainControlRequest_DoSetSpeed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlRequest.DoSetSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlRequest_DoSetSpeed::CopyFrom(const TrainControlRequest_DoSetSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlRequest.DoSetSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlRequest_DoSetSpeed::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrainControlRequest_DoSetSpeed::InternalSwap(TrainControlRequest_DoSetSpeed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainControlRequest_DoSetSpeed, speed_)
      + sizeof(TrainControlRequest_DoSetSpeed::speed_)
      - PROTOBUF_FIELD_OFFSET(TrainControlRequest_DoSetSpeed, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
  swap(dir_, other->dir_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlRequest_DoSetSpeed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlRequest_DoSetAccessory::InitAsDefaultInstance() {
}
class TrainControlRequest_DoSetAccessory::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlRequest_DoSetAccessory>()._has_bits_);
  static void set_has_train_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accessory_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

TrainControlRequest_DoSetAccessory::TrainControlRequest_DoSetAccessory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlRequest.DoSetAccessory)
}
TrainControlRequest_DoSetAccessory::TrainControlRequest_DoSetAccessory(const TrainControlRequest_DoSetAccessory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&accessory_id_) -
    reinterpret_cast<char*>(&value_)) + sizeof(accessory_id_));
  // @@protoc_insertion_point(copy_constructor:server.TrainControlRequest.DoSetAccessory)
}

void TrainControlRequest_DoSetAccessory::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accessory_id_) -
      reinterpret_cast<char*>(&value_)) + sizeof(accessory_id_));
}

TrainControlRequest_DoSetAccessory::~TrainControlRequest_DoSetAccessory() {
  // @@protoc_insertion_point(destructor:server.TrainControlRequest.DoSetAccessory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlRequest_DoSetAccessory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlRequest_DoSetAccessory::ArenaDtor(void* object) {
  TrainControlRequest_DoSetAccessory* _this = reinterpret_cast< TrainControlRequest_DoSetAccessory* >(object);
  (void)_this;
}
void TrainControlRequest_DoSetAccessory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlRequest_DoSetAccessory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlRequest_DoSetAccessory& TrainControlRequest_DoSetAccessory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlRequest_DoSetAccessory_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlRequest_DoSetAccessory::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlRequest.DoSetAccessory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accessory_id_) -
        reinterpret_cast<char*>(&value_)) + sizeof(accessory_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlRequest_DoSetAccessory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 train_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_train_id(&has_bits);
          train_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 accessory_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_accessory_id(&has_bits);
          accessory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlRequest_DoSetAccessory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlRequest.DoSetAccessory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 train_id = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_train_id(), target);
  }

  // required int32 accessory_id = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_accessory_id(), target);
  }

  // optional int32 value = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlRequest.DoSetAccessory)
  return target;
}

size_t TrainControlRequest_DoSetAccessory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:server.TrainControlRequest.DoSetAccessory)
  size_t total_size = 0;

  if (_internal_has_train_id()) {
    // required int32 train_id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_train_id());
  }

  if (_internal_has_accessory_id()) {
    // required int32 accessory_id = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_accessory_id());
  }

  return total_size;
}
size_t TrainControlRequest_DoSetAccessory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlRequest.DoSetAccessory)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 train_id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_train_id());

    // required int32 accessory_id = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_accessory_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 value = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlRequest_DoSetAccessory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlRequest.DoSetAccessory)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlRequest_DoSetAccessory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlRequest_DoSetAccessory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlRequest.DoSetAccessory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlRequest.DoSetAccessory)
    MergeFrom(*source);
  }
}

void TrainControlRequest_DoSetAccessory::MergeFrom(const TrainControlRequest_DoSetAccessory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlRequest.DoSetAccessory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      train_id_ = from.train_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      accessory_id_ = from.accessory_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrainControlRequest_DoSetAccessory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlRequest.DoSetAccessory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlRequest_DoSetAccessory::CopyFrom(const TrainControlRequest_DoSetAccessory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlRequest.DoSetAccessory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlRequest_DoSetAccessory::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrainControlRequest_DoSetAccessory::InternalSwap(TrainControlRequest_DoSetAccessory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainControlRequest_DoSetAccessory, accessory_id_)
      + sizeof(TrainControlRequest_DoSetAccessory::accessory_id_)
      - PROTOBUF_FIELD_OFFSET(TrainControlRequest_DoSetAccessory, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlRequest_DoSetAccessory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlRequest_DoSetEmergencyStop::InitAsDefaultInstance() {
}
class TrainControlRequest_DoSetEmergencyStop::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlRequest_DoSetEmergencyStop>()._has_bits_);
  static void set_has_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrainControlRequest_DoSetEmergencyStop::TrainControlRequest_DoSetEmergencyStop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlRequest.DoSetEmergencyStop)
}
TrainControlRequest_DoSetEmergencyStop::TrainControlRequest_DoSetEmergencyStop(const TrainControlRequest_DoSetEmergencyStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stop_ = from.stop_;
  // @@protoc_insertion_point(copy_constructor:server.TrainControlRequest.DoSetEmergencyStop)
}

void TrainControlRequest_DoSetEmergencyStop::SharedCtor() {
  stop_ = false;
}

TrainControlRequest_DoSetEmergencyStop::~TrainControlRequest_DoSetEmergencyStop() {
  // @@protoc_insertion_point(destructor:server.TrainControlRequest.DoSetEmergencyStop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlRequest_DoSetEmergencyStop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlRequest_DoSetEmergencyStop::ArenaDtor(void* object) {
  TrainControlRequest_DoSetEmergencyStop* _this = reinterpret_cast< TrainControlRequest_DoSetEmergencyStop* >(object);
  (void)_this;
}
void TrainControlRequest_DoSetEmergencyStop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlRequest_DoSetEmergencyStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlRequest_DoSetEmergencyStop& TrainControlRequest_DoSetEmergencyStop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlRequest_DoSetEmergencyStop_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlRequest_DoSetEmergencyStop::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlRequest.DoSetEmergencyStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlRequest_DoSetEmergencyStop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool stop = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_stop(&has_bits);
          stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlRequest_DoSetEmergencyStop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlRequest.DoSetEmergencyStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool stop = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_stop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlRequest.DoSetEmergencyStop)
  return target;
}

size_t TrainControlRequest_DoSetEmergencyStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlRequest.DoSetEmergencyStop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool stop = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlRequest_DoSetEmergencyStop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlRequest.DoSetEmergencyStop)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlRequest_DoSetEmergencyStop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlRequest_DoSetEmergencyStop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlRequest.DoSetEmergencyStop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlRequest.DoSetEmergencyStop)
    MergeFrom(*source);
  }
}

void TrainControlRequest_DoSetEmergencyStop::MergeFrom(const TrainControlRequest_DoSetEmergencyStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlRequest.DoSetEmergencyStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stop()) {
    _internal_set_stop(from._internal_stop());
  }
}

void TrainControlRequest_DoSetEmergencyStop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlRequest.DoSetEmergencyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlRequest_DoSetEmergencyStop::CopyFrom(const TrainControlRequest_DoSetEmergencyStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlRequest.DoSetEmergencyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlRequest_DoSetEmergencyStop::IsInitialized() const {
  return true;
}

void TrainControlRequest_DoSetEmergencyStop::InternalSwap(TrainControlRequest_DoSetEmergencyStop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stop_, other->stop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlRequest_DoSetEmergencyStop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlRequest_DoRpc::InitAsDefaultInstance() {
}
class TrainControlRequest_DoRpc::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlRequest_DoRpc>()._has_bits_);
  static void set_has_destination_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_arg1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_arg2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

TrainControlRequest_DoRpc::TrainControlRequest_DoRpc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  payload_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlRequest.DoRpc)
}
TrainControlRequest_DoRpc::TrainControlRequest_DoRpc(const TrainControlRequest_DoRpc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      payload_(from.payload_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&destination_address_, &from.destination_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&arg2_) -
    reinterpret_cast<char*>(&destination_address_)) + sizeof(arg2_));
  // @@protoc_insertion_point(copy_constructor:server.TrainControlRequest.DoRpc)
}

void TrainControlRequest_DoRpc::SharedCtor() {
  ::memset(&destination_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arg2_) -
      reinterpret_cast<char*>(&destination_address_)) + sizeof(arg2_));
}

TrainControlRequest_DoRpc::~TrainControlRequest_DoRpc() {
  // @@protoc_insertion_point(destructor:server.TrainControlRequest.DoRpc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlRequest_DoRpc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlRequest_DoRpc::ArenaDtor(void* object) {
  TrainControlRequest_DoRpc* _this = reinterpret_cast< TrainControlRequest_DoRpc* >(object);
  (void)_this;
}
void TrainControlRequest_DoRpc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlRequest_DoRpc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlRequest_DoRpc& TrainControlRequest_DoRpc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlRequest_DoRpc_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlRequest_DoRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlRequest.DoRpc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&destination_address_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&arg2_) -
        reinterpret_cast<char*>(&destination_address_)) + sizeof(arg2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlRequest_DoRpc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 destination_address = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_destination_address(&has_bits);
          destination_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 command = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_command(&has_bits);
          command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 arg1 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_arg1(&has_bits);
          arg1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 arg2 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_arg2(&has_bits);
          arg2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 payload = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_payload(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<480>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_payload(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlRequest_DoRpc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlRequest.DoRpc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination_address = 17;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_destination_address(), target);
  }

  // required int32 command = 18;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_command(), target);
  }

  // required int32 arg1 = 19;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_arg1(), target);
  }

  // required int32 arg2 = 20;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_arg2(), target);
  }

  // repeated int32 payload = 60;
  for (int i = 0, n = this->_internal_payload_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(60, this->_internal_payload(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlRequest.DoRpc)
  return target;
}

size_t TrainControlRequest_DoRpc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:server.TrainControlRequest.DoRpc)
  size_t total_size = 0;

  if (_internal_has_destination_address()) {
    // required int32 destination_address = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_destination_address());
  }

  if (_internal_has_command()) {
    // required int32 command = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_command());
  }

  if (_internal_has_arg1()) {
    // required int32 arg1 = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arg1());
  }

  if (_internal_has_arg2()) {
    // required int32 arg2 = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arg2());
  }

  return total_size;
}
size_t TrainControlRequest_DoRpc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlRequest.DoRpc)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 destination_address = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_destination_address());

    // required int32 command = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_command());

    // required int32 arg1 = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arg1());

    // required int32 arg2 = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arg2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 payload = 60;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->payload_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_payload_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlRequest_DoRpc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlRequest.DoRpc)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlRequest_DoRpc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlRequest_DoRpc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlRequest.DoRpc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlRequest.DoRpc)
    MergeFrom(*source);
  }
}

void TrainControlRequest_DoRpc::MergeFrom(const TrainControlRequest_DoRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlRequest.DoRpc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  payload_.MergeFrom(from.payload_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      destination_address_ = from.destination_address_;
    }
    if (cached_has_bits & 0x00000002u) {
      command_ = from.command_;
    }
    if (cached_has_bits & 0x00000004u) {
      arg1_ = from.arg1_;
    }
    if (cached_has_bits & 0x00000008u) {
      arg2_ = from.arg2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrainControlRequest_DoRpc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlRequest.DoRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlRequest_DoRpc::CopyFrom(const TrainControlRequest_DoRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlRequest.DoRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlRequest_DoRpc::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrainControlRequest_DoRpc::InternalSwap(TrainControlRequest_DoRpc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  payload_.InternalSwap(&other->payload_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainControlRequest_DoRpc, arg2_)
      + sizeof(TrainControlRequest_DoRpc::arg2_)
      - PROTOBUF_FIELD_OFFSET(TrainControlRequest_DoRpc, destination_address_)>(
          reinterpret_cast<char*>(&destination_address_),
          reinterpret_cast<char*>(&other->destination_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlRequest_DoRpc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlRequest_DoPing::InitAsDefaultInstance() {
}
class TrainControlRequest_DoPing::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlRequest_DoPing>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrainControlRequest_DoPing::TrainControlRequest_DoPing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlRequest.DoPing)
}
TrainControlRequest_DoPing::TrainControlRequest_DoPing(const TrainControlRequest_DoPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:server.TrainControlRequest.DoPing)
}

void TrainControlRequest_DoPing::SharedCtor() {
  value_ = 0;
}

TrainControlRequest_DoPing::~TrainControlRequest_DoPing() {
  // @@protoc_insertion_point(destructor:server.TrainControlRequest.DoPing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlRequest_DoPing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlRequest_DoPing::ArenaDtor(void* object) {
  TrainControlRequest_DoPing* _this = reinterpret_cast< TrainControlRequest_DoPing* >(object);
  (void)_this;
}
void TrainControlRequest_DoPing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlRequest_DoPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlRequest_DoPing& TrainControlRequest_DoPing::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlRequest_DoPing_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlRequest_DoPing::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlRequest.DoPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlRequest_DoPing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 value = 22 [default = 0];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlRequest_DoPing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlRequest.DoPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 value = 22 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlRequest.DoPing)
  return target;
}

size_t TrainControlRequest_DoPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlRequest.DoPing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 value = 22 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlRequest_DoPing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlRequest.DoPing)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlRequest_DoPing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlRequest_DoPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlRequest.DoPing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlRequest.DoPing)
    MergeFrom(*source);
  }
}

void TrainControlRequest_DoPing::MergeFrom(const TrainControlRequest_DoPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlRequest.DoPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
}

void TrainControlRequest_DoPing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlRequest.DoPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlRequest_DoPing::CopyFrom(const TrainControlRequest_DoPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlRequest.DoPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlRequest_DoPing::IsInitialized() const {
  return true;
}

void TrainControlRequest_DoPing::InternalSwap(TrainControlRequest_DoPing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlRequest_DoPing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlRequest_DoGetOrSetAddress::InitAsDefaultInstance() {
}
class TrainControlRequest_DoGetOrSetAddress::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlRequest_DoGetOrSetAddress>()._has_bits_);
  static void set_has_new_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrainControlRequest_DoGetOrSetAddress::TrainControlRequest_DoGetOrSetAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlRequest.DoGetOrSetAddress)
}
TrainControlRequest_DoGetOrSetAddress::TrainControlRequest_DoGetOrSetAddress(const TrainControlRequest_DoGetOrSetAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  new_address_ = from.new_address_;
  // @@protoc_insertion_point(copy_constructor:server.TrainControlRequest.DoGetOrSetAddress)
}

void TrainControlRequest_DoGetOrSetAddress::SharedCtor() {
  new_address_ = 0;
}

TrainControlRequest_DoGetOrSetAddress::~TrainControlRequest_DoGetOrSetAddress() {
  // @@protoc_insertion_point(destructor:server.TrainControlRequest.DoGetOrSetAddress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlRequest_DoGetOrSetAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlRequest_DoGetOrSetAddress::ArenaDtor(void* object) {
  TrainControlRequest_DoGetOrSetAddress* _this = reinterpret_cast< TrainControlRequest_DoGetOrSetAddress* >(object);
  (void)_this;
}
void TrainControlRequest_DoGetOrSetAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlRequest_DoGetOrSetAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlRequest_DoGetOrSetAddress& TrainControlRequest_DoGetOrSetAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlRequest_DoGetOrSetAddress_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlRequest_DoGetOrSetAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlRequest.DoGetOrSetAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_address_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlRequest_DoGetOrSetAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 new_address = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_new_address(&has_bits);
          new_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlRequest_DoGetOrSetAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlRequest.DoGetOrSetAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 new_address = 24;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_new_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlRequest.DoGetOrSetAddress)
  return target;
}

size_t TrainControlRequest_DoGetOrSetAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlRequest.DoGetOrSetAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 new_address = 24;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_new_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlRequest_DoGetOrSetAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlRequest.DoGetOrSetAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlRequest_DoGetOrSetAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlRequest_DoGetOrSetAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlRequest.DoGetOrSetAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlRequest.DoGetOrSetAddress)
    MergeFrom(*source);
  }
}

void TrainControlRequest_DoGetOrSetAddress::MergeFrom(const TrainControlRequest_DoGetOrSetAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlRequest.DoGetOrSetAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_new_address()) {
    _internal_set_new_address(from._internal_new_address());
  }
}

void TrainControlRequest_DoGetOrSetAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlRequest.DoGetOrSetAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlRequest_DoGetOrSetAddress::CopyFrom(const TrainControlRequest_DoGetOrSetAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlRequest.DoGetOrSetAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlRequest_DoGetOrSetAddress::IsInitialized() const {
  return true;
}

void TrainControlRequest_DoGetOrSetAddress::InternalSwap(TrainControlRequest_DoGetOrSetAddress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(new_address_, other->new_address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlRequest_DoGetOrSetAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlRequest_DoDropState::InitAsDefaultInstance() {
}
class TrainControlRequest_DoDropState::_Internal {
 public:
};

TrainControlRequest_DoDropState::TrainControlRequest_DoDropState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlRequest.DoDropState)
}
TrainControlRequest_DoDropState::TrainControlRequest_DoDropState(const TrainControlRequest_DoDropState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:server.TrainControlRequest.DoDropState)
}

void TrainControlRequest_DoDropState::SharedCtor() {
}

TrainControlRequest_DoDropState::~TrainControlRequest_DoDropState() {
  // @@protoc_insertion_point(destructor:server.TrainControlRequest.DoDropState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlRequest_DoDropState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlRequest_DoDropState::ArenaDtor(void* object) {
  TrainControlRequest_DoDropState* _this = reinterpret_cast< TrainControlRequest_DoDropState* >(object);
  (void)_this;
}
void TrainControlRequest_DoDropState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlRequest_DoDropState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlRequest_DoDropState& TrainControlRequest_DoDropState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlRequest_DoDropState_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlRequest_DoDropState::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlRequest.DoDropState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlRequest_DoDropState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlRequest_DoDropState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlRequest.DoDropState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlRequest.DoDropState)
  return target;
}

size_t TrainControlRequest_DoDropState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlRequest.DoDropState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlRequest_DoDropState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlRequest.DoDropState)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlRequest_DoDropState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlRequest_DoDropState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlRequest.DoDropState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlRequest.DoDropState)
    MergeFrom(*source);
  }
}

void TrainControlRequest_DoDropState::MergeFrom(const TrainControlRequest_DoDropState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlRequest.DoDropState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TrainControlRequest_DoDropState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlRequest.DoDropState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlRequest_DoDropState::CopyFrom(const TrainControlRequest_DoDropState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlRequest.DoDropState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlRequest_DoDropState::IsInitialized() const {
  return true;
}

void TrainControlRequest_DoDropState::InternalSwap(TrainControlRequest_DoDropState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlRequest_DoDropState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlRequest_DoChangeSavedState::InitAsDefaultInstance() {
}
class TrainControlRequest_DoChangeSavedState::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlRequest_DoChangeSavedState>()._has_bits_);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_new_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bits_to_set(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bits_to_clear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

TrainControlRequest_DoChangeSavedState::TrainControlRequest_DoChangeSavedState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlRequest.DoChangeSavedState)
}
TrainControlRequest_DoChangeSavedState::TrainControlRequest_DoChangeSavedState(const TrainControlRequest_DoChangeSavedState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bits_to_clear_, &from.bits_to_clear_,
    static_cast<size_t>(reinterpret_cast<char*>(&bits_to_set_) -
    reinterpret_cast<char*>(&bits_to_clear_)) + sizeof(bits_to_set_));
  // @@protoc_insertion_point(copy_constructor:server.TrainControlRequest.DoChangeSavedState)
}

void TrainControlRequest_DoChangeSavedState::SharedCtor() {
  ::memset(&bits_to_clear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bits_to_set_) -
      reinterpret_cast<char*>(&bits_to_clear_)) + sizeof(bits_to_set_));
}

TrainControlRequest_DoChangeSavedState::~TrainControlRequest_DoChangeSavedState() {
  // @@protoc_insertion_point(destructor:server.TrainControlRequest.DoChangeSavedState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlRequest_DoChangeSavedState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlRequest_DoChangeSavedState::ArenaDtor(void* object) {
  TrainControlRequest_DoChangeSavedState* _this = reinterpret_cast< TrainControlRequest_DoChangeSavedState* >(object);
  (void)_this;
}
void TrainControlRequest_DoChangeSavedState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlRequest_DoChangeSavedState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlRequest_DoChangeSavedState& TrainControlRequest_DoChangeSavedState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlRequest_DoChangeSavedState_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlRequest_DoChangeSavedState::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlRequest.DoChangeSavedState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&bits_to_clear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bits_to_set_) -
        reinterpret_cast<char*>(&bits_to_clear_)) + sizeof(bits_to_set_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlRequest_DoChangeSavedState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 client_id = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_client_id(&has_bits);
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 offset = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 new_value = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_new_value(&has_bits);
          new_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bits_to_set = 30 [default = 0];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_bits_to_set(&has_bits);
          bits_to_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bits_to_clear = 31 [default = 0];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_bits_to_clear(&has_bits);
          bits_to_clear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlRequest_DoChangeSavedState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlRequest.DoChangeSavedState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 client_id = 27;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_client_id(), target);
  }

  // required int32 offset = 28;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_offset(), target);
  }

  // optional int32 new_value = 29;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->_internal_new_value(), target);
  }

  // optional int32 bits_to_set = 30 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_bits_to_set(), target);
  }

  // optional int32 bits_to_clear = 31 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_bits_to_clear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlRequest.DoChangeSavedState)
  return target;
}

size_t TrainControlRequest_DoChangeSavedState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:server.TrainControlRequest.DoChangeSavedState)
  size_t total_size = 0;

  if (_internal_has_client_id()) {
    // required int32 client_id = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client_id());
  }

  if (_internal_has_offset()) {
    // required int32 offset = 28;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  return total_size;
}
size_t TrainControlRequest_DoChangeSavedState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlRequest.DoChangeSavedState)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 client_id = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client_id());

    // required int32 offset = 28;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 bits_to_clear = 31 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bits_to_clear());
  }

  if (cached_has_bits & 0x00000018u) {
    // optional int32 new_value = 29;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_new_value());
    }

    // optional int32 bits_to_set = 30 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bits_to_set());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlRequest_DoChangeSavedState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlRequest.DoChangeSavedState)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlRequest_DoChangeSavedState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlRequest_DoChangeSavedState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlRequest.DoChangeSavedState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlRequest.DoChangeSavedState)
    MergeFrom(*source);
  }
}

void TrainControlRequest_DoChangeSavedState::MergeFrom(const TrainControlRequest_DoChangeSavedState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlRequest.DoChangeSavedState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      bits_to_clear_ = from.bits_to_clear_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_id_ = from.client_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      new_value_ = from.new_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      bits_to_set_ = from.bits_to_set_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrainControlRequest_DoChangeSavedState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlRequest.DoChangeSavedState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlRequest_DoChangeSavedState::CopyFrom(const TrainControlRequest_DoChangeSavedState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlRequest.DoChangeSavedState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlRequest_DoChangeSavedState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrainControlRequest_DoChangeSavedState::InternalSwap(TrainControlRequest_DoChangeSavedState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainControlRequest_DoChangeSavedState, bits_to_set_)
      + sizeof(TrainControlRequest_DoChangeSavedState::bits_to_set_)
      - PROTOBUF_FIELD_OFFSET(TrainControlRequest_DoChangeSavedState, bits_to_clear_)>(
          reinterpret_cast<char*>(&bits_to_clear_),
          reinterpret_cast<char*>(&other->bits_to_clear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlRequest_DoChangeSavedState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlRequest_DoSendRawCanPacket::InitAsDefaultInstance() {
}
class TrainControlRequest_DoSendRawCanPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlRequest_DoSendRawCanPacket>()._has_bits_);
  static void set_has_wait(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrainControlRequest_DoSendRawCanPacket::TrainControlRequest_DoSendRawCanPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  d_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlRequest.DoSendRawCanPacket)
}
TrainControlRequest_DoSendRawCanPacket::TrainControlRequest_DoSendRawCanPacket(const TrainControlRequest_DoSendRawCanPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      d_(from.d_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  wait_ = from.wait_;
  // @@protoc_insertion_point(copy_constructor:server.TrainControlRequest.DoSendRawCanPacket)
}

void TrainControlRequest_DoSendRawCanPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrainControlRequest_DoSendRawCanPacket_train_5fcontrol_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wait_ = false;
}

TrainControlRequest_DoSendRawCanPacket::~TrainControlRequest_DoSendRawCanPacket() {
  // @@protoc_insertion_point(destructor:server.TrainControlRequest.DoSendRawCanPacket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlRequest_DoSendRawCanPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrainControlRequest_DoSendRawCanPacket::ArenaDtor(void* object) {
  TrainControlRequest_DoSendRawCanPacket* _this = reinterpret_cast< TrainControlRequest_DoSendRawCanPacket* >(object);
  (void)_this;
}
void TrainControlRequest_DoSendRawCanPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlRequest_DoSendRawCanPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlRequest_DoSendRawCanPacket& TrainControlRequest_DoSendRawCanPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlRequest_DoSendRawCanPacket_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlRequest_DoSendRawCanPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlRequest.DoSendRawCanPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  d_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  wait_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlRequest_DoSendRawCanPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool wait = 33 [default = false];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_wait(&has_bits);
          wait_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 d = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_d(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<272>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_d(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string data = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TrainControlRequest.DoSendRawCanPacket.data");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlRequest_DoSendRawCanPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlRequest.DoSendRawCanPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool wait = 33 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_wait(), target);
  }

  // repeated int32 d = 34;
  for (int i = 0, n = this->_internal_d_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_d(i), target);
  }

  // optional string data = 35;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "server.TrainControlRequest.DoSendRawCanPacket.data");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlRequest.DoSendRawCanPacket)
  return target;
}

size_t TrainControlRequest_DoSendRawCanPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlRequest.DoSendRawCanPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 d = 34;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->d_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_d_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string data = 35;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_data());
    }

    // optional bool wait = 33 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlRequest_DoSendRawCanPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlRequest.DoSendRawCanPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlRequest_DoSendRawCanPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlRequest_DoSendRawCanPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlRequest.DoSendRawCanPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlRequest.DoSendRawCanPacket)
    MergeFrom(*source);
  }
}

void TrainControlRequest_DoSendRawCanPacket::MergeFrom(const TrainControlRequest_DoSendRawCanPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlRequest.DoSendRawCanPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  d_.MergeFrom(from.d_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      wait_ = from.wait_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrainControlRequest_DoSendRawCanPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlRequest.DoSendRawCanPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlRequest_DoSendRawCanPacket::CopyFrom(const TrainControlRequest_DoSendRawCanPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlRequest.DoSendRawCanPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlRequest_DoSendRawCanPacket::IsInitialized() const {
  return true;
}

void TrainControlRequest_DoSendRawCanPacket::InternalSwap(TrainControlRequest_DoSendRawCanPacket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  d_.InternalSwap(&other->d_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(wait_, other->wait_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlRequest_DoSendRawCanPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlRequest_DoReflashAutomata::InitAsDefaultInstance() {
}
class TrainControlRequest_DoReflashAutomata::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlRequest_DoReflashAutomata>()._has_bits_);
  static void set_has_destination_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signal_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TrainControlRequest_DoReflashAutomata::TrainControlRequest_DoReflashAutomata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlRequest.DoReflashAutomata)
}
TrainControlRequest_DoReflashAutomata::TrainControlRequest_DoReflashAutomata(const TrainControlRequest_DoReflashAutomata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&destination_address_, &from.destination_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&destination_address_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:server.TrainControlRequest.DoReflashAutomata)
}

void TrainControlRequest_DoReflashAutomata::SharedCtor() {
  ::memset(&destination_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_address_) -
      reinterpret_cast<char*>(&destination_address_)) + sizeof(signal_address_));
  offset_ = 3328;
}

TrainControlRequest_DoReflashAutomata::~TrainControlRequest_DoReflashAutomata() {
  // @@protoc_insertion_point(destructor:server.TrainControlRequest.DoReflashAutomata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlRequest_DoReflashAutomata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlRequest_DoReflashAutomata::ArenaDtor(void* object) {
  TrainControlRequest_DoReflashAutomata* _this = reinterpret_cast< TrainControlRequest_DoReflashAutomata* >(object);
  (void)_this;
}
void TrainControlRequest_DoReflashAutomata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlRequest_DoReflashAutomata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlRequest_DoReflashAutomata& TrainControlRequest_DoReflashAutomata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlRequest_DoReflashAutomata_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlRequest_DoReflashAutomata::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlRequest.DoReflashAutomata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&destination_address_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&signal_address_) -
        reinterpret_cast<char*>(&destination_address_)) + sizeof(signal_address_));
    offset_ = 3328;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlRequest_DoReflashAutomata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 destination_address = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_destination_address(&has_bits);
          destination_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 offset = 38 [default = 3328];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 data = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<312>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 signal_address = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_signal_address(&has_bits);
          signal_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlRequest_DoReflashAutomata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlRequest.DoReflashAutomata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 destination_address = 37;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(37, this->_internal_destination_address(), target);
  }

  // optional int32 offset = 38 [default = 3328];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->_internal_offset(), target);
  }

  // repeated int32 data = 39;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->_internal_data(i), target);
  }

  // optional int32 signal_address = 61;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(61, this->_internal_signal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlRequest.DoReflashAutomata)
  return target;
}

size_t TrainControlRequest_DoReflashAutomata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlRequest.DoReflashAutomata)
  size_t total_size = 0;

  // required int32 destination_address = 37;
  if (_internal_has_destination_address()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_destination_address());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 data = 39;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->data_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int32 signal_address = 61;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_signal_address());
    }

    // optional int32 offset = 38 [default = 3328];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_offset());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlRequest_DoReflashAutomata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlRequest.DoReflashAutomata)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlRequest_DoReflashAutomata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlRequest_DoReflashAutomata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlRequest.DoReflashAutomata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlRequest.DoReflashAutomata)
    MergeFrom(*source);
  }
}

void TrainControlRequest_DoReflashAutomata::MergeFrom(const TrainControlRequest_DoReflashAutomata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlRequest.DoReflashAutomata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      destination_address_ = from.destination_address_;
    }
    if (cached_has_bits & 0x00000002u) {
      signal_address_ = from.signal_address_;
    }
    if (cached_has_bits & 0x00000004u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrainControlRequest_DoReflashAutomata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlRequest.DoReflashAutomata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlRequest_DoReflashAutomata::CopyFrom(const TrainControlRequest_DoReflashAutomata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlRequest.DoReflashAutomata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlRequest_DoReflashAutomata::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrainControlRequest_DoReflashAutomata::InternalSwap(TrainControlRequest_DoReflashAutomata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainControlRequest_DoReflashAutomata, signal_address_)
      + sizeof(TrainControlRequest_DoReflashAutomata::signal_address_)
      - PROTOBUF_FIELD_OFFSET(TrainControlRequest_DoReflashAutomata, destination_address_)>(
          reinterpret_cast<char*>(&destination_address_),
          reinterpret_cast<char*>(&other->destination_address_));
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlRequest_DoReflashAutomata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlRequest_DoGetLokDb::InitAsDefaultInstance() {
}
class TrainControlRequest_DoGetLokDb::_Internal {
 public:
};

TrainControlRequest_DoGetLokDb::TrainControlRequest_DoGetLokDb(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlRequest.DoGetLokDb)
}
TrainControlRequest_DoGetLokDb::TrainControlRequest_DoGetLokDb(const TrainControlRequest_DoGetLokDb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:server.TrainControlRequest.DoGetLokDb)
}

void TrainControlRequest_DoGetLokDb::SharedCtor() {
}

TrainControlRequest_DoGetLokDb::~TrainControlRequest_DoGetLokDb() {
  // @@protoc_insertion_point(destructor:server.TrainControlRequest.DoGetLokDb)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlRequest_DoGetLokDb::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlRequest_DoGetLokDb::ArenaDtor(void* object) {
  TrainControlRequest_DoGetLokDb* _this = reinterpret_cast< TrainControlRequest_DoGetLokDb* >(object);
  (void)_this;
}
void TrainControlRequest_DoGetLokDb::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlRequest_DoGetLokDb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlRequest_DoGetLokDb& TrainControlRequest_DoGetLokDb::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlRequest_DoGetLokDb_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlRequest_DoGetLokDb::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlRequest.DoGetLokDb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlRequest_DoGetLokDb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlRequest_DoGetLokDb::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlRequest.DoGetLokDb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlRequest.DoGetLokDb)
  return target;
}

size_t TrainControlRequest_DoGetLokDb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlRequest.DoGetLokDb)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlRequest_DoGetLokDb::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlRequest.DoGetLokDb)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlRequest_DoGetLokDb* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlRequest_DoGetLokDb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlRequest.DoGetLokDb)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlRequest.DoGetLokDb)
    MergeFrom(*source);
  }
}

void TrainControlRequest_DoGetLokDb::MergeFrom(const TrainControlRequest_DoGetLokDb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlRequest.DoGetLokDb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TrainControlRequest_DoGetLokDb::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlRequest.DoGetLokDb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlRequest_DoGetLokDb::CopyFrom(const TrainControlRequest_DoGetLokDb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlRequest.DoGetLokDb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlRequest_DoGetLokDb::IsInitialized() const {
  return true;
}

void TrainControlRequest_DoGetLokDb::InternalSwap(TrainControlRequest_DoGetLokDb* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlRequest_DoGetLokDb::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlRequest_DoGetLokState::InitAsDefaultInstance() {
}
class TrainControlRequest_DoGetLokState::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlRequest_DoGetLokState>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrainControlRequest_DoGetLokState::TrainControlRequest_DoGetLokState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlRequest.DoGetLokState)
}
TrainControlRequest_DoGetLokState::TrainControlRequest_DoGetLokState(const TrainControlRequest_DoGetLokState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:server.TrainControlRequest.DoGetLokState)
}

void TrainControlRequest_DoGetLokState::SharedCtor() {
  id_ = 0;
}

TrainControlRequest_DoGetLokState::~TrainControlRequest_DoGetLokState() {
  // @@protoc_insertion_point(destructor:server.TrainControlRequest.DoGetLokState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlRequest_DoGetLokState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlRequest_DoGetLokState::ArenaDtor(void* object) {
  TrainControlRequest_DoGetLokState* _this = reinterpret_cast< TrainControlRequest_DoGetLokState* >(object);
  (void)_this;
}
void TrainControlRequest_DoGetLokState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlRequest_DoGetLokState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlRequest_DoGetLokState& TrainControlRequest_DoGetLokState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlRequest_DoGetLokState_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlRequest_DoGetLokState::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlRequest.DoGetLokState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlRequest_DoGetLokState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlRequest_DoGetLokState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlRequest.DoGetLokState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 43;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(43, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlRequest.DoGetLokState)
  return target;
}

size_t TrainControlRequest_DoGetLokState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlRequest.DoGetLokState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 id = 43;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlRequest_DoGetLokState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlRequest.DoGetLokState)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlRequest_DoGetLokState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlRequest_DoGetLokState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlRequest.DoGetLokState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlRequest.DoGetLokState)
    MergeFrom(*source);
  }
}

void TrainControlRequest_DoGetLokState::MergeFrom(const TrainControlRequest_DoGetLokState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlRequest.DoGetLokState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void TrainControlRequest_DoGetLokState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlRequest.DoGetLokState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlRequest_DoGetLokState::CopyFrom(const TrainControlRequest_DoGetLokState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlRequest.DoGetLokState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlRequest_DoGetLokState::IsInitialized() const {
  return true;
}

void TrainControlRequest_DoGetLokState::InternalSwap(TrainControlRequest_DoGetLokState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlRequest_DoGetLokState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlRequest_DoEStopLoco::InitAsDefaultInstance() {
}
class TrainControlRequest_DoEStopLoco::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlRequest_DoEStopLoco>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TrainControlRequest_DoEStopLoco::TrainControlRequest_DoEStopLoco(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlRequest.DoEStopLoco)
}
TrainControlRequest_DoEStopLoco::TrainControlRequest_DoEStopLoco(const TrainControlRequest_DoEStopLoco& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:server.TrainControlRequest.DoEStopLoco)
}

void TrainControlRequest_DoEStopLoco::SharedCtor() {
  id_ = 0;
}

TrainControlRequest_DoEStopLoco::~TrainControlRequest_DoEStopLoco() {
  // @@protoc_insertion_point(destructor:server.TrainControlRequest.DoEStopLoco)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlRequest_DoEStopLoco::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlRequest_DoEStopLoco::ArenaDtor(void* object) {
  TrainControlRequest_DoEStopLoco* _this = reinterpret_cast< TrainControlRequest_DoEStopLoco* >(object);
  (void)_this;
}
void TrainControlRequest_DoEStopLoco::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlRequest_DoEStopLoco::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlRequest_DoEStopLoco& TrainControlRequest_DoEStopLoco::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlRequest_DoEStopLoco_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlRequest_DoEStopLoco::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlRequest.DoEStopLoco)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlRequest_DoEStopLoco::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlRequest_DoEStopLoco::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlRequest.DoEStopLoco)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 46;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(46, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlRequest.DoEStopLoco)
  return target;
}

size_t TrainControlRequest_DoEStopLoco::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlRequest.DoEStopLoco)
  size_t total_size = 0;

  // required int32 id = 46;
  if (_internal_has_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlRequest_DoEStopLoco::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlRequest.DoEStopLoco)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlRequest_DoEStopLoco* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlRequest_DoEStopLoco>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlRequest.DoEStopLoco)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlRequest.DoEStopLoco)
    MergeFrom(*source);
  }
}

void TrainControlRequest_DoEStopLoco::MergeFrom(const TrainControlRequest_DoEStopLoco& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlRequest.DoEStopLoco)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void TrainControlRequest_DoEStopLoco::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlRequest.DoEStopLoco)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlRequest_DoEStopLoco::CopyFrom(const TrainControlRequest_DoEStopLoco& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlRequest.DoEStopLoco)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlRequest_DoEStopLoco::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrainControlRequest_DoEStopLoco::InternalSwap(TrainControlRequest_DoEStopLoco* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlRequest_DoEStopLoco::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlRequest_DoPicMisc::InitAsDefaultInstance() {
}
class TrainControlRequest_DoPicMisc::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlRequest_DoPicMisc>()._has_bits_);
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TrainControlRequest_DoPicMisc::TrainControlRequest_DoPicMisc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arg_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlRequest.DoPicMisc)
}
TrainControlRequest_DoPicMisc::TrainControlRequest_DoPicMisc(const TrainControlRequest_DoPicMisc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      arg_(from.arg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:server.TrainControlRequest.DoPicMisc)
}

void TrainControlRequest_DoPicMisc::SharedCtor() {
  cmd_ = 0;
}

TrainControlRequest_DoPicMisc::~TrainControlRequest_DoPicMisc() {
  // @@protoc_insertion_point(destructor:server.TrainControlRequest.DoPicMisc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlRequest_DoPicMisc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlRequest_DoPicMisc::ArenaDtor(void* object) {
  TrainControlRequest_DoPicMisc* _this = reinterpret_cast< TrainControlRequest_DoPicMisc* >(object);
  (void)_this;
}
void TrainControlRequest_DoPicMisc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlRequest_DoPicMisc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlRequest_DoPicMisc& TrainControlRequest_DoPicMisc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlRequest_DoPicMisc_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlRequest_DoPicMisc::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlRequest.DoPicMisc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arg_.Clear();
  cmd_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlRequest_DoPicMisc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 cmd = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_cmd(&has_bits);
          cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 arg = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_arg(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<392>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_arg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlRequest_DoPicMisc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlRequest.DoPicMisc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 cmd = 48;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(48, this->_internal_cmd(), target);
  }

  // repeated int32 arg = 49;
  for (int i = 0, n = this->_internal_arg_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(49, this->_internal_arg(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlRequest.DoPicMisc)
  return target;
}

size_t TrainControlRequest_DoPicMisc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlRequest.DoPicMisc)
  size_t total_size = 0;

  // required int32 cmd = 48;
  if (_internal_has_cmd()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cmd());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 arg = 49;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->arg_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_arg_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlRequest_DoPicMisc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlRequest.DoPicMisc)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlRequest_DoPicMisc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlRequest_DoPicMisc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlRequest.DoPicMisc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlRequest.DoPicMisc)
    MergeFrom(*source);
  }
}

void TrainControlRequest_DoPicMisc::MergeFrom(const TrainControlRequest_DoPicMisc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlRequest.DoPicMisc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arg_.MergeFrom(from.arg_);
  if (from._internal_has_cmd()) {
    _internal_set_cmd(from._internal_cmd());
  }
}

void TrainControlRequest_DoPicMisc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlRequest.DoPicMisc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlRequest_DoPicMisc::CopyFrom(const TrainControlRequest_DoPicMisc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlRequest.DoPicMisc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlRequest_DoPicMisc::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrainControlRequest_DoPicMisc::InternalSwap(TrainControlRequest_DoPicMisc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  arg_.InternalSwap(&other->arg_);
  swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlRequest_DoPicMisc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlRequest_DoReflashPic::InitAsDefaultInstance() {
}
class TrainControlRequest_DoReflashPic::_Internal {
 public:
};

TrainControlRequest_DoReflashPic::TrainControlRequest_DoReflashPic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlRequest.DoReflashPic)
}
TrainControlRequest_DoReflashPic::TrainControlRequest_DoReflashPic(const TrainControlRequest_DoReflashPic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:server.TrainControlRequest.DoReflashPic)
}

void TrainControlRequest_DoReflashPic::SharedCtor() {
}

TrainControlRequest_DoReflashPic::~TrainControlRequest_DoReflashPic() {
  // @@protoc_insertion_point(destructor:server.TrainControlRequest.DoReflashPic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlRequest_DoReflashPic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlRequest_DoReflashPic::ArenaDtor(void* object) {
  TrainControlRequest_DoReflashPic* _this = reinterpret_cast< TrainControlRequest_DoReflashPic* >(object);
  (void)_this;
}
void TrainControlRequest_DoReflashPic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlRequest_DoReflashPic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlRequest_DoReflashPic& TrainControlRequest_DoReflashPic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlRequest_DoReflashPic_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlRequest_DoReflashPic::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlRequest.DoReflashPic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlRequest_DoReflashPic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 data = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<408>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlRequest_DoReflashPic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlRequest.DoReflashPic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 data = 51;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(51, this->_internal_data(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlRequest.DoReflashPic)
  return target;
}

size_t TrainControlRequest_DoReflashPic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlRequest.DoReflashPic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 data = 51;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->data_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlRequest_DoReflashPic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlRequest.DoReflashPic)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlRequest_DoReflashPic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlRequest_DoReflashPic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlRequest.DoReflashPic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlRequest.DoReflashPic)
    MergeFrom(*source);
  }
}

void TrainControlRequest_DoReflashPic::MergeFrom(const TrainControlRequest_DoReflashPic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlRequest.DoReflashPic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void TrainControlRequest_DoReflashPic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlRequest.DoReflashPic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlRequest_DoReflashPic::CopyFrom(const TrainControlRequest_DoReflashPic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlRequest.DoReflashPic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlRequest_DoReflashPic::IsInitialized() const {
  return true;
}

void TrainControlRequest_DoReflashPic::InternalSwap(TrainControlRequest_DoReflashPic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlRequest_DoReflashPic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlRequest_DoGetOrSetCV::InitAsDefaultInstance() {
}
class TrainControlRequest_DoGetOrSetCV::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlRequest_DoGetOrSetCV>()._has_bits_);
  static void set_has_train_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cv(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TrainControlRequest_DoGetOrSetCV::TrainControlRequest_DoGetOrSetCV(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlRequest.DoGetOrSetCV)
}
TrainControlRequest_DoGetOrSetCV::TrainControlRequest_DoGetOrSetCV(const TrainControlRequest_DoGetOrSetCV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cv_, &from.cv_,
    static_cast<size_t>(reinterpret_cast<char*>(&train_id_) -
    reinterpret_cast<char*>(&cv_)) + sizeof(train_id_));
  // @@protoc_insertion_point(copy_constructor:server.TrainControlRequest.DoGetOrSetCV)
}

void TrainControlRequest_DoGetOrSetCV::SharedCtor() {
  ::memset(&cv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&cv_)) + sizeof(value_));
  train_id_ = 63;
}

TrainControlRequest_DoGetOrSetCV::~TrainControlRequest_DoGetOrSetCV() {
  // @@protoc_insertion_point(destructor:server.TrainControlRequest.DoGetOrSetCV)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlRequest_DoGetOrSetCV::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlRequest_DoGetOrSetCV::ArenaDtor(void* object) {
  TrainControlRequest_DoGetOrSetCV* _this = reinterpret_cast< TrainControlRequest_DoGetOrSetCV* >(object);
  (void)_this;
}
void TrainControlRequest_DoGetOrSetCV::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlRequest_DoGetOrSetCV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlRequest_DoGetOrSetCV& TrainControlRequest_DoGetOrSetCV::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlRequest_DoGetOrSetCV_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlRequest_DoGetOrSetCV::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlRequest.DoGetOrSetCV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&cv_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&cv_)) + sizeof(value_));
    train_id_ = 63;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlRequest_DoGetOrSetCV::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 train_id = 53 [default = 63];
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_train_id(&has_bits);
          train_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 cv = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_cv(&has_bits);
          cv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 value = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlRequest_DoGetOrSetCV::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlRequest.DoGetOrSetCV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 train_id = 53 [default = 63];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(53, this->_internal_train_id(), target);
  }

  // required int32 cv = 54;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(54, this->_internal_cv(), target);
  }

  // optional int32 value = 55;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(55, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlRequest.DoGetOrSetCV)
  return target;
}

size_t TrainControlRequest_DoGetOrSetCV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlRequest.DoGetOrSetCV)
  size_t total_size = 0;

  // required int32 cv = 54;
  if (_internal_has_cv()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cv());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int32 value = 55;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_value());
    }

    // optional int32 train_id = 53 [default = 63];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_train_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlRequest_DoGetOrSetCV::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlRequest.DoGetOrSetCV)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlRequest_DoGetOrSetCV* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlRequest_DoGetOrSetCV>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlRequest.DoGetOrSetCV)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlRequest.DoGetOrSetCV)
    MergeFrom(*source);
  }
}

void TrainControlRequest_DoGetOrSetCV::MergeFrom(const TrainControlRequest_DoGetOrSetCV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlRequest.DoGetOrSetCV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      cv_ = from.cv_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      train_id_ = from.train_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrainControlRequest_DoGetOrSetCV::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlRequest.DoGetOrSetCV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlRequest_DoGetOrSetCV::CopyFrom(const TrainControlRequest_DoGetOrSetCV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlRequest.DoGetOrSetCV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlRequest_DoGetOrSetCV::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrainControlRequest_DoGetOrSetCV::InternalSwap(TrainControlRequest_DoGetOrSetCV* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainControlRequest_DoGetOrSetCV, value_)
      + sizeof(TrainControlRequest_DoGetOrSetCV::value_)
      - PROTOBUF_FIELD_OFFSET(TrainControlRequest_DoGetOrSetCV, cv_)>(
          reinterpret_cast<char*>(&cv_),
          reinterpret_cast<char*>(&other->cv_));
  swap(train_id_, other->train_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlRequest_DoGetOrSetCV::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlRequest_DoWaitForChange::InitAsDefaultInstance() {
}
class TrainControlRequest_DoWaitForChange::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlRequest_DoWaitForChange>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

TrainControlRequest_DoWaitForChange::TrainControlRequest_DoWaitForChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlRequest.DoWaitForChange)
}
TrainControlRequest_DoWaitForChange::TrainControlRequest_DoWaitForChange(const TrainControlRequest_DoWaitForChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:server.TrainControlRequest.DoWaitForChange)
}

void TrainControlRequest_DoWaitForChange::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
}

TrainControlRequest_DoWaitForChange::~TrainControlRequest_DoWaitForChange() {
  // @@protoc_insertion_point(destructor:server.TrainControlRequest.DoWaitForChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlRequest_DoWaitForChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlRequest_DoWaitForChange::ArenaDtor(void* object) {
  TrainControlRequest_DoWaitForChange* _this = reinterpret_cast< TrainControlRequest_DoWaitForChange* >(object);
  (void)_this;
}
void TrainControlRequest_DoWaitForChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlRequest_DoWaitForChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlRequest_DoWaitForChange& TrainControlRequest_DoWaitForChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlRequest_DoWaitForChange_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlRequest_DoWaitForChange::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlRequest.DoWaitForChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlRequest_DoWaitForChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 timestamp = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 id = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlRequest_DoWaitForChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlRequest.DoWaitForChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 timestamp = 57;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(57, this->_internal_timestamp(), target);
  }

  // optional int32 id = 58;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(58, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlRequest.DoWaitForChange)
  return target;
}

size_t TrainControlRequest_DoWaitForChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlRequest.DoWaitForChange)
  size_t total_size = 0;

  // required uint64 timestamp = 57;
  if (_internal_has_timestamp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 id = 58;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlRequest_DoWaitForChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlRequest.DoWaitForChange)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlRequest_DoWaitForChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlRequest_DoWaitForChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlRequest.DoWaitForChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlRequest.DoWaitForChange)
    MergeFrom(*source);
  }
}

void TrainControlRequest_DoWaitForChange::MergeFrom(const TrainControlRequest_DoWaitForChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlRequest.DoWaitForChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrainControlRequest_DoWaitForChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlRequest.DoWaitForChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlRequest_DoWaitForChange::CopyFrom(const TrainControlRequest_DoWaitForChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlRequest.DoWaitForChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlRequest_DoWaitForChange::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrainControlRequest_DoWaitForChange::InternalSwap(TrainControlRequest_DoWaitForChange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainControlRequest_DoWaitForChange, timestamp_)
      + sizeof(TrainControlRequest_DoWaitForChange::timestamp_)
      - PROTOBUF_FIELD_OFFSET(TrainControlRequest_DoWaitForChange, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlRequest_DoWaitForChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlRequest::InitAsDefaultInstance() {
  ::server::_TrainControlRequest_default_instance_._instance.get_mutable()->dosetspeed_ = const_cast< ::server::TrainControlRequest_DoSetSpeed*>(
      ::server::TrainControlRequest_DoSetSpeed::internal_default_instance());
  ::server::_TrainControlRequest_default_instance_._instance.get_mutable()->dosetaccessory_ = const_cast< ::server::TrainControlRequest_DoSetAccessory*>(
      ::server::TrainControlRequest_DoSetAccessory::internal_default_instance());
  ::server::_TrainControlRequest_default_instance_._instance.get_mutable()->dosetemergencystop_ = const_cast< ::server::TrainControlRequest_DoSetEmergencyStop*>(
      ::server::TrainControlRequest_DoSetEmergencyStop::internal_default_instance());
  ::server::_TrainControlRequest_default_instance_._instance.get_mutable()->dorpc_ = const_cast< ::server::TrainControlRequest_DoRpc*>(
      ::server::TrainControlRequest_DoRpc::internal_default_instance());
  ::server::_TrainControlRequest_default_instance_._instance.get_mutable()->doping_ = const_cast< ::server::TrainControlRequest_DoPing*>(
      ::server::TrainControlRequest_DoPing::internal_default_instance());
  ::server::_TrainControlRequest_default_instance_._instance.get_mutable()->dogetorsetaddress_ = const_cast< ::server::TrainControlRequest_DoGetOrSetAddress*>(
      ::server::TrainControlRequest_DoGetOrSetAddress::internal_default_instance());
  ::server::_TrainControlRequest_default_instance_._instance.get_mutable()->dodropstate_ = const_cast< ::server::TrainControlRequest_DoDropState*>(
      ::server::TrainControlRequest_DoDropState::internal_default_instance());
  ::server::_TrainControlRequest_default_instance_._instance.get_mutable()->dochangesavedstate_ = const_cast< ::server::TrainControlRequest_DoChangeSavedState*>(
      ::server::TrainControlRequest_DoChangeSavedState::internal_default_instance());
  ::server::_TrainControlRequest_default_instance_._instance.get_mutable()->dosendrawcanpacket_ = const_cast< ::server::TrainControlRequest_DoSendRawCanPacket*>(
      ::server::TrainControlRequest_DoSendRawCanPacket::internal_default_instance());
  ::server::_TrainControlRequest_default_instance_._instance.get_mutable()->doreflashautomata_ = const_cast< ::server::TrainControlRequest_DoReflashAutomata*>(
      ::server::TrainControlRequest_DoReflashAutomata::internal_default_instance());
  ::server::_TrainControlRequest_default_instance_._instance.get_mutable()->dogetlokdb_ = const_cast< ::server::TrainControlRequest_DoGetLokDb*>(
      ::server::TrainControlRequest_DoGetLokDb::internal_default_instance());
  ::server::_TrainControlRequest_default_instance_._instance.get_mutable()->dogetlokstate_ = const_cast< ::server::TrainControlRequest_DoGetLokState*>(
      ::server::TrainControlRequest_DoGetLokState::internal_default_instance());
  ::server::_TrainControlRequest_default_instance_._instance.get_mutable()->dosetlokstate_ = const_cast< ::server::LokStateProto*>(
      ::server::LokStateProto::internal_default_instance());
  ::server::_TrainControlRequest_default_instance_._instance.get_mutable()->doestoploco_ = const_cast< ::server::TrainControlRequest_DoEStopLoco*>(
      ::server::TrainControlRequest_DoEStopLoco::internal_default_instance());
  ::server::_TrainControlRequest_default_instance_._instance.get_mutable()->dopicmisc_ = const_cast< ::server::TrainControlRequest_DoPicMisc*>(
      ::server::TrainControlRequest_DoPicMisc::internal_default_instance());
  ::server::_TrainControlRequest_default_instance_._instance.get_mutable()->doreflashpic_ = const_cast< ::server::TrainControlRequest_DoReflashPic*>(
      ::server::TrainControlRequest_DoReflashPic::internal_default_instance());
  ::server::_TrainControlRequest_default_instance_._instance.get_mutable()->dogetorsetcv_ = const_cast< ::server::TrainControlRequest_DoGetOrSetCV*>(
      ::server::TrainControlRequest_DoGetOrSetCV::internal_default_instance());
  ::server::_TrainControlRequest_default_instance_._instance.get_mutable()->dowaitforchange_ = const_cast< ::server::TrainControlRequest_DoWaitForChange*>(
      ::server::TrainControlRequest_DoWaitForChange::internal_default_instance());
}
class TrainControlRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlRequest>()._has_bits_);
  static const ::server::TrainControlRequest_DoSetSpeed& dosetspeed(const TrainControlRequest* msg);
  static void set_has_dosetspeed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::server::TrainControlRequest_DoSetAccessory& dosetaccessory(const TrainControlRequest* msg);
  static void set_has_dosetaccessory(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::server::TrainControlRequest_DoSetEmergencyStop& dosetemergencystop(const TrainControlRequest* msg);
  static void set_has_dosetemergencystop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::server::TrainControlRequest_DoRpc& dorpc(const TrainControlRequest* msg);
  static void set_has_dorpc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::server::TrainControlRequest_DoPing& doping(const TrainControlRequest* msg);
  static void set_has_doping(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::server::TrainControlRequest_DoGetOrSetAddress& dogetorsetaddress(const TrainControlRequest* msg);
  static void set_has_dogetorsetaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::server::TrainControlRequest_DoDropState& dodropstate(const TrainControlRequest* msg);
  static void set_has_dodropstate(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::server::TrainControlRequest_DoChangeSavedState& dochangesavedstate(const TrainControlRequest* msg);
  static void set_has_dochangesavedstate(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::server::TrainControlRequest_DoSendRawCanPacket& dosendrawcanpacket(const TrainControlRequest* msg);
  static void set_has_dosendrawcanpacket(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::server::TrainControlRequest_DoReflashAutomata& doreflashautomata(const TrainControlRequest* msg);
  static void set_has_doreflashautomata(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::server::TrainControlRequest_DoGetLokDb& dogetlokdb(const TrainControlRequest* msg);
  static void set_has_dogetlokdb(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::server::TrainControlRequest_DoGetLokState& dogetlokstate(const TrainControlRequest* msg);
  static void set_has_dogetlokstate(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::server::LokStateProto& dosetlokstate(const TrainControlRequest* msg);
  static void set_has_dosetlokstate(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::server::TrainControlRequest_DoEStopLoco& doestoploco(const TrainControlRequest* msg);
  static void set_has_doestoploco(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::server::TrainControlRequest_DoPicMisc& dopicmisc(const TrainControlRequest* msg);
  static void set_has_dopicmisc(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::server::TrainControlRequest_DoReflashPic& doreflashpic(const TrainControlRequest* msg);
  static void set_has_doreflashpic(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::server::TrainControlRequest_DoGetOrSetCV& dogetorsetcv(const TrainControlRequest* msg);
  static void set_has_dogetorsetcv(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::server::TrainControlRequest_DoWaitForChange& dowaitforchange(const TrainControlRequest* msg);
  static void set_has_dowaitforchange(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::server::TrainControlRequest_DoSetSpeed&
TrainControlRequest::_Internal::dosetspeed(const TrainControlRequest* msg) {
  return *msg->dosetspeed_;
}
const ::server::TrainControlRequest_DoSetAccessory&
TrainControlRequest::_Internal::dosetaccessory(const TrainControlRequest* msg) {
  return *msg->dosetaccessory_;
}
const ::server::TrainControlRequest_DoSetEmergencyStop&
TrainControlRequest::_Internal::dosetemergencystop(const TrainControlRequest* msg) {
  return *msg->dosetemergencystop_;
}
const ::server::TrainControlRequest_DoRpc&
TrainControlRequest::_Internal::dorpc(const TrainControlRequest* msg) {
  return *msg->dorpc_;
}
const ::server::TrainControlRequest_DoPing&
TrainControlRequest::_Internal::doping(const TrainControlRequest* msg) {
  return *msg->doping_;
}
const ::server::TrainControlRequest_DoGetOrSetAddress&
TrainControlRequest::_Internal::dogetorsetaddress(const TrainControlRequest* msg) {
  return *msg->dogetorsetaddress_;
}
const ::server::TrainControlRequest_DoDropState&
TrainControlRequest::_Internal::dodropstate(const TrainControlRequest* msg) {
  return *msg->dodropstate_;
}
const ::server::TrainControlRequest_DoChangeSavedState&
TrainControlRequest::_Internal::dochangesavedstate(const TrainControlRequest* msg) {
  return *msg->dochangesavedstate_;
}
const ::server::TrainControlRequest_DoSendRawCanPacket&
TrainControlRequest::_Internal::dosendrawcanpacket(const TrainControlRequest* msg) {
  return *msg->dosendrawcanpacket_;
}
const ::server::TrainControlRequest_DoReflashAutomata&
TrainControlRequest::_Internal::doreflashautomata(const TrainControlRequest* msg) {
  return *msg->doreflashautomata_;
}
const ::server::TrainControlRequest_DoGetLokDb&
TrainControlRequest::_Internal::dogetlokdb(const TrainControlRequest* msg) {
  return *msg->dogetlokdb_;
}
const ::server::TrainControlRequest_DoGetLokState&
TrainControlRequest::_Internal::dogetlokstate(const TrainControlRequest* msg) {
  return *msg->dogetlokstate_;
}
const ::server::LokStateProto&
TrainControlRequest::_Internal::dosetlokstate(const TrainControlRequest* msg) {
  return *msg->dosetlokstate_;
}
const ::server::TrainControlRequest_DoEStopLoco&
TrainControlRequest::_Internal::doestoploco(const TrainControlRequest* msg) {
  return *msg->doestoploco_;
}
const ::server::TrainControlRequest_DoPicMisc&
TrainControlRequest::_Internal::dopicmisc(const TrainControlRequest* msg) {
  return *msg->dopicmisc_;
}
const ::server::TrainControlRequest_DoReflashPic&
TrainControlRequest::_Internal::doreflashpic(const TrainControlRequest* msg) {
  return *msg->doreflashpic_;
}
const ::server::TrainControlRequest_DoGetOrSetCV&
TrainControlRequest::_Internal::dogetorsetcv(const TrainControlRequest* msg) {
  return *msg->dogetorsetcv_;
}
const ::server::TrainControlRequest_DoWaitForChange&
TrainControlRequest::_Internal::dowaitforchange(const TrainControlRequest* msg) {
  return *msg->dowaitforchange_;
}
TrainControlRequest::TrainControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlRequest)
}
TrainControlRequest::TrainControlRequest(const TrainControlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dosetspeed()) {
    dosetspeed_ = new ::server::TrainControlRequest_DoSetSpeed(*from.dosetspeed_);
  } else {
    dosetspeed_ = nullptr;
  }
  if (from._internal_has_dosetaccessory()) {
    dosetaccessory_ = new ::server::TrainControlRequest_DoSetAccessory(*from.dosetaccessory_);
  } else {
    dosetaccessory_ = nullptr;
  }
  if (from._internal_has_dosetemergencystop()) {
    dosetemergencystop_ = new ::server::TrainControlRequest_DoSetEmergencyStop(*from.dosetemergencystop_);
  } else {
    dosetemergencystop_ = nullptr;
  }
  if (from._internal_has_dorpc()) {
    dorpc_ = new ::server::TrainControlRequest_DoRpc(*from.dorpc_);
  } else {
    dorpc_ = nullptr;
  }
  if (from._internal_has_doping()) {
    doping_ = new ::server::TrainControlRequest_DoPing(*from.doping_);
  } else {
    doping_ = nullptr;
  }
  if (from._internal_has_dogetorsetaddress()) {
    dogetorsetaddress_ = new ::server::TrainControlRequest_DoGetOrSetAddress(*from.dogetorsetaddress_);
  } else {
    dogetorsetaddress_ = nullptr;
  }
  if (from._internal_has_dodropstate()) {
    dodropstate_ = new ::server::TrainControlRequest_DoDropState(*from.dodropstate_);
  } else {
    dodropstate_ = nullptr;
  }
  if (from._internal_has_dochangesavedstate()) {
    dochangesavedstate_ = new ::server::TrainControlRequest_DoChangeSavedState(*from.dochangesavedstate_);
  } else {
    dochangesavedstate_ = nullptr;
  }
  if (from._internal_has_dosendrawcanpacket()) {
    dosendrawcanpacket_ = new ::server::TrainControlRequest_DoSendRawCanPacket(*from.dosendrawcanpacket_);
  } else {
    dosendrawcanpacket_ = nullptr;
  }
  if (from._internal_has_doreflashautomata()) {
    doreflashautomata_ = new ::server::TrainControlRequest_DoReflashAutomata(*from.doreflashautomata_);
  } else {
    doreflashautomata_ = nullptr;
  }
  if (from._internal_has_dogetlokdb()) {
    dogetlokdb_ = new ::server::TrainControlRequest_DoGetLokDb(*from.dogetlokdb_);
  } else {
    dogetlokdb_ = nullptr;
  }
  if (from._internal_has_dogetlokstate()) {
    dogetlokstate_ = new ::server::TrainControlRequest_DoGetLokState(*from.dogetlokstate_);
  } else {
    dogetlokstate_ = nullptr;
  }
  if (from._internal_has_dosetlokstate()) {
    dosetlokstate_ = new ::server::LokStateProto(*from.dosetlokstate_);
  } else {
    dosetlokstate_ = nullptr;
  }
  if (from._internal_has_doestoploco()) {
    doestoploco_ = new ::server::TrainControlRequest_DoEStopLoco(*from.doestoploco_);
  } else {
    doestoploco_ = nullptr;
  }
  if (from._internal_has_dopicmisc()) {
    dopicmisc_ = new ::server::TrainControlRequest_DoPicMisc(*from.dopicmisc_);
  } else {
    dopicmisc_ = nullptr;
  }
  if (from._internal_has_doreflashpic()) {
    doreflashpic_ = new ::server::TrainControlRequest_DoReflashPic(*from.doreflashpic_);
  } else {
    doreflashpic_ = nullptr;
  }
  if (from._internal_has_dogetorsetcv()) {
    dogetorsetcv_ = new ::server::TrainControlRequest_DoGetOrSetCV(*from.dogetorsetcv_);
  } else {
    dogetorsetcv_ = nullptr;
  }
  if (from._internal_has_dowaitforchange()) {
    dowaitforchange_ = new ::server::TrainControlRequest_DoWaitForChange(*from.dowaitforchange_);
  } else {
    dowaitforchange_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:server.TrainControlRequest)
}

void TrainControlRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrainControlRequest_train_5fcontrol_2eproto.base);
  ::memset(&dosetspeed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dowaitforchange_) -
      reinterpret_cast<char*>(&dosetspeed_)) + sizeof(dowaitforchange_));
}

TrainControlRequest::~TrainControlRequest() {
  // @@protoc_insertion_point(destructor:server.TrainControlRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dosetspeed_;
  if (this != internal_default_instance()) delete dosetaccessory_;
  if (this != internal_default_instance()) delete dosetemergencystop_;
  if (this != internal_default_instance()) delete dorpc_;
  if (this != internal_default_instance()) delete doping_;
  if (this != internal_default_instance()) delete dogetorsetaddress_;
  if (this != internal_default_instance()) delete dodropstate_;
  if (this != internal_default_instance()) delete dochangesavedstate_;
  if (this != internal_default_instance()) delete dosendrawcanpacket_;
  if (this != internal_default_instance()) delete doreflashautomata_;
  if (this != internal_default_instance()) delete dogetlokdb_;
  if (this != internal_default_instance()) delete dogetlokstate_;
  if (this != internal_default_instance()) delete dosetlokstate_;
  if (this != internal_default_instance()) delete doestoploco_;
  if (this != internal_default_instance()) delete dopicmisc_;
  if (this != internal_default_instance()) delete doreflashpic_;
  if (this != internal_default_instance()) delete dogetorsetcv_;
  if (this != internal_default_instance()) delete dowaitforchange_;
}

void TrainControlRequest::ArenaDtor(void* object) {
  TrainControlRequest* _this = reinterpret_cast< TrainControlRequest* >(object);
  (void)_this;
}
void TrainControlRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlRequest& TrainControlRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlRequest_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(dosetspeed_ != nullptr);
      dosetspeed_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dosetaccessory_ != nullptr);
      dosetaccessory_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dosetemergencystop_ != nullptr);
      dosetemergencystop_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(dorpc_ != nullptr);
      dorpc_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(doping_ != nullptr);
      doping_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(dogetorsetaddress_ != nullptr);
      dogetorsetaddress_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(dodropstate_ != nullptr);
      dodropstate_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(dochangesavedstate_ != nullptr);
      dochangesavedstate_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(dosendrawcanpacket_ != nullptr);
      dosendrawcanpacket_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(doreflashautomata_ != nullptr);
      doreflashautomata_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(dogetlokdb_ != nullptr);
      dogetlokdb_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(dogetlokstate_ != nullptr);
      dogetlokstate_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(dosetlokstate_ != nullptr);
      dosetlokstate_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(doestoploco_ != nullptr);
      doestoploco_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(dopicmisc_ != nullptr);
      dopicmisc_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(doreflashpic_ != nullptr);
      doreflashpic_->Clear();
    }
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(dogetorsetcv_ != nullptr);
      dogetorsetcv_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(dowaitforchange_ != nullptr);
      dowaitforchange_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional group DoSetSpeed = 1 { ... };
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 11)) {
          ptr = ctx->ParseGroup(_internal_mutable_dosetspeed(), ptr, 11);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group DoSetAccessory = 4 { ... };
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 35)) {
          ptr = ctx->ParseGroup(_internal_mutable_dosetaccessory(), ptr, 35);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group DoSetEmergencyStop = 8 { ... };
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 67)) {
          ptr = ctx->ParseGroup(_internal_mutable_dosetemergencystop(), ptr, 67);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group DoRpc = 16 { ... };
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 131)) {
          ptr = ctx->ParseGroup(_internal_mutable_dorpc(), ptr, 131);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group DoPing = 21 { ... };
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 171)) {
          ptr = ctx->ParseGroup(_internal_mutable_doping(), ptr, 171);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group DoGetOrSetAddress = 23 { ... };
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 187)) {
          ptr = ctx->ParseGroup(_internal_mutable_dogetorsetaddress(), ptr, 187);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group DoDropState = 25 { ... };
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 203)) {
          ptr = ctx->ParseGroup(_internal_mutable_dodropstate(), ptr, 203);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group DoChangeSavedState = 26 { ... };
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 211)) {
          ptr = ctx->ParseGroup(_internal_mutable_dochangesavedstate(), ptr, 211);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group DoSendRawCanPacket = 32 { ... };
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 3)) {
          ptr = ctx->ParseGroup(_internal_mutable_dosendrawcanpacket(), ptr, 259);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group DoReflashAutomata = 40 { ... };
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 67)) {
          ptr = ctx->ParseGroup(_internal_mutable_doreflashautomata(), ptr, 323);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group DoGetLokDb = 41 { ... };
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 75)) {
          ptr = ctx->ParseGroup(_internal_mutable_dogetlokdb(), ptr, 331);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group DoGetLokState = 42 { ... };
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 83)) {
          ptr = ctx->ParseGroup(_internal_mutable_dogetlokstate(), ptr, 339);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .server.LokStateProto DoSetLokState = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_dosetlokstate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group DoEStopLoco = 45 { ... };
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 107)) {
          ptr = ctx->ParseGroup(_internal_mutable_doestoploco(), ptr, 363);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group DoPicMisc = 47 { ... };
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 123)) {
          ptr = ctx->ParseGroup(_internal_mutable_dopicmisc(), ptr, 379);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group DoReflashPic = 50 { ... };
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 147)) {
          ptr = ctx->ParseGroup(_internal_mutable_doreflashpic(), ptr, 403);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group DoGetOrSetCV = 52 { ... };
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 163)) {
          ptr = ctx->ParseGroup(_internal_mutable_dogetorsetcv(), ptr, 419);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group DoWaitForChange = 56 { ... };
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 195)) {
          ptr = ctx->ParseGroup(_internal_mutable_dowaitforchange(), ptr, 451);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional group DoSetSpeed = 1 { ... };
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        1, _Internal::dosetspeed(this), target, stream);
  }

  // optional group DoSetAccessory = 4 { ... };
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        4, _Internal::dosetaccessory(this), target, stream);
  }

  // optional group DoSetEmergencyStop = 8 { ... };
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        8, _Internal::dosetemergencystop(this), target, stream);
  }

  // optional group DoRpc = 16 { ... };
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        16, _Internal::dorpc(this), target, stream);
  }

  // optional group DoPing = 21 { ... };
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        21, _Internal::doping(this), target, stream);
  }

  // optional group DoGetOrSetAddress = 23 { ... };
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        23, _Internal::dogetorsetaddress(this), target, stream);
  }

  // optional group DoDropState = 25 { ... };
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        25, _Internal::dodropstate(this), target, stream);
  }

  // optional group DoChangeSavedState = 26 { ... };
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        26, _Internal::dochangesavedstate(this), target, stream);
  }

  // optional group DoSendRawCanPacket = 32 { ... };
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        32, _Internal::dosendrawcanpacket(this), target, stream);
  }

  // optional group DoReflashAutomata = 40 { ... };
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        40, _Internal::doreflashautomata(this), target, stream);
  }

  // optional group DoGetLokDb = 41 { ... };
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        41, _Internal::dogetlokdb(this), target, stream);
  }

  // optional group DoGetLokState = 42 { ... };
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        42, _Internal::dogetlokstate(this), target, stream);
  }

  // optional .server.LokStateProto DoSetLokState = 44;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::dosetlokstate(this), target, stream);
  }

  // optional group DoEStopLoco = 45 { ... };
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        45, _Internal::doestoploco(this), target, stream);
  }

  // optional group DoPicMisc = 47 { ... };
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        47, _Internal::dopicmisc(this), target, stream);
  }

  // optional group DoReflashPic = 50 { ... };
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        50, _Internal::doreflashpic(this), target, stream);
  }

  // optional group DoGetOrSetCV = 52 { ... };
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        52, _Internal::dogetorsetcv(this), target, stream);
  }

  // optional group DoWaitForChange = 56 { ... };
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        56, _Internal::dowaitforchange(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlRequest)
  return target;
}

size_t TrainControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional group DoSetSpeed = 1 { ... };
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *dosetspeed_);
    }

    // optional group DoSetAccessory = 4 { ... };
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *dosetaccessory_);
    }

    // optional group DoSetEmergencyStop = 8 { ... };
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *dosetemergencystop_);
    }

    // optional group DoRpc = 16 { ... };
    if (cached_has_bits & 0x00000008u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *dorpc_);
    }

    // optional group DoPing = 21 { ... };
    if (cached_has_bits & 0x00000010u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *doping_);
    }

    // optional group DoGetOrSetAddress = 23 { ... };
    if (cached_has_bits & 0x00000020u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *dogetorsetaddress_);
    }

    // optional group DoDropState = 25 { ... };
    if (cached_has_bits & 0x00000040u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *dodropstate_);
    }

    // optional group DoChangeSavedState = 26 { ... };
    if (cached_has_bits & 0x00000080u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *dochangesavedstate_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional group DoSendRawCanPacket = 32 { ... };
    if (cached_has_bits & 0x00000100u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *dosendrawcanpacket_);
    }

    // optional group DoReflashAutomata = 40 { ... };
    if (cached_has_bits & 0x00000200u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *doreflashautomata_);
    }

    // optional group DoGetLokDb = 41 { ... };
    if (cached_has_bits & 0x00000400u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *dogetlokdb_);
    }

    // optional group DoGetLokState = 42 { ... };
    if (cached_has_bits & 0x00000800u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *dogetlokstate_);
    }

    // optional .server.LokStateProto DoSetLokState = 44;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dosetlokstate_);
    }

    // optional group DoEStopLoco = 45 { ... };
    if (cached_has_bits & 0x00002000u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *doestoploco_);
    }

    // optional group DoPicMisc = 47 { ... };
    if (cached_has_bits & 0x00004000u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *dopicmisc_);
    }

    // optional group DoReflashPic = 50 { ... };
    if (cached_has_bits & 0x00008000u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *doreflashpic_);
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional group DoGetOrSetCV = 52 { ... };
    if (cached_has_bits & 0x00010000u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *dogetorsetcv_);
    }

    // optional group DoWaitForChange = 56 { ... };
    if (cached_has_bits & 0x00020000u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *dowaitforchange_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlRequest)
    MergeFrom(*source);
  }
}

void TrainControlRequest::MergeFrom(const TrainControlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_dosetspeed()->::server::TrainControlRequest_DoSetSpeed::MergeFrom(from._internal_dosetspeed());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_dosetaccessory()->::server::TrainControlRequest_DoSetAccessory::MergeFrom(from._internal_dosetaccessory());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_dosetemergencystop()->::server::TrainControlRequest_DoSetEmergencyStop::MergeFrom(from._internal_dosetemergencystop());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_dorpc()->::server::TrainControlRequest_DoRpc::MergeFrom(from._internal_dorpc());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_doping()->::server::TrainControlRequest_DoPing::MergeFrom(from._internal_doping());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_dogetorsetaddress()->::server::TrainControlRequest_DoGetOrSetAddress::MergeFrom(from._internal_dogetorsetaddress());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_dodropstate()->::server::TrainControlRequest_DoDropState::MergeFrom(from._internal_dodropstate());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_dochangesavedstate()->::server::TrainControlRequest_DoChangeSavedState::MergeFrom(from._internal_dochangesavedstate());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_dosendrawcanpacket()->::server::TrainControlRequest_DoSendRawCanPacket::MergeFrom(from._internal_dosendrawcanpacket());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_doreflashautomata()->::server::TrainControlRequest_DoReflashAutomata::MergeFrom(from._internal_doreflashautomata());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_dogetlokdb()->::server::TrainControlRequest_DoGetLokDb::MergeFrom(from._internal_dogetlokdb());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_dogetlokstate()->::server::TrainControlRequest_DoGetLokState::MergeFrom(from._internal_dogetlokstate());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_dosetlokstate()->::server::LokStateProto::MergeFrom(from._internal_dosetlokstate());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_doestoploco()->::server::TrainControlRequest_DoEStopLoco::MergeFrom(from._internal_doestoploco());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_dopicmisc()->::server::TrainControlRequest_DoPicMisc::MergeFrom(from._internal_dopicmisc());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_doreflashpic()->::server::TrainControlRequest_DoReflashPic::MergeFrom(from._internal_doreflashpic());
    }
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_dogetorsetcv()->::server::TrainControlRequest_DoGetOrSetCV::MergeFrom(from._internal_dogetorsetcv());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_dowaitforchange()->::server::TrainControlRequest_DoWaitForChange::MergeFrom(from._internal_dowaitforchange());
    }
  }
}

void TrainControlRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlRequest::CopyFrom(const TrainControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlRequest::IsInitialized() const {
  if (_internal_has_dosetspeed()) {
    if (!dosetspeed_->IsInitialized()) return false;
  }
  if (_internal_has_dosetaccessory()) {
    if (!dosetaccessory_->IsInitialized()) return false;
  }
  if (_internal_has_dorpc()) {
    if (!dorpc_->IsInitialized()) return false;
  }
  if (_internal_has_dochangesavedstate()) {
    if (!dochangesavedstate_->IsInitialized()) return false;
  }
  if (_internal_has_doreflashautomata()) {
    if (!doreflashautomata_->IsInitialized()) return false;
  }
  if (_internal_has_dosetlokstate()) {
    if (!dosetlokstate_->IsInitialized()) return false;
  }
  if (_internal_has_doestoploco()) {
    if (!doestoploco_->IsInitialized()) return false;
  }
  if (_internal_has_dopicmisc()) {
    if (!dopicmisc_->IsInitialized()) return false;
  }
  if (_internal_has_dogetorsetcv()) {
    if (!dogetorsetcv_->IsInitialized()) return false;
  }
  if (_internal_has_dowaitforchange()) {
    if (!dowaitforchange_->IsInitialized()) return false;
  }
  return true;
}

void TrainControlRequest::InternalSwap(TrainControlRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainControlRequest, dowaitforchange_)
      + sizeof(TrainControlRequest::dowaitforchange_)
      - PROTOBUF_FIELD_OFFSET(TrainControlRequest, dosetspeed_)>(
          reinterpret_cast<char*>(&dosetspeed_),
          reinterpret_cast<char*>(&other->dosetspeed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlResponse_Speed::InitAsDefaultInstance() {
}
class TrainControlResponse_Speed::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlResponse_Speed>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

TrainControlResponse_Speed::TrainControlResponse_Speed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlResponse.Speed)
}
TrainControlResponse_Speed::TrainControlResponse_Speed(const TrainControlResponse_Speed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&id_)) + sizeof(dir_));
  // @@protoc_insertion_point(copy_constructor:server.TrainControlResponse.Speed)
}

void TrainControlResponse_Speed::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
  dir_ = 1;
}

TrainControlResponse_Speed::~TrainControlResponse_Speed() {
  // @@protoc_insertion_point(destructor:server.TrainControlResponse.Speed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlResponse_Speed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlResponse_Speed::ArenaDtor(void* object) {
  TrainControlResponse_Speed* _this = reinterpret_cast< TrainControlResponse_Speed* >(object);
  (void)_this;
}
void TrainControlResponse_Speed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlResponse_Speed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlResponse_Speed& TrainControlResponse_Speed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlResponse_Speed_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlResponse_Speed::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlResponse.Speed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
    dir_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlResponse_Speed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dir = 25 [default = 1];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_dir(&has_bits);
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 timestamp = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlResponse_Speed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlResponse.Speed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // required int32 speed = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_speed(), target);
  }

  // optional int32 dir = 25 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_dir(), target);
  }

  // optional uint64 timestamp = 50;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(50, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlResponse.Speed)
  return target;
}

size_t TrainControlResponse_Speed::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:server.TrainControlResponse.Speed)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required int32 id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (_internal_has_speed()) {
    // required int32 speed = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_speed());
  }

  return total_size;
}
size_t TrainControlResponse_Speed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlResponse.Speed)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());

    // required int32 speed = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_speed());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional uint64 timestamp = 50;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_timestamp());
    }

    // optional int32 dir = 25 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dir());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlResponse_Speed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlResponse.Speed)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlResponse_Speed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlResponse_Speed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlResponse.Speed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlResponse.Speed)
    MergeFrom(*source);
  }
}

void TrainControlResponse_Speed::MergeFrom(const TrainControlResponse_Speed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlResponse.Speed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      dir_ = from.dir_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrainControlResponse_Speed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlResponse.Speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlResponse_Speed::CopyFrom(const TrainControlResponse_Speed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlResponse.Speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlResponse_Speed::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrainControlResponse_Speed::InternalSwap(TrainControlResponse_Speed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainControlResponse_Speed, timestamp_)
      + sizeof(TrainControlResponse_Speed::timestamp_)
      - PROTOBUF_FIELD_OFFSET(TrainControlResponse_Speed, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
  swap(dir_, other->dir_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlResponse_Speed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlResponse_Accessory::InitAsDefaultInstance() {
}
class TrainControlResponse_Accessory::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlResponse_Accessory>()._has_bits_);
  static void set_has_train_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accessory_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

TrainControlResponse_Accessory::TrainControlResponse_Accessory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlResponse.Accessory)
}
TrainControlResponse_Accessory::TrainControlResponse_Accessory(const TrainControlResponse_Accessory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&value_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:server.TrainControlResponse.Accessory)
}

void TrainControlResponse_Accessory::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&value_)) + sizeof(timestamp_));
}

TrainControlResponse_Accessory::~TrainControlResponse_Accessory() {
  // @@protoc_insertion_point(destructor:server.TrainControlResponse.Accessory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlResponse_Accessory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlResponse_Accessory::ArenaDtor(void* object) {
  TrainControlResponse_Accessory* _this = reinterpret_cast< TrainControlResponse_Accessory* >(object);
  (void)_this;
}
void TrainControlResponse_Accessory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlResponse_Accessory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlResponse_Accessory& TrainControlResponse_Accessory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlResponse_Accessory_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlResponse_Accessory::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlResponse.Accessory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&value_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlResponse_Accessory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 train_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_train_id(&has_bits);
          train_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 accessory_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_accessory_id(&has_bits);
          accessory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 timestamp = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlResponse_Accessory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlResponse.Accessory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 train_id = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_train_id(), target);
  }

  // required int32 accessory_id = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_accessory_id(), target);
  }

  // required int32 value = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_value(), target);
  }

  // optional uint64 timestamp = 51;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(51, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlResponse.Accessory)
  return target;
}

size_t TrainControlResponse_Accessory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:server.TrainControlResponse.Accessory)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required int32 value = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (_internal_has_train_id()) {
    // required int32 train_id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_train_id());
  }

  if (_internal_has_accessory_id()) {
    // required int32 accessory_id = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_accessory_id());
  }

  return total_size;
}
size_t TrainControlResponse_Accessory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlResponse.Accessory)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 value = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());

    // required int32 train_id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_train_id());

    // required int32 accessory_id = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_accessory_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 timestamp = 51;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlResponse_Accessory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlResponse.Accessory)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlResponse_Accessory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlResponse_Accessory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlResponse.Accessory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlResponse.Accessory)
    MergeFrom(*source);
  }
}

void TrainControlResponse_Accessory::MergeFrom(const TrainControlResponse_Accessory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlResponse.Accessory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      train_id_ = from.train_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      accessory_id_ = from.accessory_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrainControlResponse_Accessory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlResponse.Accessory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlResponse_Accessory::CopyFrom(const TrainControlResponse_Accessory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlResponse.Accessory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlResponse_Accessory::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrainControlResponse_Accessory::InternalSwap(TrainControlResponse_Accessory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainControlResponse_Accessory, timestamp_)
      + sizeof(TrainControlResponse_Accessory::timestamp_)
      - PROTOBUF_FIELD_OFFSET(TrainControlResponse_Accessory, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlResponse_Accessory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlResponse_EmergencyStop::InitAsDefaultInstance() {
}
class TrainControlResponse_EmergencyStop::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlResponse_EmergencyStop>()._has_bits_);
  static void set_has_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TrainControlResponse_EmergencyStop::TrainControlResponse_EmergencyStop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlResponse.EmergencyStop)
}
TrainControlResponse_EmergencyStop::TrainControlResponse_EmergencyStop(const TrainControlResponse_EmergencyStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stop_ = from.stop_;
  // @@protoc_insertion_point(copy_constructor:server.TrainControlResponse.EmergencyStop)
}

void TrainControlResponse_EmergencyStop::SharedCtor() {
  stop_ = false;
}

TrainControlResponse_EmergencyStop::~TrainControlResponse_EmergencyStop() {
  // @@protoc_insertion_point(destructor:server.TrainControlResponse.EmergencyStop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlResponse_EmergencyStop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlResponse_EmergencyStop::ArenaDtor(void* object) {
  TrainControlResponse_EmergencyStop* _this = reinterpret_cast< TrainControlResponse_EmergencyStop* >(object);
  (void)_this;
}
void TrainControlResponse_EmergencyStop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlResponse_EmergencyStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlResponse_EmergencyStop& TrainControlResponse_EmergencyStop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlResponse_EmergencyStop_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlResponse_EmergencyStop::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlResponse.EmergencyStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlResponse_EmergencyStop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool stop = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_stop(&has_bits);
          stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlResponse_EmergencyStop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlResponse.EmergencyStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool stop = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_stop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlResponse.EmergencyStop)
  return target;
}

size_t TrainControlResponse_EmergencyStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlResponse.EmergencyStop)
  size_t total_size = 0;

  // required bool stop = 9;
  if (_internal_has_stop()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlResponse_EmergencyStop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlResponse.EmergencyStop)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlResponse_EmergencyStop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlResponse_EmergencyStop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlResponse.EmergencyStop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlResponse.EmergencyStop)
    MergeFrom(*source);
  }
}

void TrainControlResponse_EmergencyStop::MergeFrom(const TrainControlResponse_EmergencyStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlResponse.EmergencyStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stop()) {
    _internal_set_stop(from._internal_stop());
  }
}

void TrainControlResponse_EmergencyStop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlResponse.EmergencyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlResponse_EmergencyStop::CopyFrom(const TrainControlResponse_EmergencyStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlResponse.EmergencyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlResponse_EmergencyStop::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrainControlResponse_EmergencyStop::InternalSwap(TrainControlResponse_EmergencyStop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stop_, other->stop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlResponse_EmergencyStop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlResponse_RpcResponse::InitAsDefaultInstance() {
}
class TrainControlResponse_RpcResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlResponse_RpcResponse>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

TrainControlResponse_RpcResponse::TrainControlResponse_RpcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlResponse.RpcResponse)
}
TrainControlResponse_RpcResponse::TrainControlResponse_RpcResponse(const TrainControlResponse_RpcResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&success_)) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:server.TrainControlResponse.RpcResponse)
}

void TrainControlResponse_RpcResponse::SharedCtor() {
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&success_)) + sizeof(response_));
}

TrainControlResponse_RpcResponse::~TrainControlResponse_RpcResponse() {
  // @@protoc_insertion_point(destructor:server.TrainControlResponse.RpcResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlResponse_RpcResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlResponse_RpcResponse::ArenaDtor(void* object) {
  TrainControlResponse_RpcResponse* _this = reinterpret_cast< TrainControlResponse_RpcResponse* >(object);
  (void)_this;
}
void TrainControlResponse_RpcResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlResponse_RpcResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlResponse_RpcResponse& TrainControlResponse_RpcResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlResponse_RpcResponse_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlResponse_RpcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlResponse.RpcResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&success_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&response_) -
        reinterpret_cast<char*>(&success_)) + sizeof(response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlResponse_RpcResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool success = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 response = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_response(&has_bits);
          response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlResponse_RpcResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlResponse.RpcResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 17;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_success(), target);
  }

  // required int32 response = 18;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlResponse.RpcResponse)
  return target;
}

size_t TrainControlResponse_RpcResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:server.TrainControlResponse.RpcResponse)
  size_t total_size = 0;

  if (_internal_has_success()) {
    // required bool success = 17;
    total_size += 2 + 1;
  }

  if (_internal_has_response()) {
    // required int32 response = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_response());
  }

  return total_size;
}
size_t TrainControlResponse_RpcResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlResponse.RpcResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bool success = 17;
    total_size += 2 + 1;

    // required int32 response = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_response());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlResponse_RpcResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlResponse.RpcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlResponse_RpcResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlResponse_RpcResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlResponse.RpcResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlResponse.RpcResponse)
    MergeFrom(*source);
  }
}

void TrainControlResponse_RpcResponse::MergeFrom(const TrainControlResponse_RpcResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlResponse.RpcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000002u) {
      response_ = from.response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrainControlResponse_RpcResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlResponse.RpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlResponse_RpcResponse::CopyFrom(const TrainControlResponse_RpcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlResponse.RpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlResponse_RpcResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrainControlResponse_RpcResponse::InternalSwap(TrainControlResponse_RpcResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainControlResponse_RpcResponse, response_)
      + sizeof(TrainControlResponse_RpcResponse::response_)
      - PROTOBUF_FIELD_OFFSET(TrainControlResponse_RpcResponse, success_)>(
          reinterpret_cast<char*>(&success_),
          reinterpret_cast<char*>(&other->success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlResponse_RpcResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlResponse_Pong::InitAsDefaultInstance() {
}
class TrainControlResponse_Pong::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlResponse_Pong>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TrainControlResponse_Pong::TrainControlResponse_Pong(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlResponse.Pong)
}
TrainControlResponse_Pong::TrainControlResponse_Pong(const TrainControlResponse_Pong& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:server.TrainControlResponse.Pong)
}

void TrainControlResponse_Pong::SharedCtor() {
  value_ = 0;
}

TrainControlResponse_Pong::~TrainControlResponse_Pong() {
  // @@protoc_insertion_point(destructor:server.TrainControlResponse.Pong)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlResponse_Pong::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlResponse_Pong::ArenaDtor(void* object) {
  TrainControlResponse_Pong* _this = reinterpret_cast< TrainControlResponse_Pong* >(object);
  (void)_this;
}
void TrainControlResponse_Pong::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlResponse_Pong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlResponse_Pong& TrainControlResponse_Pong::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlResponse_Pong_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlResponse_Pong::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlResponse.Pong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlResponse_Pong::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 value = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlResponse_Pong::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlResponse.Pong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 value = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlResponse.Pong)
  return target;
}

size_t TrainControlResponse_Pong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlResponse.Pong)
  size_t total_size = 0;

  // required int32 value = 20;
  if (_internal_has_value()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlResponse_Pong::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlResponse.Pong)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlResponse_Pong* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlResponse_Pong>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlResponse.Pong)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlResponse.Pong)
    MergeFrom(*source);
  }
}

void TrainControlResponse_Pong::MergeFrom(const TrainControlResponse_Pong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlResponse.Pong)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
}

void TrainControlResponse_Pong::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlResponse.Pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlResponse_Pong::CopyFrom(const TrainControlResponse_Pong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlResponse.Pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlResponse_Pong::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrainControlResponse_Pong::InternalSwap(TrainControlResponse_Pong* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlResponse_Pong::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlResponse_CurrentAddress::InitAsDefaultInstance() {
}
class TrainControlResponse_CurrentAddress::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlResponse_CurrentAddress>()._has_bits_);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TrainControlResponse_CurrentAddress::TrainControlResponse_CurrentAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlResponse.CurrentAddress)
}
TrainControlResponse_CurrentAddress::TrainControlResponse_CurrentAddress(const TrainControlResponse_CurrentAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_ = from.address_;
  // @@protoc_insertion_point(copy_constructor:server.TrainControlResponse.CurrentAddress)
}

void TrainControlResponse_CurrentAddress::SharedCtor() {
  address_ = 0;
}

TrainControlResponse_CurrentAddress::~TrainControlResponse_CurrentAddress() {
  // @@protoc_insertion_point(destructor:server.TrainControlResponse.CurrentAddress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlResponse_CurrentAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlResponse_CurrentAddress::ArenaDtor(void* object) {
  TrainControlResponse_CurrentAddress* _this = reinterpret_cast< TrainControlResponse_CurrentAddress* >(object);
  (void)_this;
}
void TrainControlResponse_CurrentAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlResponse_CurrentAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlResponse_CurrentAddress& TrainControlResponse_CurrentAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlResponse_CurrentAddress_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlResponse_CurrentAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlResponse.CurrentAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlResponse_CurrentAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 address = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_address(&has_bits);
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlResponse_CurrentAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlResponse.CurrentAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 address = 22;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlResponse.CurrentAddress)
  return target;
}

size_t TrainControlResponse_CurrentAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlResponse.CurrentAddress)
  size_t total_size = 0;

  // required int32 address = 22;
  if (_internal_has_address()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_address());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlResponse_CurrentAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlResponse.CurrentAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlResponse_CurrentAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlResponse_CurrentAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlResponse.CurrentAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlResponse.CurrentAddress)
    MergeFrom(*source);
  }
}

void TrainControlResponse_CurrentAddress::MergeFrom(const TrainControlResponse_CurrentAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlResponse.CurrentAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_address()) {
    _internal_set_address(from._internal_address());
  }
}

void TrainControlResponse_CurrentAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlResponse.CurrentAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlResponse_CurrentAddress::CopyFrom(const TrainControlResponse_CurrentAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlResponse.CurrentAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlResponse_CurrentAddress::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrainControlResponse_CurrentAddress::InternalSwap(TrainControlResponse_CurrentAddress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(address_, other->address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlResponse_CurrentAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlResponse_RawCanPacket::InitAsDefaultInstance() {
}
class TrainControlResponse_RawCanPacket::_Internal {
 public:
};

TrainControlResponse_RawCanPacket::TrainControlResponse_RawCanPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlResponse.RawCanPacket)
}
TrainControlResponse_RawCanPacket::TrainControlResponse_RawCanPacket(const TrainControlResponse_RawCanPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:server.TrainControlResponse.RawCanPacket)
}

void TrainControlResponse_RawCanPacket::SharedCtor() {
}

TrainControlResponse_RawCanPacket::~TrainControlResponse_RawCanPacket() {
  // @@protoc_insertion_point(destructor:server.TrainControlResponse.RawCanPacket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlResponse_RawCanPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlResponse_RawCanPacket::ArenaDtor(void* object) {
  TrainControlResponse_RawCanPacket* _this = reinterpret_cast< TrainControlResponse_RawCanPacket* >(object);
  (void)_this;
}
void TrainControlResponse_RawCanPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlResponse_RawCanPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlResponse_RawCanPacket& TrainControlResponse_RawCanPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlResponse_RawCanPacket_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlResponse_RawCanPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlResponse.RawCanPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlResponse_RawCanPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 data = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<192>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlResponse_RawCanPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlResponse.RawCanPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 data = 24;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_data(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlResponse.RawCanPacket)
  return target;
}

size_t TrainControlResponse_RawCanPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlResponse.RawCanPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 data = 24;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->data_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlResponse_RawCanPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlResponse.RawCanPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlResponse_RawCanPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlResponse_RawCanPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlResponse.RawCanPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlResponse.RawCanPacket)
    MergeFrom(*source);
  }
}

void TrainControlResponse_RawCanPacket::MergeFrom(const TrainControlResponse_RawCanPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlResponse.RawCanPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void TrainControlResponse_RawCanPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlResponse.RawCanPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlResponse_RawCanPacket::CopyFrom(const TrainControlResponse_RawCanPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlResponse.RawCanPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlResponse_RawCanPacket::IsInitialized() const {
  return true;
}

void TrainControlResponse_RawCanPacket::InternalSwap(TrainControlResponse_RawCanPacket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlResponse_RawCanPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlResponse_ReflashAutomata::InitAsDefaultInstance() {
}
class TrainControlResponse_ReflashAutomata::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlResponse_ReflashAutomata>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrainControlResponse_ReflashAutomata::TrainControlResponse_ReflashAutomata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlResponse.ReflashAutomata)
}
TrainControlResponse_ReflashAutomata::TrainControlResponse_ReflashAutomata(const TrainControlResponse_ReflashAutomata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error()) {
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:server.TrainControlResponse.ReflashAutomata)
}

void TrainControlResponse_ReflashAutomata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrainControlResponse_ReflashAutomata_train_5fcontrol_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TrainControlResponse_ReflashAutomata::~TrainControlResponse_ReflashAutomata() {
  // @@protoc_insertion_point(destructor:server.TrainControlResponse.ReflashAutomata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlResponse_ReflashAutomata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrainControlResponse_ReflashAutomata::ArenaDtor(void* object) {
  TrainControlResponse_ReflashAutomata* _this = reinterpret_cast< TrainControlResponse_ReflashAutomata* >(object);
  (void)_this;
}
void TrainControlResponse_ReflashAutomata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlResponse_ReflashAutomata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlResponse_ReflashAutomata& TrainControlResponse_ReflashAutomata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlResponse_ReflashAutomata_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlResponse_ReflashAutomata::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlResponse.ReflashAutomata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlResponse_ReflashAutomata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string error = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TrainControlResponse.ReflashAutomata.error");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlResponse_ReflashAutomata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlResponse.ReflashAutomata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string error = 26;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "server.TrainControlResponse.ReflashAutomata.error");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlResponse.ReflashAutomata)
  return target;
}

size_t TrainControlResponse_ReflashAutomata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlResponse.ReflashAutomata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error = 26;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlResponse_ReflashAutomata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlResponse.ReflashAutomata)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlResponse_ReflashAutomata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlResponse_ReflashAutomata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlResponse.ReflashAutomata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlResponse.ReflashAutomata)
    MergeFrom(*source);
  }
}

void TrainControlResponse_ReflashAutomata::MergeFrom(const TrainControlResponse_ReflashAutomata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlResponse.ReflashAutomata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _internal_set_error(from._internal_error());
  }
}

void TrainControlResponse_ReflashAutomata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlResponse.ReflashAutomata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlResponse_ReflashAutomata::CopyFrom(const TrainControlResponse_ReflashAutomata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlResponse.ReflashAutomata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlResponse_ReflashAutomata::IsInitialized() const {
  return true;
}

void TrainControlResponse_ReflashAutomata::InternalSwap(TrainControlResponse_ReflashAutomata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlResponse_ReflashAutomata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlResponse_LokDb_Lok_Function::InitAsDefaultInstance() {
}
class TrainControlResponse_LokDb_Lok_Function::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlResponse_LokDb_Lok_Function>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TrainControlResponse_LokDb_Lok_Function::TrainControlResponse_LokDb_Lok_Function(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlResponse.LokDb.Lok.Function)
}
TrainControlResponse_LokDb_Lok_Function::TrainControlResponse_LokDb_Lok_Function(const TrainControlResponse_LokDb_Lok_Function& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:server.TrainControlResponse.LokDb.Lok.Function)
}

void TrainControlResponse_LokDb_Lok_Function::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

TrainControlResponse_LokDb_Lok_Function::~TrainControlResponse_LokDb_Lok_Function() {
  // @@protoc_insertion_point(destructor:server.TrainControlResponse.LokDb.Lok.Function)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlResponse_LokDb_Lok_Function::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlResponse_LokDb_Lok_Function::ArenaDtor(void* object) {
  TrainControlResponse_LokDb_Lok_Function* _this = reinterpret_cast< TrainControlResponse_LokDb_Lok_Function* >(object);
  (void)_this;
}
void TrainControlResponse_LokDb_Lok_Function::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlResponse_LokDb_Lok_Function::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlResponse_LokDb_Lok_Function& TrainControlResponse_LokDb_Lok_Function::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlResponse_LokDb_Lok_Function_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlResponse_LokDb_Lok_Function::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlResponse.LokDb.Lok.Function)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlResponse_LokDb_Lok_Function::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlResponse_LokDb_Lok_Function::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlResponse.LokDb.Lok.Function)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 34;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_id(), target);
  }

  // optional int32 type = 35;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlResponse.LokDb.Lok.Function)
  return target;
}

size_t TrainControlResponse_LokDb_Lok_Function::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlResponse.LokDb.Lok.Function)
  size_t total_size = 0;

  // required int32 id = 34;
  if (_internal_has_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 type = 35;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlResponse_LokDb_Lok_Function::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlResponse.LokDb.Lok.Function)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlResponse_LokDb_Lok_Function* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlResponse_LokDb_Lok_Function>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlResponse.LokDb.Lok.Function)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlResponse.LokDb.Lok.Function)
    MergeFrom(*source);
  }
}

void TrainControlResponse_LokDb_Lok_Function::MergeFrom(const TrainControlResponse_LokDb_Lok_Function& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlResponse.LokDb.Lok.Function)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrainControlResponse_LokDb_Lok_Function::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlResponse.LokDb.Lok.Function)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlResponse_LokDb_Lok_Function::CopyFrom(const TrainControlResponse_LokDb_Lok_Function& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlResponse.LokDb.Lok.Function)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlResponse_LokDb_Lok_Function::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrainControlResponse_LokDb_Lok_Function::InternalSwap(TrainControlResponse_LokDb_Lok_Function* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainControlResponse_LokDb_Lok_Function, type_)
      + sizeof(TrainControlResponse_LokDb_Lok_Function::type_)
      - PROTOBUF_FIELD_OFFSET(TrainControlResponse_LokDb_Lok_Function, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlResponse_LokDb_Lok_Function::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlResponse_LokDb_Lok::InitAsDefaultInstance() {
}
class TrainControlResponse_LokDb_Lok::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlResponse_LokDb_Lok>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

TrainControlResponse_LokDb_Lok::TrainControlResponse_LokDb_Lok(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  function_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlResponse.LokDb.Lok)
}
TrainControlResponse_LokDb_Lok::TrainControlResponse_LokDb_Lok(const TrainControlResponse_LokDb_Lok& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      function_(from.function_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&address_) -
    reinterpret_cast<char*>(&id_)) + sizeof(address_));
  // @@protoc_insertion_point(copy_constructor:server.TrainControlResponse.LokDb.Lok)
}

void TrainControlResponse_LokDb_Lok::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrainControlResponse_LokDb_Lok_train_5fcontrol_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&address_) -
      reinterpret_cast<char*>(&id_)) + sizeof(address_));
}

TrainControlResponse_LokDb_Lok::~TrainControlResponse_LokDb_Lok() {
  // @@protoc_insertion_point(destructor:server.TrainControlResponse.LokDb.Lok)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlResponse_LokDb_Lok::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrainControlResponse_LokDb_Lok::ArenaDtor(void* object) {
  TrainControlResponse_LokDb_Lok* _this = reinterpret_cast< TrainControlResponse_LokDb_Lok* >(object);
  (void)_this;
}
void TrainControlResponse_LokDb_Lok::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlResponse_LokDb_Lok::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlResponse_LokDb_Lok& TrainControlResponse_LokDb_Lok::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlResponse_LokDb_Lok_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlResponse_LokDb_Lok::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlResponse.LokDb.Lok)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  function_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&address_) -
        reinterpret_cast<char*>(&id_)) + sizeof(address_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlResponse_LokDb_Lok::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TrainControlResponse.LokDb.Lok.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 address = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_address(&has_bits);
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated group Function = 33 { ... };
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 11)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseGroup(_internal_add_function(), ptr, 267);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<267>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlResponse_LokDb_Lok::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlResponse.LokDb.Lok)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 30;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_id(), target);
  }

  // optional string name = 31;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "server.TrainControlResponse.LokDb.Lok.name");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_name(), target);
  }

  // optional int32 address = 32;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->_internal_address(), target);
  }

  // repeated group Function = 33 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_function_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(33, this->_internal_function(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlResponse.LokDb.Lok)
  return target;
}

size_t TrainControlResponse_LokDb_Lok::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlResponse.LokDb.Lok)
  size_t total_size = 0;

  // required int32 id = 30;
  if (_internal_has_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated group Function = 33 { ... };
  total_size += 4UL * this->_internal_function_size();
  for (const auto& msg : this->function_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  // optional string name = 31;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // optional int32 address = 32;
  if (cached_has_bits & 0x00000004u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlResponse_LokDb_Lok::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlResponse.LokDb.Lok)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlResponse_LokDb_Lok* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlResponse_LokDb_Lok>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlResponse.LokDb.Lok)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlResponse.LokDb.Lok)
    MergeFrom(*source);
  }
}

void TrainControlResponse_LokDb_Lok::MergeFrom(const TrainControlResponse_LokDb_Lok& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlResponse.LokDb.Lok)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  function_.MergeFrom(from.function_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      address_ = from.address_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrainControlResponse_LokDb_Lok::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlResponse.LokDb.Lok)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlResponse_LokDb_Lok::CopyFrom(const TrainControlResponse_LokDb_Lok& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlResponse.LokDb.Lok)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlResponse_LokDb_Lok::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(function_)) return false;
  return true;
}

void TrainControlResponse_LokDb_Lok::InternalSwap(TrainControlResponse_LokDb_Lok* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  function_.InternalSwap(&other->function_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainControlResponse_LokDb_Lok, address_)
      + sizeof(TrainControlResponse_LokDb_Lok::address_)
      - PROTOBUF_FIELD_OFFSET(TrainControlResponse_LokDb_Lok, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlResponse_LokDb_Lok::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlResponse_LokDb::InitAsDefaultInstance() {
}
class TrainControlResponse_LokDb::_Internal {
 public:
};

TrainControlResponse_LokDb::TrainControlResponse_LokDb(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lok_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlResponse.LokDb)
}
TrainControlResponse_LokDb::TrainControlResponse_LokDb(const TrainControlResponse_LokDb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lok_(from.lok_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:server.TrainControlResponse.LokDb)
}

void TrainControlResponse_LokDb::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrainControlResponse_LokDb_train_5fcontrol_2eproto.base);
}

TrainControlResponse_LokDb::~TrainControlResponse_LokDb() {
  // @@protoc_insertion_point(destructor:server.TrainControlResponse.LokDb)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlResponse_LokDb::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlResponse_LokDb::ArenaDtor(void* object) {
  TrainControlResponse_LokDb* _this = reinterpret_cast< TrainControlResponse_LokDb* >(object);
  (void)_this;
}
void TrainControlResponse_LokDb::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlResponse_LokDb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlResponse_LokDb& TrainControlResponse_LokDb::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlResponse_LokDb_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlResponse_LokDb::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlResponse.LokDb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lok_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlResponse_LokDb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated group Lok = 29 { ... };
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 235)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseGroup(_internal_add_lok(), ptr, 235);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<235>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlResponse_LokDb::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlResponse.LokDb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated group Lok = 29 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lok_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(29, this->_internal_lok(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlResponse.LokDb)
  return target;
}

size_t TrainControlResponse_LokDb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlResponse.LokDb)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated group Lok = 29 { ... };
  total_size += 4UL * this->_internal_lok_size();
  for (const auto& msg : this->lok_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlResponse_LokDb::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlResponse.LokDb)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlResponse_LokDb* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlResponse_LokDb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlResponse.LokDb)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlResponse.LokDb)
    MergeFrom(*source);
  }
}

void TrainControlResponse_LokDb::MergeFrom(const TrainControlResponse_LokDb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlResponse.LokDb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lok_.MergeFrom(from.lok_);
}

void TrainControlResponse_LokDb::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlResponse.LokDb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlResponse_LokDb::CopyFrom(const TrainControlResponse_LokDb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlResponse.LokDb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlResponse_LokDb::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(lok_)) return false;
  return true;
}

void TrainControlResponse_LokDb::InternalSwap(TrainControlResponse_LokDb* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lok_.InternalSwap(&other->lok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlResponse_LokDb::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlResponse_PicMisc::InitAsDefaultInstance() {
}
class TrainControlResponse_PicMisc::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlResponse_PicMisc>()._has_bits_);
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_arg1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_arg2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

TrainControlResponse_PicMisc::TrainControlResponse_PicMisc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  more_arg_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlResponse.PicMisc)
}
TrainControlResponse_PicMisc::TrainControlResponse_PicMisc(const TrainControlResponse_PicMisc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      more_arg_(from.more_arg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cmd_, &from.cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&arg2_) -
    reinterpret_cast<char*>(&cmd_)) + sizeof(arg2_));
  // @@protoc_insertion_point(copy_constructor:server.TrainControlResponse.PicMisc)
}

void TrainControlResponse_PicMisc::SharedCtor() {
  ::memset(&cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arg2_) -
      reinterpret_cast<char*>(&cmd_)) + sizeof(arg2_));
}

TrainControlResponse_PicMisc::~TrainControlResponse_PicMisc() {
  // @@protoc_insertion_point(destructor:server.TrainControlResponse.PicMisc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlResponse_PicMisc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlResponse_PicMisc::ArenaDtor(void* object) {
  TrainControlResponse_PicMisc* _this = reinterpret_cast< TrainControlResponse_PicMisc* >(object);
  (void)_this;
}
void TrainControlResponse_PicMisc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlResponse_PicMisc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlResponse_PicMisc& TrainControlResponse_PicMisc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlResponse_PicMisc_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlResponse_PicMisc::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlResponse.PicMisc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  more_arg_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&cmd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&arg2_) -
        reinterpret_cast<char*>(&cmd_)) + sizeof(arg2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlResponse_PicMisc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 cmd = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_cmd(&has_bits);
          cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 status = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 arg1 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_arg1(&has_bits);
          arg1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 arg2 = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_arg2(&has_bits);
          arg2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 more_arg = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_more_arg(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<336>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_more_arg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlResponse_PicMisc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlResponse.PicMisc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 cmd = 38;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->_internal_cmd(), target);
  }

  // required int32 status = 39;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->_internal_status(), target);
  }

  // required int32 arg1 = 40;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_arg1(), target);
  }

  // required int32 arg2 = 41;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(41, this->_internal_arg2(), target);
  }

  // repeated int32 more_arg = 42;
  for (int i = 0, n = this->_internal_more_arg_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(42, this->_internal_more_arg(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlResponse.PicMisc)
  return target;
}

size_t TrainControlResponse_PicMisc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:server.TrainControlResponse.PicMisc)
  size_t total_size = 0;

  if (_internal_has_cmd()) {
    // required int32 cmd = 38;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cmd());
  }

  if (_internal_has_status()) {
    // required int32 status = 39;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (_internal_has_arg1()) {
    // required int32 arg1 = 40;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arg1());
  }

  if (_internal_has_arg2()) {
    // required int32 arg2 = 41;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arg2());
  }

  return total_size;
}
size_t TrainControlResponse_PicMisc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlResponse.PicMisc)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 cmd = 38;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cmd());

    // required int32 status = 39;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());

    // required int32 arg1 = 40;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arg1());

    // required int32 arg2 = 41;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arg2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 more_arg = 42;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->more_arg_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_more_arg_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlResponse_PicMisc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlResponse.PicMisc)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlResponse_PicMisc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlResponse_PicMisc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlResponse.PicMisc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlResponse.PicMisc)
    MergeFrom(*source);
  }
}

void TrainControlResponse_PicMisc::MergeFrom(const TrainControlResponse_PicMisc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlResponse.PicMisc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  more_arg_.MergeFrom(from.more_arg_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      cmd_ = from.cmd_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      arg1_ = from.arg1_;
    }
    if (cached_has_bits & 0x00000008u) {
      arg2_ = from.arg2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrainControlResponse_PicMisc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlResponse.PicMisc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlResponse_PicMisc::CopyFrom(const TrainControlResponse_PicMisc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlResponse.PicMisc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlResponse_PicMisc::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrainControlResponse_PicMisc::InternalSwap(TrainControlResponse_PicMisc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  more_arg_.InternalSwap(&other->more_arg_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainControlResponse_PicMisc, arg2_)
      + sizeof(TrainControlResponse_PicMisc::arg2_)
      - PROTOBUF_FIELD_OFFSET(TrainControlResponse_PicMisc, cmd_)>(
          reinterpret_cast<char*>(&cmd_),
          reinterpret_cast<char*>(&other->cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlResponse_PicMisc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlResponse_ReflashPic::InitAsDefaultInstance() {
}
class TrainControlResponse_ReflashPic::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlResponse_ReflashPic>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrainControlResponse_ReflashPic::TrainControlResponse_ReflashPic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlResponse.ReflashPic)
}
TrainControlResponse_ReflashPic::TrainControlResponse_ReflashPic(const TrainControlResponse_ReflashPic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error()) {
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:server.TrainControlResponse.ReflashPic)
}

void TrainControlResponse_ReflashPic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrainControlResponse_ReflashPic_train_5fcontrol_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TrainControlResponse_ReflashPic::~TrainControlResponse_ReflashPic() {
  // @@protoc_insertion_point(destructor:server.TrainControlResponse.ReflashPic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlResponse_ReflashPic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrainControlResponse_ReflashPic::ArenaDtor(void* object) {
  TrainControlResponse_ReflashPic* _this = reinterpret_cast< TrainControlResponse_ReflashPic* >(object);
  (void)_this;
}
void TrainControlResponse_ReflashPic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlResponse_ReflashPic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlResponse_ReflashPic& TrainControlResponse_ReflashPic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlResponse_ReflashPic_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlResponse_ReflashPic::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlResponse.ReflashPic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlResponse_ReflashPic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string error = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TrainControlResponse.ReflashPic.error");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlResponse_ReflashPic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlResponse.ReflashPic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string error = 44;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "server.TrainControlResponse.ReflashPic.error");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlResponse.ReflashPic)
  return target;
}

size_t TrainControlResponse_ReflashPic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlResponse.ReflashPic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error = 44;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlResponse_ReflashPic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlResponse.ReflashPic)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlResponse_ReflashPic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlResponse_ReflashPic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlResponse.ReflashPic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlResponse.ReflashPic)
    MergeFrom(*source);
  }
}

void TrainControlResponse_ReflashPic::MergeFrom(const TrainControlResponse_ReflashPic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlResponse.ReflashPic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _internal_set_error(from._internal_error());
  }
}

void TrainControlResponse_ReflashPic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlResponse.ReflashPic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlResponse_ReflashPic::CopyFrom(const TrainControlResponse_ReflashPic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlResponse.ReflashPic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlResponse_ReflashPic::IsInitialized() const {
  return true;
}

void TrainControlResponse_ReflashPic::InternalSwap(TrainControlResponse_ReflashPic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlResponse_ReflashPic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlResponse_Cv::InitAsDefaultInstance() {
}
class TrainControlResponse_Cv::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlResponse_Cv>()._has_bits_);
  static void set_has_train_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cv(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

TrainControlResponse_Cv::TrainControlResponse_Cv(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlResponse.Cv)
}
TrainControlResponse_Cv::TrainControlResponse_Cv(const TrainControlResponse_Cv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&train_id_, &from.train_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&train_id_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:server.TrainControlResponse.Cv)
}

void TrainControlResponse_Cv::SharedCtor() {
  ::memset(&train_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&train_id_)) + sizeof(value_));
}

TrainControlResponse_Cv::~TrainControlResponse_Cv() {
  // @@protoc_insertion_point(destructor:server.TrainControlResponse.Cv)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlResponse_Cv::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlResponse_Cv::ArenaDtor(void* object) {
  TrainControlResponse_Cv* _this = reinterpret_cast< TrainControlResponse_Cv* >(object);
  (void)_this;
}
void TrainControlResponse_Cv::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlResponse_Cv::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlResponse_Cv& TrainControlResponse_Cv::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlResponse_Cv_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlResponse_Cv::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlResponse.Cv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&train_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&train_id_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlResponse_Cv::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 train_id = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_train_id(&has_bits);
          train_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 cv = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_cv(&has_bits);
          cv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 error_code = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_error_code(&has_bits);
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 value = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlResponse_Cv::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlResponse.Cv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 train_id = 46;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(46, this->_internal_train_id(), target);
  }

  // required int32 cv = 47;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(47, this->_internal_cv(), target);
  }

  // optional int32 error_code = 48;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(48, this->_internal_error_code(), target);
  }

  // optional int32 value = 49;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(49, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlResponse.Cv)
  return target;
}

size_t TrainControlResponse_Cv::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:server.TrainControlResponse.Cv)
  size_t total_size = 0;

  if (_internal_has_train_id()) {
    // required int32 train_id = 46;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_train_id());
  }

  if (_internal_has_cv()) {
    // required int32 cv = 47;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cv());
  }

  return total_size;
}
size_t TrainControlResponse_Cv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlResponse.Cv)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 train_id = 46;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_train_id());

    // required int32 cv = 47;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cv());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional int32 error_code = 48;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_error_code());
    }

    // optional int32 value = 49;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlResponse_Cv::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlResponse.Cv)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlResponse_Cv* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlResponse_Cv>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlResponse.Cv)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlResponse.Cv)
    MergeFrom(*source);
  }
}

void TrainControlResponse_Cv::MergeFrom(const TrainControlResponse_Cv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlResponse.Cv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      train_id_ = from.train_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      cv_ = from.cv_;
    }
    if (cached_has_bits & 0x00000004u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrainControlResponse_Cv::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlResponse.Cv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlResponse_Cv::CopyFrom(const TrainControlResponse_Cv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlResponse.Cv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlResponse_Cv::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrainControlResponse_Cv::InternalSwap(TrainControlResponse_Cv* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainControlResponse_Cv, value_)
      + sizeof(TrainControlResponse_Cv::value_)
      - PROTOBUF_FIELD_OFFSET(TrainControlResponse_Cv, train_id_)>(
          reinterpret_cast<char*>(&train_id_),
          reinterpret_cast<char*>(&other->train_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlResponse_Cv::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlResponse_WaitForChangeResponse::InitAsDefaultInstance() {
}
class TrainControlResponse_WaitForChangeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlResponse_WaitForChangeResponse>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

TrainControlResponse_WaitForChangeResponse::TrainControlResponse_WaitForChangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlResponse.WaitForChangeResponse)
}
TrainControlResponse_WaitForChangeResponse::TrainControlResponse_WaitForChangeResponse(const TrainControlResponse_WaitForChangeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:server.TrainControlResponse.WaitForChangeResponse)
}

void TrainControlResponse_WaitForChangeResponse::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
}

TrainControlResponse_WaitForChangeResponse::~TrainControlResponse_WaitForChangeResponse() {
  // @@protoc_insertion_point(destructor:server.TrainControlResponse.WaitForChangeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlResponse_WaitForChangeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainControlResponse_WaitForChangeResponse::ArenaDtor(void* object) {
  TrainControlResponse_WaitForChangeResponse* _this = reinterpret_cast< TrainControlResponse_WaitForChangeResponse* >(object);
  (void)_this;
}
void TrainControlResponse_WaitForChangeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlResponse_WaitForChangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlResponse_WaitForChangeResponse& TrainControlResponse_WaitForChangeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlResponse_WaitForChangeResponse_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlResponse_WaitForChangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlResponse.WaitForChangeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlResponse_WaitForChangeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 timestamp = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 id = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlResponse_WaitForChangeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlResponse.WaitForChangeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 timestamp = 53;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(53, this->_internal_timestamp(), target);
  }

  // optional int32 id = 54;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(54, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlResponse.WaitForChangeResponse)
  return target;
}

size_t TrainControlResponse_WaitForChangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlResponse.WaitForChangeResponse)
  size_t total_size = 0;

  // required uint64 timestamp = 53;
  if (_internal_has_timestamp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 id = 54;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlResponse_WaitForChangeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlResponse.WaitForChangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlResponse_WaitForChangeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlResponse_WaitForChangeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlResponse.WaitForChangeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlResponse.WaitForChangeResponse)
    MergeFrom(*source);
  }
}

void TrainControlResponse_WaitForChangeResponse::MergeFrom(const TrainControlResponse_WaitForChangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlResponse.WaitForChangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrainControlResponse_WaitForChangeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlResponse.WaitForChangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlResponse_WaitForChangeResponse::CopyFrom(const TrainControlResponse_WaitForChangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlResponse.WaitForChangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlResponse_WaitForChangeResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrainControlResponse_WaitForChangeResponse::InternalSwap(TrainControlResponse_WaitForChangeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainControlResponse_WaitForChangeResponse, timestamp_)
      + sizeof(TrainControlResponse_WaitForChangeResponse::timestamp_)
      - PROTOBUF_FIELD_OFFSET(TrainControlResponse_WaitForChangeResponse, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlResponse_WaitForChangeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainControlResponse::InitAsDefaultInstance() {
  ::server::_TrainControlResponse_default_instance_._instance.get_mutable()->speed_ = const_cast< ::server::TrainControlResponse_Speed*>(
      ::server::TrainControlResponse_Speed::internal_default_instance());
  ::server::_TrainControlResponse_default_instance_._instance.get_mutable()->accessory_ = const_cast< ::server::TrainControlResponse_Accessory*>(
      ::server::TrainControlResponse_Accessory::internal_default_instance());
  ::server::_TrainControlResponse_default_instance_._instance.get_mutable()->emergencystop_ = const_cast< ::server::TrainControlResponse_EmergencyStop*>(
      ::server::TrainControlResponse_EmergencyStop::internal_default_instance());
  ::server::_TrainControlResponse_default_instance_._instance.get_mutable()->rpcresponse_ = const_cast< ::server::TrainControlResponse_RpcResponse*>(
      ::server::TrainControlResponse_RpcResponse::internal_default_instance());
  ::server::_TrainControlResponse_default_instance_._instance.get_mutable()->pong_ = const_cast< ::server::TrainControlResponse_Pong*>(
      ::server::TrainControlResponse_Pong::internal_default_instance());
  ::server::_TrainControlResponse_default_instance_._instance.get_mutable()->currentaddress_ = const_cast< ::server::TrainControlResponse_CurrentAddress*>(
      ::server::TrainControlResponse_CurrentAddress::internal_default_instance());
  ::server::_TrainControlResponse_default_instance_._instance.get_mutable()->rawcanpacket_ = const_cast< ::server::TrainControlResponse_RawCanPacket*>(
      ::server::TrainControlResponse_RawCanPacket::internal_default_instance());
  ::server::_TrainControlResponse_default_instance_._instance.get_mutable()->reflashautomata_ = const_cast< ::server::TrainControlResponse_ReflashAutomata*>(
      ::server::TrainControlResponse_ReflashAutomata::internal_default_instance());
  ::server::_TrainControlResponse_default_instance_._instance.get_mutable()->lokdb_ = const_cast< ::server::TrainControlResponse_LokDb*>(
      ::server::TrainControlResponse_LokDb::internal_default_instance());
  ::server::_TrainControlResponse_default_instance_._instance.get_mutable()->picmisc_ = const_cast< ::server::TrainControlResponse_PicMisc*>(
      ::server::TrainControlResponse_PicMisc::internal_default_instance());
  ::server::_TrainControlResponse_default_instance_._instance.get_mutable()->reflashpic_ = const_cast< ::server::TrainControlResponse_ReflashPic*>(
      ::server::TrainControlResponse_ReflashPic::internal_default_instance());
  ::server::_TrainControlResponse_default_instance_._instance.get_mutable()->cv_ = const_cast< ::server::TrainControlResponse_Cv*>(
      ::server::TrainControlResponse_Cv::internal_default_instance());
  ::server::_TrainControlResponse_default_instance_._instance.get_mutable()->waitforchangeresponse_ = const_cast< ::server::TrainControlResponse_WaitForChangeResponse*>(
      ::server::TrainControlResponse_WaitForChangeResponse::internal_default_instance());
}
class TrainControlResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainControlResponse>()._has_bits_);
  static const ::server::TrainControlResponse_Speed& speed(const TrainControlResponse* msg);
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::server::TrainControlResponse_Accessory& accessory(const TrainControlResponse* msg);
  static void set_has_accessory(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::server::TrainControlResponse_EmergencyStop& emergencystop(const TrainControlResponse* msg);
  static void set_has_emergencystop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::server::TrainControlResponse_RpcResponse& rpcresponse(const TrainControlResponse* msg);
  static void set_has_rpcresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::server::TrainControlResponse_Pong& pong(const TrainControlResponse* msg);
  static void set_has_pong(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::server::TrainControlResponse_CurrentAddress& currentaddress(const TrainControlResponse* msg);
  static void set_has_currentaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::server::TrainControlResponse_RawCanPacket& rawcanpacket(const TrainControlResponse* msg);
  static void set_has_rawcanpacket(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::server::TrainControlResponse_ReflashAutomata& reflashautomata(const TrainControlResponse* msg);
  static void set_has_reflashautomata(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::server::TrainControlResponse_LokDb& lokdb(const TrainControlResponse* msg);
  static void set_has_lokdb(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::server::TrainControlResponse_PicMisc& picmisc(const TrainControlResponse* msg);
  static void set_has_picmisc(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::server::TrainControlResponse_ReflashPic& reflashpic(const TrainControlResponse* msg);
  static void set_has_reflashpic(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::server::TrainControlResponse_Cv& cv(const TrainControlResponse* msg);
  static void set_has_cv(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::server::TrainControlResponse_WaitForChangeResponse& waitforchangeresponse(const TrainControlResponse* msg);
  static void set_has_waitforchangeresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::server::TrainControlResponse_Speed&
TrainControlResponse::_Internal::speed(const TrainControlResponse* msg) {
  return *msg->speed_;
}
const ::server::TrainControlResponse_Accessory&
TrainControlResponse::_Internal::accessory(const TrainControlResponse* msg) {
  return *msg->accessory_;
}
const ::server::TrainControlResponse_EmergencyStop&
TrainControlResponse::_Internal::emergencystop(const TrainControlResponse* msg) {
  return *msg->emergencystop_;
}
const ::server::TrainControlResponse_RpcResponse&
TrainControlResponse::_Internal::rpcresponse(const TrainControlResponse* msg) {
  return *msg->rpcresponse_;
}
const ::server::TrainControlResponse_Pong&
TrainControlResponse::_Internal::pong(const TrainControlResponse* msg) {
  return *msg->pong_;
}
const ::server::TrainControlResponse_CurrentAddress&
TrainControlResponse::_Internal::currentaddress(const TrainControlResponse* msg) {
  return *msg->currentaddress_;
}
const ::server::TrainControlResponse_RawCanPacket&
TrainControlResponse::_Internal::rawcanpacket(const TrainControlResponse* msg) {
  return *msg->rawcanpacket_;
}
const ::server::TrainControlResponse_ReflashAutomata&
TrainControlResponse::_Internal::reflashautomata(const TrainControlResponse* msg) {
  return *msg->reflashautomata_;
}
const ::server::TrainControlResponse_LokDb&
TrainControlResponse::_Internal::lokdb(const TrainControlResponse* msg) {
  return *msg->lokdb_;
}
const ::server::TrainControlResponse_PicMisc&
TrainControlResponse::_Internal::picmisc(const TrainControlResponse* msg) {
  return *msg->picmisc_;
}
const ::server::TrainControlResponse_ReflashPic&
TrainControlResponse::_Internal::reflashpic(const TrainControlResponse* msg) {
  return *msg->reflashpic_;
}
const ::server::TrainControlResponse_Cv&
TrainControlResponse::_Internal::cv(const TrainControlResponse* msg) {
  return *msg->cv_;
}
const ::server::TrainControlResponse_WaitForChangeResponse&
TrainControlResponse::_Internal::waitforchangeresponse(const TrainControlResponse* msg) {
  return *msg->waitforchangeresponse_;
}
TrainControlResponse::TrainControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lokstate_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TrainControlResponse)
}
TrainControlResponse::TrainControlResponse(const TrainControlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      lokstate_(from.lokstate_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_speed()) {
    speed_ = new ::server::TrainControlResponse_Speed(*from.speed_);
  } else {
    speed_ = nullptr;
  }
  if (from._internal_has_accessory()) {
    accessory_ = new ::server::TrainControlResponse_Accessory(*from.accessory_);
  } else {
    accessory_ = nullptr;
  }
  if (from._internal_has_emergencystop()) {
    emergencystop_ = new ::server::TrainControlResponse_EmergencyStop(*from.emergencystop_);
  } else {
    emergencystop_ = nullptr;
  }
  if (from._internal_has_rpcresponse()) {
    rpcresponse_ = new ::server::TrainControlResponse_RpcResponse(*from.rpcresponse_);
  } else {
    rpcresponse_ = nullptr;
  }
  if (from._internal_has_pong()) {
    pong_ = new ::server::TrainControlResponse_Pong(*from.pong_);
  } else {
    pong_ = nullptr;
  }
  if (from._internal_has_currentaddress()) {
    currentaddress_ = new ::server::TrainControlResponse_CurrentAddress(*from.currentaddress_);
  } else {
    currentaddress_ = nullptr;
  }
  if (from._internal_has_rawcanpacket()) {
    rawcanpacket_ = new ::server::TrainControlResponse_RawCanPacket(*from.rawcanpacket_);
  } else {
    rawcanpacket_ = nullptr;
  }
  if (from._internal_has_reflashautomata()) {
    reflashautomata_ = new ::server::TrainControlResponse_ReflashAutomata(*from.reflashautomata_);
  } else {
    reflashautomata_ = nullptr;
  }
  if (from._internal_has_lokdb()) {
    lokdb_ = new ::server::TrainControlResponse_LokDb(*from.lokdb_);
  } else {
    lokdb_ = nullptr;
  }
  if (from._internal_has_picmisc()) {
    picmisc_ = new ::server::TrainControlResponse_PicMisc(*from.picmisc_);
  } else {
    picmisc_ = nullptr;
  }
  if (from._internal_has_reflashpic()) {
    reflashpic_ = new ::server::TrainControlResponse_ReflashPic(*from.reflashpic_);
  } else {
    reflashpic_ = nullptr;
  }
  if (from._internal_has_cv()) {
    cv_ = new ::server::TrainControlResponse_Cv(*from.cv_);
  } else {
    cv_ = nullptr;
  }
  if (from._internal_has_waitforchangeresponse()) {
    waitforchangeresponse_ = new ::server::TrainControlResponse_WaitForChangeResponse(*from.waitforchangeresponse_);
  } else {
    waitforchangeresponse_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:server.TrainControlResponse)
}

void TrainControlResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrainControlResponse_train_5fcontrol_2eproto.base);
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&waitforchangeresponse_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(waitforchangeresponse_));
}

TrainControlResponse::~TrainControlResponse() {
  // @@protoc_insertion_point(destructor:server.TrainControlResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainControlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete speed_;
  if (this != internal_default_instance()) delete accessory_;
  if (this != internal_default_instance()) delete emergencystop_;
  if (this != internal_default_instance()) delete rpcresponse_;
  if (this != internal_default_instance()) delete pong_;
  if (this != internal_default_instance()) delete currentaddress_;
  if (this != internal_default_instance()) delete rawcanpacket_;
  if (this != internal_default_instance()) delete reflashautomata_;
  if (this != internal_default_instance()) delete lokdb_;
  if (this != internal_default_instance()) delete picmisc_;
  if (this != internal_default_instance()) delete reflashpic_;
  if (this != internal_default_instance()) delete cv_;
  if (this != internal_default_instance()) delete waitforchangeresponse_;
}

void TrainControlResponse::ArenaDtor(void* object) {
  TrainControlResponse* _this = reinterpret_cast< TrainControlResponse* >(object);
  (void)_this;
}
void TrainControlResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainControlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainControlResponse& TrainControlResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainControlResponse_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TrainControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TrainControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lokstate_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(speed_ != nullptr);
      speed_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(accessory_ != nullptr);
      accessory_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(emergencystop_ != nullptr);
      emergencystop_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rpcresponse_ != nullptr);
      rpcresponse_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(pong_ != nullptr);
      pong_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(currentaddress_ != nullptr);
      currentaddress_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(rawcanpacket_ != nullptr);
      rawcanpacket_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(reflashautomata_ != nullptr);
      reflashautomata_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(lokdb_ != nullptr);
      lokdb_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(picmisc_ != nullptr);
      picmisc_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(reflashpic_ != nullptr);
      reflashpic_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(cv_ != nullptr);
      cv_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(waitforchangeresponse_ != nullptr);
      waitforchangeresponse_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainControlResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional group Speed = 1 { ... };
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 11)) {
          ptr = ctx->ParseGroup(_internal_mutable_speed(), ptr, 11);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group Accessory = 4 { ... };
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 35)) {
          ptr = ctx->ParseGroup(_internal_mutable_accessory(), ptr, 35);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group EmergencyStop = 8 { ... };
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 67)) {
          ptr = ctx->ParseGroup(_internal_mutable_emergencystop(), ptr, 67);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group RpcResponse = 16 { ... };
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 131)) {
          ptr = ctx->ParseGroup(_internal_mutable_rpcresponse(), ptr, 131);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group Pong = 19 { ... };
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 155)) {
          ptr = ctx->ParseGroup(_internal_mutable_pong(), ptr, 155);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group CurrentAddress = 21 { ... };
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 171)) {
          ptr = ctx->ParseGroup(_internal_mutable_currentaddress(), ptr, 171);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group RawCanPacket = 23 { ... };
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 187)) {
          ptr = ctx->ParseGroup(_internal_mutable_rawcanpacket(), ptr, 187);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group ReflashAutomata = 27 { ... };
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 219)) {
          ptr = ctx->ParseGroup(_internal_mutable_reflashautomata(), ptr, 219);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group LokDb = 28 { ... };
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 227)) {
          ptr = ctx->ParseGroup(_internal_mutable_lokdb(), ptr, 227);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .server.LokStateProto lokstate = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lokstate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<290>(ptr));
        } else goto handle_unusual;
        continue;
      // optional group PicMisc = 37 { ... };
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 43)) {
          ptr = ctx->ParseGroup(_internal_mutable_picmisc(), ptr, 299);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group ReflashPic = 43 { ... };
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 91)) {
          ptr = ctx->ParseGroup(_internal_mutable_reflashpic(), ptr, 347);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group Cv = 45 { ... };
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 107)) {
          ptr = ctx->ParseGroup(_internal_mutable_cv(), ptr, 363);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group WaitForChangeResponse = 52 { ... };
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 163)) {
          ptr = ctx->ParseGroup(_internal_mutable_waitforchangeresponse(), ptr, 419);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainControlResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TrainControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional group Speed = 1 { ... };
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        1, _Internal::speed(this), target, stream);
  }

  // optional group Accessory = 4 { ... };
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        4, _Internal::accessory(this), target, stream);
  }

  // optional group EmergencyStop = 8 { ... };
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        8, _Internal::emergencystop(this), target, stream);
  }

  // optional group RpcResponse = 16 { ... };
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        16, _Internal::rpcresponse(this), target, stream);
  }

  // optional group Pong = 19 { ... };
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        19, _Internal::pong(this), target, stream);
  }

  // optional group CurrentAddress = 21 { ... };
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        21, _Internal::currentaddress(this), target, stream);
  }

  // optional group RawCanPacket = 23 { ... };
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        23, _Internal::rawcanpacket(this), target, stream);
  }

  // optional group ReflashAutomata = 27 { ... };
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        27, _Internal::reflashautomata(this), target, stream);
  }

  // optional group LokDb = 28 { ... };
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        28, _Internal::lokdb(this), target, stream);
  }

  // repeated .server.LokStateProto lokstate = 36;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lokstate_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, this->_internal_lokstate(i), target, stream);
  }

  // optional group PicMisc = 37 { ... };
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        37, _Internal::picmisc(this), target, stream);
  }

  // optional group ReflashPic = 43 { ... };
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        43, _Internal::reflashpic(this), target, stream);
  }

  // optional group Cv = 45 { ... };
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        45, _Internal::cv(this), target, stream);
  }

  // optional group WaitForChangeResponse = 52 { ... };
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        52, _Internal::waitforchangeresponse(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TrainControlResponse)
  return target;
}

size_t TrainControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TrainControlResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .server.LokStateProto lokstate = 36;
  total_size += 2UL * this->_internal_lokstate_size();
  for (const auto& msg : this->lokstate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional group Speed = 1 { ... };
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *speed_);
    }

    // optional group Accessory = 4 { ... };
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *accessory_);
    }

    // optional group EmergencyStop = 8 { ... };
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *emergencystop_);
    }

    // optional group RpcResponse = 16 { ... };
    if (cached_has_bits & 0x00000008u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *rpcresponse_);
    }

    // optional group Pong = 19 { ... };
    if (cached_has_bits & 0x00000010u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *pong_);
    }

    // optional group CurrentAddress = 21 { ... };
    if (cached_has_bits & 0x00000020u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *currentaddress_);
    }

    // optional group RawCanPacket = 23 { ... };
    if (cached_has_bits & 0x00000040u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *rawcanpacket_);
    }

    // optional group ReflashAutomata = 27 { ... };
    if (cached_has_bits & 0x00000080u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *reflashautomata_);
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional group LokDb = 28 { ... };
    if (cached_has_bits & 0x00000100u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *lokdb_);
    }

    // optional group PicMisc = 37 { ... };
    if (cached_has_bits & 0x00000200u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *picmisc_);
    }

    // optional group ReflashPic = 43 { ... };
    if (cached_has_bits & 0x00000400u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *reflashpic_);
    }

    // optional group Cv = 45 { ... };
    if (cached_has_bits & 0x00000800u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *cv_);
    }

    // optional group WaitForChangeResponse = 52 { ... };
    if (cached_has_bits & 0x00001000u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *waitforchangeresponse_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainControlResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TrainControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainControlResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainControlResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TrainControlResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TrainControlResponse)
    MergeFrom(*source);
  }
}

void TrainControlResponse::MergeFrom(const TrainControlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TrainControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lokstate_.MergeFrom(from.lokstate_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_speed()->::server::TrainControlResponse_Speed::MergeFrom(from._internal_speed());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_accessory()->::server::TrainControlResponse_Accessory::MergeFrom(from._internal_accessory());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_emergencystop()->::server::TrainControlResponse_EmergencyStop::MergeFrom(from._internal_emergencystop());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rpcresponse()->::server::TrainControlResponse_RpcResponse::MergeFrom(from._internal_rpcresponse());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_pong()->::server::TrainControlResponse_Pong::MergeFrom(from._internal_pong());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_currentaddress()->::server::TrainControlResponse_CurrentAddress::MergeFrom(from._internal_currentaddress());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_rawcanpacket()->::server::TrainControlResponse_RawCanPacket::MergeFrom(from._internal_rawcanpacket());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_reflashautomata()->::server::TrainControlResponse_ReflashAutomata::MergeFrom(from._internal_reflashautomata());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_lokdb()->::server::TrainControlResponse_LokDb::MergeFrom(from._internal_lokdb());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_picmisc()->::server::TrainControlResponse_PicMisc::MergeFrom(from._internal_picmisc());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_reflashpic()->::server::TrainControlResponse_ReflashPic::MergeFrom(from._internal_reflashpic());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_cv()->::server::TrainControlResponse_Cv::MergeFrom(from._internal_cv());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_waitforchangeresponse()->::server::TrainControlResponse_WaitForChangeResponse::MergeFrom(from._internal_waitforchangeresponse());
    }
  }
}

void TrainControlResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TrainControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainControlResponse::CopyFrom(const TrainControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TrainControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainControlResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(lokstate_)) return false;
  if (_internal_has_speed()) {
    if (!speed_->IsInitialized()) return false;
  }
  if (_internal_has_accessory()) {
    if (!accessory_->IsInitialized()) return false;
  }
  if (_internal_has_emergencystop()) {
    if (!emergencystop_->IsInitialized()) return false;
  }
  if (_internal_has_rpcresponse()) {
    if (!rpcresponse_->IsInitialized()) return false;
  }
  if (_internal_has_pong()) {
    if (!pong_->IsInitialized()) return false;
  }
  if (_internal_has_currentaddress()) {
    if (!currentaddress_->IsInitialized()) return false;
  }
  if (_internal_has_lokdb()) {
    if (!lokdb_->IsInitialized()) return false;
  }
  if (_internal_has_picmisc()) {
    if (!picmisc_->IsInitialized()) return false;
  }
  if (_internal_has_cv()) {
    if (!cv_->IsInitialized()) return false;
  }
  if (_internal_has_waitforchangeresponse()) {
    if (!waitforchangeresponse_->IsInitialized()) return false;
  }
  return true;
}

void TrainControlResponse::InternalSwap(TrainControlResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lokstate_.InternalSwap(&other->lokstate_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainControlResponse, waitforchangeresponse_)
      + sizeof(TrainControlResponse::waitforchangeresponse_)
      - PROTOBUF_FIELD_OFFSET(TrainControlResponse, speed_)>(
          reinterpret_cast<char*>(&speed_),
          reinterpret_cast<char*>(&other->speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainControlResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TinyRpcRequest::InitAsDefaultInstance() {
  ::server::_TinyRpcRequest_default_instance_._instance.get_mutable()->request_ = const_cast< ::server::TrainControlRequest*>(
      ::server::TrainControlRequest::internal_default_instance());
}
class TinyRpcRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<TinyRpcRequest>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::server::TrainControlRequest& request(const TinyRpcRequest* msg);
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::server::TrainControlRequest&
TinyRpcRequest::_Internal::request(const TinyRpcRequest* msg) {
  return *msg->request_;
}
TinyRpcRequest::TinyRpcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TinyRpcRequest)
}
TinyRpcRequest::TinyRpcRequest(const TinyRpcRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    request_ = new ::server::TrainControlRequest(*from.request_);
  } else {
    request_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:server.TinyRpcRequest)
}

void TinyRpcRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TinyRpcRequest_train_5fcontrol_2eproto.base);
  ::memset(&request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&request_)) + sizeof(id_));
}

TinyRpcRequest::~TinyRpcRequest() {
  // @@protoc_insertion_point(destructor:server.TinyRpcRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TinyRpcRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete request_;
}

void TinyRpcRequest::ArenaDtor(void* object) {
  TinyRpcRequest* _this = reinterpret_cast< TinyRpcRequest* >(object);
  (void)_this;
}
void TinyRpcRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TinyRpcRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TinyRpcRequest& TinyRpcRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TinyRpcRequest_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TinyRpcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TinyRpcRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(request_ != nullptr);
    request_->Clear();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TinyRpcRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .server.TrainControlRequest request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TinyRpcRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TinyRpcRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // required .server.TrainControlRequest request = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TinyRpcRequest)
  return target;
}

size_t TinyRpcRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:server.TinyRpcRequest)
  size_t total_size = 0;

  if (_internal_has_request()) {
    // required .server.TrainControlRequest request = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  if (_internal_has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  return total_size;
}
size_t TinyRpcRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TinyRpcRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .server.TrainControlRequest request = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);

    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TinyRpcRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TinyRpcRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TinyRpcRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TinyRpcRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TinyRpcRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TinyRpcRequest)
    MergeFrom(*source);
  }
}

void TinyRpcRequest::MergeFrom(const TinyRpcRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TinyRpcRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_request()->::server::TrainControlRequest::MergeFrom(from._internal_request());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TinyRpcRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TinyRpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TinyRpcRequest::CopyFrom(const TinyRpcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TinyRpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TinyRpcRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_request()) {
    if (!request_->IsInitialized()) return false;
  }
  return true;
}

void TinyRpcRequest::InternalSwap(TinyRpcRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TinyRpcRequest, id_)
      + sizeof(TinyRpcRequest::id_)
      - PROTOBUF_FIELD_OFFSET(TinyRpcRequest, request_)>(
          reinterpret_cast<char*>(&request_),
          reinterpret_cast<char*>(&other->request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TinyRpcRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TinyRpcResponse::InitAsDefaultInstance() {
  ::server::_TinyRpcResponse_default_instance_._instance.get_mutable()->response_ = const_cast< ::server::TrainControlResponse*>(
      ::server::TrainControlResponse::internal_default_instance());
}
class TinyRpcResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<TinyRpcResponse>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::server::TrainControlResponse& response(const TinyRpcResponse* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_failed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_error_detail(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::server::TrainControlResponse&
TinyRpcResponse::_Internal::response(const TinyRpcResponse* msg) {
  return *msg->response_;
}
TinyRpcResponse::TinyRpcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:server.TinyRpcResponse)
}
TinyRpcResponse::TinyRpcResponse(const TinyRpcResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error_detail()) {
    error_detail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error_detail(),
      GetArena());
  }
  if (from._internal_has_response()) {
    response_ = new ::server::TrainControlResponse(*from.response_);
  } else {
    response_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&failed_) -
    reinterpret_cast<char*>(&id_)) + sizeof(failed_));
  // @@protoc_insertion_point(copy_constructor:server.TinyRpcResponse)
}

void TinyRpcResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TinyRpcResponse_train_5fcontrol_2eproto.base);
  error_detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failed_) -
      reinterpret_cast<char*>(&response_)) + sizeof(failed_));
}

TinyRpcResponse::~TinyRpcResponse() {
  // @@protoc_insertion_point(destructor:server.TinyRpcResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TinyRpcResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_detail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete response_;
}

void TinyRpcResponse::ArenaDtor(void* object) {
  TinyRpcResponse* _this = reinterpret_cast< TinyRpcResponse* >(object);
  (void)_this;
}
void TinyRpcResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TinyRpcResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TinyRpcResponse& TinyRpcResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TinyRpcResponse_train_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void TinyRpcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TinyRpcResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      error_detail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(response_ != nullptr);
      response_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&failed_) -
        reinterpret_cast<char*>(&id_)) + sizeof(failed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TinyRpcResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool failed = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_failed(&has_bits);
          failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error_detail = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error_detail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TinyRpcResponse.error_detail");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .server.TrainControlResponse response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TinyRpcResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.TinyRpcResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional bool failed = 2 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_failed(), target);
  }

  // optional string error_detail = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_detail().data(), static_cast<int>(this->_internal_error_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "server.TinyRpcResponse.error_detail");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_detail(), target);
  }

  // optional .server.TrainControlResponse response = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.TinyRpcResponse)
  return target;
}

size_t TinyRpcResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TinyRpcResponse)
  size_t total_size = 0;

  // required int32 id = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string error_detail = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_detail());
    }

    // optional .server.TrainControlResponse response = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_);
    }

  }
  // optional bool failed = 2 [default = false];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TinyRpcResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TinyRpcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TinyRpcResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TinyRpcResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TinyRpcResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TinyRpcResponse)
    MergeFrom(*source);
  }
}

void TinyRpcResponse::MergeFrom(const TinyRpcResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TinyRpcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_error_detail(from._internal_error_detail());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_response()->::server::TrainControlResponse::MergeFrom(from._internal_response());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      failed_ = from.failed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TinyRpcResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TinyRpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TinyRpcResponse::CopyFrom(const TinyRpcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TinyRpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TinyRpcResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_response()) {
    if (!response_->IsInitialized()) return false;
  }
  return true;
}

void TinyRpcResponse::InternalSwap(TinyRpcResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_detail_.Swap(&other->error_detail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TinyRpcResponse, failed_)
      + sizeof(TinyRpcResponse::failed_)
      - PROTOBUF_FIELD_OFFSET(TinyRpcResponse, response_)>(
          reinterpret_cast<char*>(&response_),
          reinterpret_cast<char*>(&other->response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TinyRpcResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace server
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::server::LokStateProto_Function* Arena::CreateMaybeMessage< ::server::LokStateProto_Function >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::LokStateProto_Function >(arena);
}
template<> PROTOBUF_NOINLINE ::server::LokStateProto* Arena::CreateMaybeMessage< ::server::LokStateProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::LokStateProto >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlRequest_DoSetSpeed* Arena::CreateMaybeMessage< ::server::TrainControlRequest_DoSetSpeed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlRequest_DoSetSpeed >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlRequest_DoSetAccessory* Arena::CreateMaybeMessage< ::server::TrainControlRequest_DoSetAccessory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlRequest_DoSetAccessory >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlRequest_DoSetEmergencyStop* Arena::CreateMaybeMessage< ::server::TrainControlRequest_DoSetEmergencyStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlRequest_DoSetEmergencyStop >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlRequest_DoRpc* Arena::CreateMaybeMessage< ::server::TrainControlRequest_DoRpc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlRequest_DoRpc >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlRequest_DoPing* Arena::CreateMaybeMessage< ::server::TrainControlRequest_DoPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlRequest_DoPing >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlRequest_DoGetOrSetAddress* Arena::CreateMaybeMessage< ::server::TrainControlRequest_DoGetOrSetAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlRequest_DoGetOrSetAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlRequest_DoDropState* Arena::CreateMaybeMessage< ::server::TrainControlRequest_DoDropState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlRequest_DoDropState >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlRequest_DoChangeSavedState* Arena::CreateMaybeMessage< ::server::TrainControlRequest_DoChangeSavedState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlRequest_DoChangeSavedState >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlRequest_DoSendRawCanPacket* Arena::CreateMaybeMessage< ::server::TrainControlRequest_DoSendRawCanPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlRequest_DoSendRawCanPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlRequest_DoReflashAutomata* Arena::CreateMaybeMessage< ::server::TrainControlRequest_DoReflashAutomata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlRequest_DoReflashAutomata >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlRequest_DoGetLokDb* Arena::CreateMaybeMessage< ::server::TrainControlRequest_DoGetLokDb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlRequest_DoGetLokDb >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlRequest_DoGetLokState* Arena::CreateMaybeMessage< ::server::TrainControlRequest_DoGetLokState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlRequest_DoGetLokState >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlRequest_DoEStopLoco* Arena::CreateMaybeMessage< ::server::TrainControlRequest_DoEStopLoco >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlRequest_DoEStopLoco >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlRequest_DoPicMisc* Arena::CreateMaybeMessage< ::server::TrainControlRequest_DoPicMisc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlRequest_DoPicMisc >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlRequest_DoReflashPic* Arena::CreateMaybeMessage< ::server::TrainControlRequest_DoReflashPic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlRequest_DoReflashPic >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlRequest_DoGetOrSetCV* Arena::CreateMaybeMessage< ::server::TrainControlRequest_DoGetOrSetCV >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlRequest_DoGetOrSetCV >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlRequest_DoWaitForChange* Arena::CreateMaybeMessage< ::server::TrainControlRequest_DoWaitForChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlRequest_DoWaitForChange >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlRequest* Arena::CreateMaybeMessage< ::server::TrainControlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlResponse_Speed* Arena::CreateMaybeMessage< ::server::TrainControlResponse_Speed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlResponse_Speed >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlResponse_Accessory* Arena::CreateMaybeMessage< ::server::TrainControlResponse_Accessory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlResponse_Accessory >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlResponse_EmergencyStop* Arena::CreateMaybeMessage< ::server::TrainControlResponse_EmergencyStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlResponse_EmergencyStop >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlResponse_RpcResponse* Arena::CreateMaybeMessage< ::server::TrainControlResponse_RpcResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlResponse_RpcResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlResponse_Pong* Arena::CreateMaybeMessage< ::server::TrainControlResponse_Pong >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlResponse_Pong >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlResponse_CurrentAddress* Arena::CreateMaybeMessage< ::server::TrainControlResponse_CurrentAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlResponse_CurrentAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlResponse_RawCanPacket* Arena::CreateMaybeMessage< ::server::TrainControlResponse_RawCanPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlResponse_RawCanPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlResponse_ReflashAutomata* Arena::CreateMaybeMessage< ::server::TrainControlResponse_ReflashAutomata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlResponse_ReflashAutomata >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlResponse_LokDb_Lok_Function* Arena::CreateMaybeMessage< ::server::TrainControlResponse_LokDb_Lok_Function >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlResponse_LokDb_Lok_Function >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlResponse_LokDb_Lok* Arena::CreateMaybeMessage< ::server::TrainControlResponse_LokDb_Lok >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlResponse_LokDb_Lok >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlResponse_LokDb* Arena::CreateMaybeMessage< ::server::TrainControlResponse_LokDb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlResponse_LokDb >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlResponse_PicMisc* Arena::CreateMaybeMessage< ::server::TrainControlResponse_PicMisc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlResponse_PicMisc >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlResponse_ReflashPic* Arena::CreateMaybeMessage< ::server::TrainControlResponse_ReflashPic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlResponse_ReflashPic >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlResponse_Cv* Arena::CreateMaybeMessage< ::server::TrainControlResponse_Cv >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlResponse_Cv >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlResponse_WaitForChangeResponse* Arena::CreateMaybeMessage< ::server::TrainControlResponse_WaitForChangeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlResponse_WaitForChangeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TrainControlResponse* Arena::CreateMaybeMessage< ::server::TrainControlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TrainControlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TinyRpcRequest* Arena::CreateMaybeMessage< ::server::TinyRpcRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TinyRpcRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::server::TinyRpcResponse* Arena::CreateMaybeMessage< ::server::TinyRpcResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::TinyRpcResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
